import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCouponLog } from "../../../../structures/IShoppingMallCouponLog";
import { IPageIShoppingMallCouponLog } from "../../../../structures/IPageIShoppingMallCouponLog";

/**
 * Search and retrieve coupon log records.
 *
 * Search and retrieve coupon log entries for tracking coupon usage and
 * lifecycle events.
 *
 * Supports filtering by coupon ticket, customer user ID, log types, and time
 * ranges.
 *
 * Accessible only to authenticated member users for compliance and audit.
 *
 * No write or update operations supported.
 *
 * Errors occur if filter criteria are invalid or no matching logs are found.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for coupon log
 *   filtering
 * @path /shoppingMall/memberUser/couponLogs
 * @accessor api.functional.shoppingMall.memberUser.couponLogs.indexCouponLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexCouponLogs(
  connection: IConnection,
  props: indexCouponLogs.Props,
): Promise<indexCouponLogs.Response> {
  return true === connection.simulate
    ? indexCouponLogs.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexCouponLogs.METADATA,
          path: indexCouponLogs.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexCouponLogs {
  export type Props = {
    /** Search criteria and pagination parameters for coupon log filtering */
    body: IShoppingMallCouponLog.IRequest;
  };
  export type Body = IShoppingMallCouponLog.IRequest;
  export type Response = IPageIShoppingMallCouponLog;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/couponLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/couponLogs";
  export const random = (): IPageIShoppingMallCouponLog =>
    typia.random<IPageIShoppingMallCouponLog>();
  export const simulate = (
    connection: IConnection,
    props: indexCouponLogs.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexCouponLogs.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
