import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallFavoriteInquiry } from "../../../../structures/IShoppingMallFavoriteInquiry";
import { IPageIShoppingMallFavoriteInquiry } from "../../../../structures/IPageIShoppingMallFavoriteInquiry";

/**
 * Create a new favorite inquiry entry for a member user referencing an inquiry
 * snapshot. The favorite captures the inquiry state at the time of favoriting,
 * supporting personalized management and notification systems.
 *
 * Input validation ensures the member user and inquiry snapshot exist and are
 * valid UUIDs. The operation will fail if a favorite for the same inquiry
 * snapshot already exists for the member.
 *
 * The created favorite inquiry record includes timestamps for creation and last
 * update. This operation maps to the shopping_mall_favorite_inquiries table
 * directly.
 *
 * Authorization checks ensure only authenticated users can create favorites on
 * their behalf.
 *
 * @param props.connection
 * @param props.body Favorite inquiry creation data
 * @path /shoppingMall/memberUser/favoriteInquiries
 * @accessor api.functional.shoppingMall.memberUser.favoriteInquiries.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Favorite inquiry creation data */
    body: IShoppingMallFavoriteInquiry.ICreate;
  };
  export type Body = IShoppingMallFavoriteInquiry.ICreate;
  export type Response = IShoppingMallFavoriteInquiry;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/memberUser/favoriteInquiries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/favoriteInquiries";
  export const random = (): IShoppingMallFavoriteInquiry =>
    typia.random<IShoppingMallFavoriteInquiry>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve filtered, paginated list of favorite inquiries.
 *
 * Retrieve a filtered and paginated list of favorite inquiries.
 *
 * This operation allows authenticated users to search and manage their inquiry
 * favorites.
 *
 * The favorites reference inquiry snapshots preserving historical inquiry
 * states.
 *
 * The response contains a paginated collection of favorite inquiry summaries
 * suitable for user interface display.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for favorite
 *   inquiry filtering
 * @path /shoppingMall/memberUser/favoriteInquiries
 * @accessor api.functional.shoppingMall.memberUser.favoriteInquiries.indexFavoriteInquiries
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexFavoriteInquiries(
  connection: IConnection,
  props: indexFavoriteInquiries.Props,
): Promise<indexFavoriteInquiries.Response> {
  return true === connection.simulate
    ? indexFavoriteInquiries.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexFavoriteInquiries.METADATA,
          path: indexFavoriteInquiries.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexFavoriteInquiries {
  export type Props = {
    /**
     * Search criteria and pagination parameters for favorite inquiry
     * filtering
     */
    body: IShoppingMallFavoriteInquiry.IRequest;
  };
  export type Body = IShoppingMallFavoriteInquiry.IRequest;
  export type Response = IPageIShoppingMallFavoriteInquiry.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/favoriteInquiries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/favoriteInquiries";
  export const random = (): IPageIShoppingMallFavoriteInquiry.ISummary =>
    typia.random<IPageIShoppingMallFavoriteInquiry.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexFavoriteInquiries.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexFavoriteInquiries.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific favorite inquiry by ID.
 *
 * Retrieve a detailed favorite inquiry record by its unique identifier. This
 * operation enables member users to view their saved favorite inquiries, which
 * are snapshots preserving the inquiry state at the time of favoriting.
 *
 * Authorization is required to ensure the user can only access their own
 * favorites. The favorite inquiry entity links to a member user and holds a
 * reference to a snapshot of the inquiry for historical data integrity.
 *
 * The response includes creation and last updated timestamps to support
 * auditing and user interface display purposes. This operation reflects the
 * state from the shopping_mall_favorite_inquiries table.
 *
 * Clients should handle scenarios where the favorite inquiry does not exist or
 * access is forbidden according to business rules.
 *
 * @param props.connection
 * @param props.favoriteInquiryId Unique identifier of the target favorite
 *   inquiry
 * @path /shoppingMall/memberUser/favoriteInquiries/:favoriteInquiryId
 * @accessor api.functional.shoppingMall.memberUser.favoriteInquiries.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target favorite inquiry */
    favoriteInquiryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallFavoriteInquiry;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/memberUser/favoriteInquiries/:favoriteInquiryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/favoriteInquiries/${encodeURIComponent(props.favoriteInquiryId ?? "null")}`;
  export const random = (): IShoppingMallFavoriteInquiry =>
    typia.random<IShoppingMallFavoriteInquiry>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteInquiryId")(() =>
        typia.assert(props.favoriteInquiryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update favorite inquiry by ID.
 *
 * Update an existing favorite inquiry by ID. The update can modify the inquiry
 * snapshot reference and other editable properties.
 *
 * Security ensures only authorized users can update their favorites and
 * validation prevents duplicate favorites.
 *
 * The operation updates timestamps accordingly and ensures data integrity for
 * favorited inquiries.
 *
 * It operates on the shopping_mall_favorite_inquiries table and enforces
 * business rules on uniqueness and ownership.
 *
 * @param props.connection
 * @param props.favoriteInquiryId Unique identifier of the target favorite
 *   inquiry to update
 * @param props.body Favorite inquiry update data
 * @path /shoppingMall/memberUser/favoriteInquiries/:favoriteInquiryId
 * @accessor api.functional.shoppingMall.memberUser.favoriteInquiries.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target favorite inquiry to update */
    favoriteInquiryId: string & tags.Format<"uuid">;

    /** Favorite inquiry update data */
    body: IShoppingMallFavoriteInquiry.IUpdate;
  };
  export type Body = IShoppingMallFavoriteInquiry.IUpdate;
  export type Response = IShoppingMallFavoriteInquiry;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/memberUser/favoriteInquiries/:favoriteInquiryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/favoriteInquiries/${encodeURIComponent(props.favoriteInquiryId ?? "null")}`;
  export const random = (): IShoppingMallFavoriteInquiry =>
    typia.random<IShoppingMallFavoriteInquiry>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteInquiryId")(() =>
        typia.assert(props.favoriteInquiryId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete favorite inquiry by ID.
 *
 * Delete (soft delete) a favorite inquiry by ID. Marks the record as deleted
 * without physical removal.
 *
 * Authorization enforces ownership restrictions.
 *
 * The operation affects the shopping_mall_favorite_inquiries table, preserving
 * data audit and history.
 *
 * Clients must handle scenarios where favorites are soft deleted and ensure UI
 * reflects state correctly.
 *
 * @param props.connection
 * @param props.favoriteInquiryId Unique identifier of the target favorite
 *   inquiry to delete
 * @path /shoppingMall/memberUser/favoriteInquiries/:favoriteInquiryId
 * @accessor api.functional.shoppingMall.memberUser.favoriteInquiries.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target favorite inquiry to delete */
    favoriteInquiryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/memberUser/favoriteInquiries/:favoriteInquiryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/favoriteInquiries/${encodeURIComponent(props.favoriteInquiryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteInquiryId")(() =>
        typia.assert(props.favoriteInquiryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
