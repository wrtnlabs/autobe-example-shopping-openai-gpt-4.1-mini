import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallFavoriteAddress } from "../../../../structures/IShoppingMallFavoriteAddress";
import { IPageIShoppingMallFavoriteAddress } from "../../../../structures/IPageIShoppingMallFavoriteAddress";

/**
 * Create a new favorite address.
 *
 * Add a new favorite address record linking a member user to an address
 * snapshot.
 *
 * Input validation checks valid user and snapshot UUIDs.
 *
 * Timestamps for creation and last update are recorded.
 *
 * Authorization restricts operation to authenticated users only.
 *
 * Supports personalized address favorite management.
 *
 * @param props.connection
 * @param props.body Favorite address creation data
 * @path /shoppingMall/memberUser/favoriteAddresses
 * @accessor api.functional.shoppingMall.memberUser.favoriteAddresses.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Favorite address creation data */
    body: IShoppingMallFavoriteAddress.ICreate;
  };
  export type Body = IShoppingMallFavoriteAddress.ICreate;
  export type Response = IShoppingMallFavoriteAddress;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/memberUser/favoriteAddresses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/favoriteAddresses";
  export const random = (): IShoppingMallFavoriteAddress =>
    typia.random<IShoppingMallFavoriteAddress>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search favorite addresses with pagination and filters.
 *
 * Search and retrieve a filtered, paginated list of favorite addresses for a
 * member user. Supports customized filtering, sorting, and pagination options.
 *
 * Favorites contain snapshots for historical accuracy and auditing.
 *
 * Users are authorized to see only their own favorite addresses.
 *
 * Response includes paginated address favorite summaries.
 *
 * This operation relates to the shopping_mall_favorite_addresses table.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for favorite
 *   addresses
 * @path /shoppingMall/memberUser/favoriteAddresses
 * @accessor api.functional.shoppingMall.memberUser.favoriteAddresses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for favorite addresses */
    body: IShoppingMallFavoriteAddress.IRequest;
  };
  export type Body = IShoppingMallFavoriteAddress.IRequest;
  export type Response = IPageIShoppingMallFavoriteAddress.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/favoriteAddresses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/favoriteAddresses";
  export const random = (): IPageIShoppingMallFavoriteAddress.ISummary =>
    typia.random<IPageIShoppingMallFavoriteAddress.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific favorite address by ID.
 *
 * Get a favorite address by its unique identifier, providing detailed
 * information about the saved address and associated snapshot.
 *
 * Authorization ensures secure access limited to the owning member user.
 *
 * This operation returns comprehensive favorite address data for user
 * management purposes.
 *
 * It uses the shopping_mall_favorite_addresses table as the data source.
 *
 * @param props.connection
 * @param props.favoriteAddressId Unique identifier of the target favorite
 *   address
 * @path /shoppingMall/memberUser/favoriteAddresses/:favoriteAddressId
 * @accessor api.functional.shoppingMall.memberUser.favoriteAddresses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target favorite address */
    favoriteAddressId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallFavoriteAddress;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/memberUser/favoriteAddresses/:favoriteAddressId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/favoriteAddresses/${encodeURIComponent(props.favoriteAddressId ?? "null")}`;
  export const random = (): IShoppingMallFavoriteAddress =>
    typia.random<IShoppingMallFavoriteAddress>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteAddressId")(() =>
        typia.assert(props.favoriteAddressId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update favorite address by ID. Modify address snapshot references and other
 * editable fields.
 *
 * Authorization ensures user ownership and validation prevents duplicates.
 *
 * The updated record's timestamps will also refresh.
 *
 * This operation maintains personalized management of favorite addresses.
 *
 * @param props.connection
 * @param props.favoriteAddressId Unique identifier of the target favorite
 *   address to update
 * @param props.body Favorite address update data
 * @path /shoppingMall/memberUser/favoriteAddresses/:favoriteAddressId
 * @accessor api.functional.shoppingMall.memberUser.favoriteAddresses.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target favorite address to update */
    favoriteAddressId: string & tags.Format<"uuid">;

    /** Favorite address update data */
    body: IShoppingMallFavoriteAddress.IUpdate;
  };
  export type Body = IShoppingMallFavoriteAddress.IUpdate;
  export type Response = IShoppingMallFavoriteAddress;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/memberUser/favoriteAddresses/:favoriteAddressId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/favoriteAddresses/${encodeURIComponent(props.favoriteAddressId ?? "null")}`;
  export const random = (): IShoppingMallFavoriteAddress =>
    typia.random<IShoppingMallFavoriteAddress>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteAddressId")(() =>
        typia.assert(props.favoriteAddressId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific favorite address by its ID.
 *
 * This operation permanently deletes a shopping mall favorite address record.
 * It targets a specific favorite address identified by its unique ID path
 * parameter.
 *
 * The favorite address is linked to a member user and an address snapshot
 * representing the address state at favoriting time.
 *
 * Access to this API requires the user to be authenticated as a member user.
 *
 * If the record does not exist, a suitable error is returned. There is no
 * request body as deletion is solely path-parameter based.
 *
 * This operation enforces hard deletion, permanently removing the record from
 * the database.
 *
 * @param props.connection
 * @param props.favoriteAddressId The unique identifier of the favorite address
 *   to be deleted
 * @path /shoppingMall/memberUser/favoriteAddresses/:favoriteAddressId
 * @accessor api.functional.shoppingMall.memberUser.favoriteAddresses.eraseFavoriteAddress
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseFavoriteAddress(
  connection: IConnection,
  props: eraseFavoriteAddress.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseFavoriteAddress.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseFavoriteAddress.METADATA,
          path: eraseFavoriteAddress.path(props),
          status: null,
        },
      );
}
export namespace eraseFavoriteAddress {
  export type Props = {
    /** The unique identifier of the favorite address to be deleted */
    favoriteAddressId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/memberUser/favoriteAddresses/:favoriteAddressId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/favoriteAddresses/${encodeURIComponent(props.favoriteAddressId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseFavoriteAddress.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseFavoriteAddress.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteAddressId")(() =>
        typia.assert(props.favoriteAddressId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
