import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAttachments } from "../../../../structures/IShoppingMallAttachments";

/**
 * Create a new attachment metadata record.
 *
 * Create a new attachment record storing metadata for uploaded files such as
 * images and documents.
 *
 * User must be authenticated as a member to perform this operation.
 *
 * The request body must include file_name (e.g., "image.png"), unique file_url
 * (usually CDN path), media_type (MIME type like "image/jpeg"), file_size (in
 * bytes), and optionally upload_ip.
 *
 * Returns the full attachment record with its generated ID and timestamps upon
 * success.
 *
 * @param props.connection
 * @param props.body Metadata for the new attachment
 * @path /shoppingMall/memberUser/attachments
 * @accessor api.functional.shoppingMall.memberUser.attachments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Metadata for the new attachment */
    body: IShoppingMallAttachments.ICreate;
  };
  export type Body = IShoppingMallAttachments.ICreate;
  export type Response = IShoppingMallAttachments;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/memberUser/attachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/attachments";
  export const random = (): IShoppingMallAttachments =>
    typia.random<IShoppingMallAttachments>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update metadata for an attachment file.
 *
 * Update metadata for an existing attachment record specified by its UUID.
 *
 * Only metadata fields such as file name, URL, media type, file size, and
 * upload IP can be updated.
 *
 * This action requires memberUser role authentication.
 *
 * Returns the updated attachment object.
 *
 * Path parameter 'id' must be a valid UUID identifying the attachment.
 *
 * Request body provides updated property values as per schema.
 *
 * @param props.connection
 * @param props.id UUID of the attachment to update
 * @param props.body Attachment metadata update payload
 * @path /shoppingMall/memberUser/attachments/:id
 * @accessor api.functional.shoppingMall.memberUser.attachments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the attachment to update */
    id: string & tags.Format<"uuid">;

    /** Attachment metadata update payload */
    body: IShoppingMallAttachments.IUpdate;
  };
  export type Body = IShoppingMallAttachments.IUpdate;
  export type Response = IShoppingMallAttachments;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/memberUser/attachments/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/attachments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallAttachments =>
    typia.random<IShoppingMallAttachments>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete an attachment by ID.
 *
 * Delete an attachment record permanently by its UUID identifier.
 *
 * This action can only be performed by an authenticated memberUser.
 *
 * No request body is required.
 *
 * The operation returns no content on success.
 *
 * Parameter 'id' must be a valid UUID string.
 *
 * @param props.connection
 * @param props.id UUID of the attachment to delete
 * @path /shoppingMall/memberUser/attachments/:id
 * @accessor api.functional.shoppingMall.memberUser.attachments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the attachment to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/memberUser/attachments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/attachments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
