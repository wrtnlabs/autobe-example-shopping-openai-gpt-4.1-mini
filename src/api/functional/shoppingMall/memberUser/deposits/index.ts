import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallDeposit } from "../../../../structures/IShoppingMallDeposit";
import { IPageIShoppingMallDeposit } from "../../../../structures/IPageIShoppingMallDeposit";

/**
 * Create a new customer deposit record.
 *
 * Create a new deposit record for a customer account. Requires details
 * including deposit amount, usable balance, and validity periods.
 *
 * Only authenticated users with the 'memberUser' role can perform this
 * operation.
 *
 * Returns the newly created deposit record for confirmation.
 *
 * @param props.connection
 * @param props.body Deposit creation information
 * @path /shoppingMall/memberUser/deposits
 * @accessor api.functional.shoppingMall.memberUser.deposits.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Deposit creation information */
    body: IShoppingMallDeposit.ICreate;
  };
  export type Body = IShoppingMallDeposit.ICreate;
  export type Response = IShoppingMallDeposit;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/memberUser/deposits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/deposits";
  export const random = (): IShoppingMallDeposit =>
    typia.random<IShoppingMallDeposit>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated list of deposits.
 *
 * Retrieve a paginated and filtered list of customer deposits. Enables search
 * by user, deposit amount range, validity period, and status.
 *
 * Access limited to authenticated users with 'memberUser' role to protect
 * financial data.
 *
 * Results include deposit balances and timestamps for auditing and customer
 * service purposes.
 *
 * @param props.connection
 * @param props.body Deposit search criteria
 * @path /shoppingMall/memberUser/deposits
 * @accessor api.functional.shoppingMall.memberUser.deposits.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Deposit search criteria */
    body: IShoppingMallDeposit.IRequest;
  };
  export type Body = IShoppingMallDeposit.IRequest;
  export type Response = IPageIShoppingMallDeposit.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/deposits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/deposits";
  export const random = (): IPageIShoppingMallDeposit.ISummary =>
    typia.random<IPageIShoppingMallDeposit.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed deposit information by ID.
 *
 * Retrieve detailed information for a single deposit record identified by
 * depositId.
 *
 * Requires authenticated 'memberUser' role for access. Returns deposit amount,
 * usable balance, validity period, and timestamps.
 *
 * Supports customer service scenarios where detailed deposit info is required.
 *
 * @param props.connection
 * @param props.depositId Unique identifier of the target deposit record
 * @path /shoppingMall/memberUser/deposits/:depositId
 * @accessor api.functional.shoppingMall.memberUser.deposits.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target deposit record */
    depositId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallDeposit;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/memberUser/deposits/:depositId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/deposits/${encodeURIComponent(props.depositId ?? "null")}`;
  export const random = (): IShoppingMallDeposit =>
    typia.random<IShoppingMallDeposit>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositId")(() => typia.assert(props.depositId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing deposit record with new deposit information. The deposit
 * entity is linked optionally to guest or member users, and stores both the
 * total deposit amount and the usable balance. The valid period of the deposit
 * can also be adjusted.
 *
 * Security considerations require that only authorized users can update deposit
 * information, with appropriate user context to ensure permissions correspond
 * to the owning user.
 *
 * This operation relates to the shopping_mall_deposits table, which maintains
 * deposit and balance records. Validation includes checking for valid deposit
 * amounts and date ranges.
 *
 * Errors can occur if the specified depositId does not exist or if data
 * validation fails. Proper error handling and status codes must be
 * implemented.
 *
 * @param props.connection
 * @param props.depositId Target deposit's unique identifier
 * @param props.body Updated deposit information
 * @path /shoppingMall/memberUser/deposits/:depositId
 * @accessor api.functional.shoppingMall.memberUser.deposits.updateDeposit
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateDeposit(
  connection: IConnection,
  props: updateDeposit.Props,
): Promise<updateDeposit.Response> {
  return true === connection.simulate
    ? updateDeposit.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateDeposit.METADATA,
          path: updateDeposit.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateDeposit {
  export type Props = {
    /** Target deposit's unique identifier */
    depositId: string & tags.Format<"uuid">;

    /** Updated deposit information */
    body: IShoppingMallDeposit.IUpdate;
  };
  export type Body = IShoppingMallDeposit.IUpdate;
  export type Response = IShoppingMallDeposit;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/memberUser/deposits/:depositId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/deposits/${encodeURIComponent(props.depositId ?? "null")}`;
  export const random = (): IShoppingMallDeposit =>
    typia.random<IShoppingMallDeposit>();
  export const simulate = (
    connection: IConnection,
    props: updateDeposit.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateDeposit.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositId")(() => typia.assert(props.depositId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an existing deposit record permanently from the database. This is a
 * hard delete and completely removes the data.
 *
 * Only authorized users may perform this operation. The depositId path
 * parameter uniquely identifies the deposit to delete.
 *
 * No request body is required. The response contains no content.
 *
 * This operation affects the shopping_mall_deposits table directly, removing
 * the record identified by depositId.
 *
 * @param props.connection
 * @param props.depositId Target deposit's unique identifier
 * @path /shoppingMall/memberUser/deposits/:depositId
 * @accessor api.functional.shoppingMall.memberUser.deposits.eraseDeposit
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseDeposit(
  connection: IConnection,
  props: eraseDeposit.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseDeposit.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseDeposit.METADATA,
          path: eraseDeposit.path(props),
          status: null,
        },
      );
}
export namespace eraseDeposit {
  export type Props = {
    /** Target deposit's unique identifier */
    depositId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/memberUser/deposits/:depositId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/deposits/${encodeURIComponent(props.depositId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseDeposit.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseDeposit.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositId")(() => typia.assert(props.depositId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
