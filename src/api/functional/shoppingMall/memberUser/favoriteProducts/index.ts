import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallFavoriteProduct } from "../../../../structures/IShoppingMallFavoriteProduct";
import { IPageIShoppingMallFavoriteProduct } from "../../../../structures/IPageIShoppingMallFavoriteProduct";

/**
 * Add a new favorite product.
 *
 * Create a new favorite product for the authenticated member user.
 *
 * This operation stores the favorite product referencing the product snapshot
 * at the time of favoriting.
 *
 * It supports user personalization and historical data preservation.
 *
 * Only authenticated memberUsers can create favorite products.
 *
 * The response returns the created favorite product entity.
 *
 * @param props.connection
 * @param props.body Favorite product creation data
 * @path /shoppingMall/memberUser/favoriteProducts
 * @accessor api.functional.shoppingMall.memberUser.favoriteProducts.createFavoriteProduct
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createFavoriteProduct(
  connection: IConnection,
  props: createFavoriteProduct.Props,
): Promise<createFavoriteProduct.Response> {
  return true === connection.simulate
    ? createFavoriteProduct.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createFavoriteProduct.METADATA,
          path: createFavoriteProduct.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createFavoriteProduct {
  export type Props = {
    /** Favorite product creation data */
    body: IShoppingMallFavoriteProduct.ICreate;
  };
  export type Body = IShoppingMallFavoriteProduct.ICreate;
  export type Response = IShoppingMallFavoriteProduct;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/memberUser/favoriteProducts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/favoriteProducts";
  export const random = (): IShoppingMallFavoriteProduct =>
    typia.random<IShoppingMallFavoriteProduct>();
  export const simulate = (
    connection: IConnection,
    props: createFavoriteProduct.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createFavoriteProduct.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of favorite products.
 *
 * Retrieve a filtered and paginated list of favorite products for a member user
 * in the shopping mall system.
 *
 * This operation enables users to manage and view their product favorites with
 * support for search and sort functionality.
 *
 * The favorites reference product snapshots to preserve historical state.
 *
 * Security is enforced by requiring the user to be authenticated as a
 * memberUser.
 *
 * The response contains a paginated list of favorite product summaries
 * optimized for list display.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for favorite
 *   product filtering
 * @path /shoppingMall/memberUser/favoriteProducts
 * @accessor api.functional.shoppingMall.memberUser.favoriteProducts.indexFavoriteProducts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexFavoriteProducts(
  connection: IConnection,
  props: indexFavoriteProducts.Props,
): Promise<indexFavoriteProducts.Response> {
  return true === connection.simulate
    ? indexFavoriteProducts.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexFavoriteProducts.METADATA,
          path: indexFavoriteProducts.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexFavoriteProducts {
  export type Props = {
    /**
     * Search criteria and pagination parameters for favorite product
     * filtering
     */
    body: IShoppingMallFavoriteProduct.IRequest;
  };
  export type Body = IShoppingMallFavoriteProduct.IRequest;
  export type Response = IPageIShoppingMallFavoriteProduct.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/favoriteProducts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/favoriteProducts";
  export const random = (): IPageIShoppingMallFavoriteProduct.ISummary =>
    typia.random<IPageIShoppingMallFavoriteProduct.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexFavoriteProducts.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexFavoriteProducts.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed favorite product by ID.
 *
 * Retrieve detailed favorite product information by favorite product ID for
 * authenticated member users.
 *
 * This operation supports favorites management and provides full details of a
 * favorited product, including historical snapshot data.
 *
 * Access is restricted to the memberUser owning the favorite.
 *
 * The response returns the full favorite product entity reflecting all stored
 * attributes in the shopping_mall_favorite_products table.
 *
 * @param props.connection
 * @param props.favoriteProductId Unique identifier of the favorite product
 * @path /shoppingMall/memberUser/favoriteProducts/:favoriteProductId
 * @accessor api.functional.shoppingMall.memberUser.favoriteProducts.atFavoriteProduct
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atFavoriteProduct(
  connection: IConnection,
  props: atFavoriteProduct.Props,
): Promise<atFavoriteProduct.Response> {
  return true === connection.simulate
    ? atFavoriteProduct.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atFavoriteProduct.METADATA,
          path: atFavoriteProduct.path(props),
          status: null,
        },
      );
}
export namespace atFavoriteProduct {
  export type Props = {
    /** Unique identifier of the favorite product */
    favoriteProductId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallFavoriteProduct;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/memberUser/favoriteProducts/:favoriteProductId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/favoriteProducts/${encodeURIComponent(props.favoriteProductId ?? "null")}`;
  export const random = (): IShoppingMallFavoriteProduct =>
    typia.random<IShoppingMallFavoriteProduct>();
  export const simulate = (
    connection: IConnection,
    props: atFavoriteProduct.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atFavoriteProduct.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteProductId")(() =>
        typia.assert(props.favoriteProductId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing favorite product by ID.
 *
 * Update existing favorite product information by favorite product ID.
 *
 * This operation allows modification of stored attributes relevant to the
 * favorite product.
 *
 * Access control restricts updates to the owning memberUser.
 *
 * Returns the updated favorite product entity reflecting the latest changes.
 *
 * @param props.connection
 * @param props.favoriteProductId Unique identifier of the favorite product to
 *   update
 * @param props.body Data to update favorite product
 * @path /shoppingMall/memberUser/favoriteProducts/:favoriteProductId
 * @accessor api.functional.shoppingMall.memberUser.favoriteProducts.updateFavoriteProduct
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateFavoriteProduct(
  connection: IConnection,
  props: updateFavoriteProduct.Props,
): Promise<updateFavoriteProduct.Response> {
  return true === connection.simulate
    ? updateFavoriteProduct.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateFavoriteProduct.METADATA,
          path: updateFavoriteProduct.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateFavoriteProduct {
  export type Props = {
    /** Unique identifier of the favorite product to update */
    favoriteProductId: string & tags.Format<"uuid">;

    /** Data to update favorite product */
    body: IShoppingMallFavoriteProduct.IUpdate;
  };
  export type Body = IShoppingMallFavoriteProduct.IUpdate;
  export type Response = IShoppingMallFavoriteProduct;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/memberUser/favoriteProducts/:favoriteProductId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/favoriteProducts/${encodeURIComponent(props.favoriteProductId ?? "null")}`;
  export const random = (): IShoppingMallFavoriteProduct =>
    typia.random<IShoppingMallFavoriteProduct>();
  export const simulate = (
    connection: IConnection,
    props: updateFavoriteProduct.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateFavoriteProduct.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteProductId")(() =>
        typia.assert(props.favoriteProductId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a favorite product by ID.
 *
 * This preserves the record with a deletion timestamp to maintain audit
 * integrity.
 *
 * Only the authenticated memberUser owning the favorite can perform the
 * deletion.
 *
 * No response body is returned on successful deletion.
 *
 * @param props.connection
 * @param props.favoriteProductId Unique identifier of the favorite product to
 *   delete
 * @path /shoppingMall/memberUser/favoriteProducts/:favoriteProductId
 * @accessor api.functional.shoppingMall.memberUser.favoriteProducts.eraseFavoriteProduct
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseFavoriteProduct(
  connection: IConnection,
  props: eraseFavoriteProduct.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseFavoriteProduct.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseFavoriteProduct.METADATA,
          path: eraseFavoriteProduct.path(props),
          status: null,
        },
      );
}
export namespace eraseFavoriteProduct {
  export type Props = {
    /** Unique identifier of the favorite product to delete */
    favoriteProductId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/memberUser/favoriteProducts/:favoriteProductId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/favoriteProducts/${encodeURIComponent(props.favoriteProductId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseFavoriteProduct.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseFavoriteProduct.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteProductId")(() =>
        typia.assert(props.favoriteProductId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
