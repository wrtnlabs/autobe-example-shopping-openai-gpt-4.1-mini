import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiRecommendation } from "../../../../structures/IShoppingMallAiRecommendation";
import { IPageIShoppingMallAiRecommendation } from "../../../../structures/IPageIShoppingMallAiRecommendation";

/**
 * Search AI-powered personalized product recommendations.
 *
 * Search and retrieve AI-generated personalized product recommendations with
 * pagination and filtering.
 *
 * Users can specify filter criteria to find relevant recommendations generated
 * by different AI algorithms.
 *
 * Returned data include recommendations status, type, payload, and timestamps.
 *
 * Access requires authentication.
 *
 * Errors occur if query parameters are invalid or unauthorized requests are
 * made.
 *
 * @param props.connection
 * @param props.body Filter and pagination parameters for AI recommendations
 * @path /shoppingMall/memberUser/aiRecommendations
 * @accessor api.functional.shoppingMall.memberUser.aiRecommendations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter and pagination parameters for AI recommendations */
    body: IShoppingMallAiRecommendation.IRequest;
  };
  export type Body = IShoppingMallAiRecommendation.IRequest;
  export type Response = IPageIShoppingMallAiRecommendation;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/aiRecommendations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/aiRecommendations";
  export const random = (): IPageIShoppingMallAiRecommendation =>
    typia.random<IPageIShoppingMallAiRecommendation>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve AI recommendation by ID.
 *
 * Retrieve AI-powered personalized recommendation details by unique ID.
 *
 * Access is restricted to owner authenticated users.
 *
 * Returns complete recommendation information including payload and timestamps.
 *
 * Errors if the recommendation does not exist or the user lacks permission.
 *
 * @param props.connection
 * @param props.aiRecommendationId Unique identifier of the AI recommendation
 *   record
 * @path /shoppingMall/memberUser/aiRecommendations/:aiRecommendationId
 * @accessor api.functional.shoppingMall.memberUser.aiRecommendations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the AI recommendation record */
    aiRecommendationId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiRecommendation;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/memberUser/aiRecommendations/:aiRecommendationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/aiRecommendations/${encodeURIComponent(props.aiRecommendationId ?? "null")}`;
  export const random = (): IShoppingMallAiRecommendation =>
    typia.random<IShoppingMallAiRecommendation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("aiRecommendationId")(() =>
        typia.assert(props.aiRecommendationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
