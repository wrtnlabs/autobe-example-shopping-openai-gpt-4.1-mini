import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSnapshot } from "../../../../structures/IShoppingMallSnapshot";
import { IPageIShoppingMallSnapshot } from "../../../../structures/IPageIShoppingMallSnapshot";

/**
 * Search and retrieve a filtered, paginated list of snapshots.
 *
 * Retrieve a filtered and paginated list of snapshots recording immutable
 * states of various shopping mall entities. These snapshots preserve entity
 * status for audit trails and rollback.
 *
 * The search supports filters on entity type, entity ID, and snapshot creation
 * times, alongside pagination and sorting options.
 *
 * This operation is read-only and available to authenticated member users due
 * to the sensitive historical data.
 *
 * No creation, update, or deletion APIs are offered for snapshots since these
 * are automatically generated by system processes.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for snapshots
 *   filtering
 * @path /shoppingMall/memberUser/snapshots
 * @accessor api.functional.shoppingMall.memberUser.snapshots.indexSnapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexSnapshots(
  connection: IConnection,
  props: indexSnapshots.Props,
): Promise<indexSnapshots.Response> {
  return true === connection.simulate
    ? indexSnapshots.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexSnapshots.METADATA,
          path: indexSnapshots.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexSnapshots {
  export type Props = {
    /** Search criteria and pagination parameters for snapshots filtering */
    body: IShoppingMallSnapshot.IRequest;
  };
  export type Body = IShoppingMallSnapshot.IRequest;
  export type Response = IPageIShoppingMallSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/snapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/snapshots";
  export const random = (): IPageIShoppingMallSnapshot =>
    typia.random<IPageIShoppingMallSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: indexSnapshots.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexSnapshots.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a snapshot by its ID.
 *
 * Retrieve a single snapshot record by its unique identifier. Snapshots record
 * immutable entity states preserving audit and compliance evidence.
 *
 * The response includes all snapshot data including entity type, entity ID,
 * JSON snapshot content, and timestamps.
 *
 * Access is restricted to authenticated member users with appropriate
 * permissions.
 *
 * Errors are handled gracefully if the snapshot with specified ID does not
 * exist.
 *
 * @param props.connection
 * @param props.id Unique identifier of the snapshot record
 * @path /shoppingMall/memberUser/snapshots/:id
 * @accessor api.functional.shoppingMall.memberUser.snapshots.atSnapshot
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atSnapshot(
  connection: IConnection,
  props: atSnapshot.Props,
): Promise<atSnapshot.Response> {
  return true === connection.simulate
    ? atSnapshot.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atSnapshot.METADATA,
          path: atSnapshot.path(props),
          status: null,
        },
      );
}
export namespace atSnapshot {
  export type Props = {
    /** Unique identifier of the snapshot record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/memberUser/snapshots/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/snapshots/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallSnapshot =>
    typia.random<IShoppingMallSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: atSnapshot.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atSnapshot.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
