import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallInventoryAudit } from "../../../../structures/IShoppingMallInventoryAudit";
import { IPageIShoppingMallInventoryAudit } from "../../../../structures/IPageIShoppingMallInventoryAudit";

/**
 * Search and retrieve inventory audit records.
 *
 * Retrieve paginated inventory audit records capturing stock adjustments and
 * actor details. These logs enable audit and compliance with stock management.
 *
 * Filters support inventory item, change type, actor user IDs, and date ranges.
 *
 * Only authenticated member users can access this information.
 *
 * Modification or creation via API is disallowed as these logs are
 * system-generated.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for inventory
 *   audit filtering
 * @path /shoppingMall/memberUser/inventoryAudits
 * @accessor api.functional.shoppingMall.memberUser.inventoryAudits.indexInventoryAudits
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexInventoryAudits(
  connection: IConnection,
  props: indexInventoryAudits.Props,
): Promise<indexInventoryAudits.Response> {
  return true === connection.simulate
    ? indexInventoryAudits.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexInventoryAudits.METADATA,
          path: indexInventoryAudits.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexInventoryAudits {
  export type Props = {
    /**
     * Search criteria and pagination parameters for inventory audit
     * filtering
     */
    body: IShoppingMallInventoryAudit.IRequest;
  };
  export type Body = IShoppingMallInventoryAudit.IRequest;
  export type Response = IPageIShoppingMallInventoryAudit;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/inventoryAudits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/inventoryAudits";
  export const random = (): IPageIShoppingMallInventoryAudit =>
    typia.random<IPageIShoppingMallInventoryAudit>();
  export const simulate = (
    connection: IConnection,
    props: indexInventoryAudits.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexInventoryAudits.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve an inventory audit record by ID.
 *
 * Retrieve a single inventory audit record by its unique identifier. Includes
 * stock change information, actor user, and audit timestamps.
 *
 * Access restricted to authenticated member users only.
 *
 * Errors are returned if the ID is invalid or not found.
 *
 * @param props.connection
 * @param props.id Unique identifier of the inventory audit record
 * @path /shoppingMall/memberUser/inventoryAudits/:id
 * @accessor api.functional.shoppingMall.memberUser.inventoryAudits.atInventoryAudit
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atInventoryAudit(
  connection: IConnection,
  props: atInventoryAudit.Props,
): Promise<atInventoryAudit.Response> {
  return true === connection.simulate
    ? atInventoryAudit.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atInventoryAudit.METADATA,
          path: atInventoryAudit.path(props),
          status: null,
        },
      );
}
export namespace atInventoryAudit {
  export type Props = {
    /** Unique identifier of the inventory audit record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallInventoryAudit;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/memberUser/inventoryAudits/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/inventoryAudits/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallInventoryAudit =>
    typia.random<IShoppingMallInventoryAudit>();
  export const simulate = (
    connection: IConnection,
    props: atInventoryAudit.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atInventoryAudit.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
