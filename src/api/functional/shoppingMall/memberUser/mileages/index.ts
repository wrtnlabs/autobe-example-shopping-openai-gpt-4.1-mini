import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallMileage } from "../../../../structures/IShoppingMallMileage";
import { IPageIShoppingMallMileage } from "../../../../structures/IPageIShoppingMallMileage";

/**
 * Search and retrieve paginated mileage records.
 *
 * Retrieve a filtered and paginated list of mileage records.
 *
 * Supports search criteria and pagination to display user mileage points
 * history.
 *
 * Only authorized users can perform this operation.
 *
 * The operation returns a page container with mileage entity data matching the
 * filter criteria.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for mileage
 *   records
 * @path /shoppingMall/memberUser/mileages
 * @accessor api.functional.shoppingMall.memberUser.mileages.searchMileages
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchMileages(
  connection: IConnection,
  props: searchMileages.Props,
): Promise<searchMileages.Response> {
  return true === connection.simulate
    ? searchMileages.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchMileages.METADATA,
          path: searchMileages.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchMileages {
  export type Props = {
    /** Search criteria and pagination parameters for mileage records */
    body: IShoppingMallMileage.IRequest;
  };
  export type Body = IShoppingMallMileage.IRequest;
  export type Response = IPageIShoppingMallMileage;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/mileages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/mileages";
  export const random = (): IPageIShoppingMallMileage =>
    typia.random<IPageIShoppingMallMileage>();
  export const simulate = (
    connection: IConnection,
    props: searchMileages.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchMileages.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
