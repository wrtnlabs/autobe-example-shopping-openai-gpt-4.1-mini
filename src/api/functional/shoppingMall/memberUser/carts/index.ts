import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCarts } from "../../../../structures/IShoppingMallCarts";
import { IPageIShoppingMallCarts } from "../../../../structures/IPageIShoppingMallCarts";
export * as cartItems from "./cartItems/index";

/**
 * Create a new shopping cart.
 *
 * This API operation allows authenticated users to create a new shopping cart.
 * The creation can be linked either to a guest user or a member user based on
 * provided identifiers.
 *
 * The request payload specifies the user linkage and initial cart properties,
 * following the schema for cart creation.
 *
 * Upon successful creation, the system returns the full cart record including
 * generated IDs and timestamps.
 *
 * Security enforcement restricts this operation to authenticated users only.
 *
 * Validation ensures no duplicate carts conflict with user ownership
 * constraints.
 *
 * @param props.connection
 * @param props.body Creation info for the new shopping cart
 * @path /shoppingMall/memberUser/carts
 * @accessor api.functional.shoppingMall.memberUser.carts.createCart
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createCart(
  connection: IConnection,
  props: createCart.Props,
): Promise<createCart.Response> {
  return true === connection.simulate
    ? createCart.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createCart.METADATA,
          path: createCart.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createCart {
  export type Props = {
    /** Creation info for the new shopping cart */
    body: IShoppingMallCarts.ICreate;
  };
  export type Body = IShoppingMallCarts.ICreate;
  export type Response = IShoppingMallCarts;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/memberUser/carts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/carts";
  export const random = (): IShoppingMallCarts =>
    typia.random<IShoppingMallCarts>();
  export const simulate = (
    connection: IConnection,
    props: createCart.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createCart.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of shopping carts.
 *
 * This operation provides customers or authorized users with the ability to
 * search and retrieve their shopping carts. The search supports filtering by
 * status, owner type (guest or member), creation date, and other relevant
 * fields.
 *
 * The request body includes criteria for pagination, sorting, and filters
 * enhancing efficient retrieval of large cart datasets.
 *
 * Security requires that only authenticated users with 'memberUser' role access
 * can use this API to protect privacy.
 *
 * The response returns a paginated list of cart summary information aligned
 * with the 'shopping_mall_carts' schema.
 *
 * Proper validation is enforced to avoid overload and erroneous filters.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for cart
 *   filtering
 * @path /shoppingMall/memberUser/carts
 * @accessor api.functional.shoppingMall.memberUser.carts.searchCarts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchCarts(
  connection: IConnection,
  props: searchCarts.Props,
): Promise<searchCarts.Response> {
  return true === connection.simulate
    ? searchCarts.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchCarts.METADATA,
          path: searchCarts.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchCarts {
  export type Props = {
    /** Search criteria and pagination parameters for cart filtering */
    body: IShoppingMallCarts.IRequest;
  };
  export type Body = IShoppingMallCarts.IRequest;
  export type Response = IPageIShoppingMallCarts.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/carts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/carts";
  export const random = (): IPageIShoppingMallCarts.ISummary =>
    typia.random<IPageIShoppingMallCarts.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchCarts.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchCarts.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information about a specific shopping cart.
 *
 * This API operation enables users with appropriate permissions to retrieve
 * full details of a specific shopping cart by its unique identifier. The system
 * validates the cart ID and returns the corresponding cart record if found.
 *
 * Access restrictions ensure users view only carts they own or have rights to
 * access.
 *
 * The response provides all fields of the cart including ownership (guest or
 * member), current status, creation, update, and deletion timestamps if
 * applicable.
 *
 * Errors are returned if the cart does not exist or access is denied.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the shopping cart
 * @path /shoppingMall/memberUser/carts/:cartId
 * @accessor api.functional.shoppingMall.memberUser.carts.getCart
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getCart(
  connection: IConnection,
  props: getCart.Props,
): Promise<getCart.Response> {
  return true === connection.simulate
    ? getCart.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getCart.METADATA,
          path: getCart.path(props),
          status: null,
        },
      );
}
export namespace getCart {
  export type Props = {
    /** Unique identifier of the shopping cart */
    cartId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCarts;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/memberUser/carts/:cartId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/carts/${encodeURIComponent(props.cartId ?? "null")}`;
  export const random = (): IShoppingMallCarts =>
    typia.random<IShoppingMallCarts>();
  export const simulate = (
    connection: IConnection,
    props: getCart.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getCart.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing shopping cart.
 *
 * This API operation allows authorized users to update an existing shopping
 * cart by providing partial or full changes to cart properties. The 'cartId' in
 * the path identifies the cart to update.
 *
 * Common updates include changing the cart status, associating different user
 * ids, or modifying metadata.
 *
 * The operation enforces business rules to prevent unauthorized changes and
 * validate data consistency.
 *
 * Successful updates return the full updated cart record.
 *
 * Errors include not found, validation failures, and access denials.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the shopping cart
 * @param props.body Update data for the shopping cart
 * @path /shoppingMall/memberUser/carts/:cartId
 * @accessor api.functional.shoppingMall.memberUser.carts.updateCart
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateCart(
  connection: IConnection,
  props: updateCart.Props,
): Promise<updateCart.Response> {
  return true === connection.simulate
    ? updateCart.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateCart.METADATA,
          path: updateCart.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateCart {
  export type Props = {
    /** Unique identifier of the shopping cart */
    cartId: string & tags.Format<"uuid">;

    /** Update data for the shopping cart */
    body: IShoppingMallCarts.IUpdate;
  };
  export type Body = IShoppingMallCarts.IUpdate;
  export type Response = IShoppingMallCarts;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/memberUser/carts/:cartId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/carts/${encodeURIComponent(props.cartId ?? "null")}`;
  export const random = (): IShoppingMallCarts =>
    typia.random<IShoppingMallCarts>();
  export const simulate = (
    connection: IConnection,
    props: updateCart.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateCart.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a shopping cart permanently.
 *
 * This API operation allows authorized users to permanently remove a shopping
 * cart by specifying its unique identifier in the path.
 *
 * The deletion is irreversible and removes all traces of the cart including its
 * items.
 *
 * Only authorized users with ownership or administrative permissions may
 * perform this action.
 *
 * Errors include access denial and not found cart IDs.
 *
 * This operation does not return a response body.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the shopping cart
 * @path /shoppingMall/memberUser/carts/:cartId
 * @accessor api.functional.shoppingMall.memberUser.carts.eraseCart
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseCart(
  connection: IConnection,
  props: eraseCart.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseCart.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseCart.METADATA,
          path: eraseCart.path(props),
          status: null,
        },
      );
}
export namespace eraseCart {
  export type Props = {
    /** Unique identifier of the shopping cart */
    cartId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/memberUser/carts/:cartId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/carts/${encodeURIComponent(props.cartId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseCart.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseCart.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
