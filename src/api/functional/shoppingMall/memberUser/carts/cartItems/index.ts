import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCartItem } from "../../../../../structures/IShoppingMallCartItem";
import { IPageIShoppingMallCartItem } from "../../../../../structures/IPageIShoppingMallCartItem";

/**
 * Add a new item to the cart.
 *
 * Create a new item in the specified shopping cart. The request body must
 * include product snapshot reference, quantity, unit price, and initial
 * status.
 *
 * This allows authenticated users to add products to their carts.
 *
 * Server validates product snapshot existence and inventory.
 *
 * Errors include 400 Bad Request for invalid input and 404 if the cart does not
 * exist.
 *
 * This operation manages shopping_mall_cart_items table records and requires
 * authorization roles memberUser and adminUser.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the target cart
 * @param props.body Cart item creation information
 * @path /shoppingMall/memberUser/carts/:cartId/cartItems
 * @accessor api.functional.shoppingMall.memberUser.carts.cartItems.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target cart */
    cartId: string & tags.Format<"uuid">;

    /** Cart item creation information */
    body: IShoppingMallCartItem.ICreate;
  };
  export type Body = IShoppingMallCartItem.ICreate;
  export type Response = IShoppingMallCartItem;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/memberUser/carts/:cartId/cartItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/carts/${encodeURIComponent(props.cartId ?? "null")}/cartItems`;
  export const random = (): IShoppingMallCartItem =>
    typia.random<IShoppingMallCartItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List cart items of a specific cart with filtering and pagination.
 *
 * Retrieve a filtered and paginated list of cart items belonging to the
 * specified cart identified by cartId. The cart items link to product snapshots
 * preserving the product state at addition time.
 *
 * The operation is intended for authenticated users and administrators managing
 * their shopping carts. It validates the existence of the cart and accesses the
 * associated cart items.
 *
 * Filtering may include status or product details via the product snapshot.
 * Pagination and sorting parameters help manage large carts.
 *
 * Errors include 404 if the cart does not exist.
 *
 * This operation manipulates the shopping_mall_cart_items entity and requires
 * authorization roles memberUser and adminUser.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the target cart
 * @param props.body Search criteria and pagination parameters for cart item
 *   filtering
 * @path /shoppingMall/memberUser/carts/:cartId/cartItems
 * @accessor api.functional.shoppingMall.memberUser.carts.cartItems.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target cart */
    cartId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for cart item filtering */
    body: IShoppingMallCartItem.IRequest;
  };
  export type Body = IShoppingMallCartItem.IRequest;
  export type Response = IPageIShoppingMallCartItem;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/carts/:cartId/cartItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/carts/${encodeURIComponent(props.cartId ?? "null")}/cartItems`;
  export const random = (): IPageIShoppingMallCartItem =>
    typia.random<IPageIShoppingMallCartItem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific cart item by ID within a cart.
 *
 * Retrieve detailed information about a specific cart item identified by
 * cartItemId in the specified cart identified by cartId. The item details
 * include quantity, unit price, product snapshot reference, and status.
 *
 * This operation supports individual cart item view for authenticated users
 * managing their carts and administrators.
 *
 * Proper authorization is required to ensure users can access only their own
 * cart items.
 *
 * Errors include 404 Not Found if the cart or cart item does not exist or does
 * not belong to the given cart.
 *
 * This endpoint works with the shopping_mall_cart_items entity and its
 * relations.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the target cart
 * @param props.cartItemId Unique identifier of the cart item
 * @path /shoppingMall/memberUser/carts/:cartId/cartItems/:cartItemId
 * @accessor api.functional.shoppingMall.memberUser.carts.cartItems.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target cart */
    cartId: string & tags.Format<"uuid">;

    /** Unique identifier of the cart item */
    cartItemId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCartItem;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/memberUser/carts/:cartId/cartItems/:cartItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/carts/${encodeURIComponent(props.cartId ?? "null")}/cartItems/${encodeURIComponent(props.cartItemId ?? "null")}`;
  export const random = (): IShoppingMallCartItem =>
    typia.random<IShoppingMallCartItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("cartItemId")(() => typia.assert(props.cartItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update cart item by ID within a cart.
 *
 * Update an existing cart item within the specified cart. Request body includes
 * updatable fields such as quantity, unit price, and status. Product snapshot
 * reference cannot be updated here to preserve product state.
 *
 * Authentication and authorization are required to ensure the user owns the
 * cart and item.
 *
 * Errors include 404 if cart or item not found, 400 for validation errors.
 *
 * This endpoint updates shopping_mall_cart_items entity records.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the target cart
 * @param props.cartItemId Unique identifier of the cart item
 * @param props.body Cart item update information
 * @path /shoppingMall/memberUser/carts/:cartId/cartItems/:cartItemId
 * @accessor api.functional.shoppingMall.memberUser.carts.cartItems.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target cart */
    cartId: string & tags.Format<"uuid">;

    /** Unique identifier of the cart item */
    cartItemId: string & tags.Format<"uuid">;

    /** Cart item update information */
    body: IShoppingMallCartItem.IUpdate;
  };
  export type Body = IShoppingMallCartItem.IUpdate;
  export type Response = IShoppingMallCartItem;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/memberUser/carts/:cartId/cartItems/:cartItemId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/carts/${encodeURIComponent(props.cartId ?? "null")}/cartItems/${encodeURIComponent(props.cartItemId ?? "null")}`;
  export const random = (): IShoppingMallCartItem =>
    typia.random<IShoppingMallCartItem>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("cartItemId")(() => typia.assert(props.cartItemId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a cart item by ID within a cart.
 *
 * Remove a specific cart item identified by cartItemId from the specified cart.
 * Performs a hard delete removing the record permanently.
 *
 * Accessible to authenticated users managing their carts or administrators.
 *
 * Errors include 404 if cart or cart item not found.
 *
 * Operates on shopping_mall_cart_items table.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the target cart
 * @param props.cartItemId Unique identifier of the cart item
 * @path /shoppingMall/memberUser/carts/:cartId/cartItems/:cartItemId
 * @accessor api.functional.shoppingMall.memberUser.carts.cartItems.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target cart */
    cartId: string & tags.Format<"uuid">;

    /** Unique identifier of the cart item */
    cartItemId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/memberUser/carts/:cartId/cartItems/:cartItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/carts/${encodeURIComponent(props.cartId ?? "null")}/cartItems/${encodeURIComponent(props.cartItemId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("cartItemId")(() => typia.assert(props.cartItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
