import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderAuditLog } from "../../../../structures/IShoppingMallOrderAuditLog";
import { IPageIShoppingMallOrderAuditLog } from "../../../../structures/IPageIShoppingMallOrderAuditLog";

/**
 * Search and retrieve order audit log records.
 *
 * Retrieve paged order audit logs detailing actions taken on orders. This
 * provides traceability of user or system events impacting orders.
 *
 * Search and filtering by order ID, user, action type, and time ranges are
 * supported.
 *
 * Authenticated member users have access. Creation or modification of audit
 * logs via APIs is not allowed as they are system-generated.
 *
 * Error responses occur if filters are invalid or no records match.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for order audit
 *   log filtering
 * @path /shoppingMall/memberUser/orderAuditLogs
 * @accessor api.functional.shoppingMall.memberUser.orderAuditLogs.indexOrderAuditLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexOrderAuditLogs(
  connection: IConnection,
  props: indexOrderAuditLogs.Props,
): Promise<indexOrderAuditLogs.Response> {
  return true === connection.simulate
    ? indexOrderAuditLogs.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexOrderAuditLogs.METADATA,
          path: indexOrderAuditLogs.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexOrderAuditLogs {
  export type Props = {
    /**
     * Search criteria and pagination parameters for order audit log
     * filtering
     */
    body: IShoppingMallOrderAuditLog.IRequest;
  };
  export type Body = IShoppingMallOrderAuditLog.IRequest;
  export type Response = IPageIShoppingMallOrderAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/orderAuditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/orderAuditLogs";
  export const random = (): IPageIShoppingMallOrderAuditLog =>
    typia.random<IPageIShoppingMallOrderAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: indexOrderAuditLogs.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexOrderAuditLogs.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve an order audit log by ID.
 *
 * Get detailed information of an order audit log entry by its identifier. The
 * log includes order reference, actor user ID, action description, JSON
 * details, and timestamps for traceability purposes.
 *
 * Only authenticated member users can access this data.
 *
 * Returns 404 if the log ID is invalid or not found.
 *
 * @param props.connection
 * @param props.id Unique identifier of the order audit log entry
 * @path /shoppingMall/memberUser/orderAuditLogs/:id
 * @accessor api.functional.shoppingMall.memberUser.orderAuditLogs.atOrderAuditLog
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atOrderAuditLog(
  connection: IConnection,
  props: atOrderAuditLog.Props,
): Promise<atOrderAuditLog.Response> {
  return true === connection.simulate
    ? atOrderAuditLog.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atOrderAuditLog.METADATA,
          path: atOrderAuditLog.path(props),
          status: null,
        },
      );
}
export namespace atOrderAuditLog {
  export type Props = {
    /** Unique identifier of the order audit log entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/memberUser/orderAuditLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/orderAuditLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallOrderAuditLog =>
    typia.random<IShoppingMallOrderAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: atOrderAuditLog.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atOrderAuditLog.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
