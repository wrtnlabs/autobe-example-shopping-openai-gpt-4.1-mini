import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallComment } from "../../../../../structures/IShoppingMallComment";

/**
 * Create a comment under a specific inquiry.
 *
 * Create a new comment under a specific inquiry identified by inquiryId. The
 * comment record includes content, privacy flag, and status fields stored in
 * shopping_mall_comments. User authorization and linkage to member, guest, or
 * seller is enforced.
 *
 * This supports dynamic customer-seller interaction threads enhancing product
 * inquiry management.
 *
 * Errors returned if inquiry does not exist or unauthorized access is
 * attempted.
 *
 * @param props.connection
 * @param props.inquiryId Target inquiry's ID
 * @param props.body Content and metadata for new comment
 * @path /shoppingMall/memberUser/inquiries/:inquiryId/comments
 * @accessor api.functional.shoppingMall.memberUser.inquiries.comments.createComment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createComment(
  connection: IConnection,
  props: createComment.Props,
): Promise<createComment.Response> {
  return true === connection.simulate
    ? createComment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createComment.METADATA,
          path: createComment.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createComment {
  export type Props = {
    /** Target inquiry's ID */
    inquiryId: string & tags.Format<"uuid">;

    /** Content and metadata for new comment */
    body: IShoppingMallComment.ICreate;
  };
  export type Body = IShoppingMallComment.ICreate;
  export type Response = IShoppingMallComment;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/memberUser/inquiries/:inquiryId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/comments`;
  export const random = (): IShoppingMallComment =>
    typia.random<IShoppingMallComment>();
  export const simulate = (
    connection: IConnection,
    props: createComment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createComment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a comment under a specific inquiry by commentId. Allows editing of
 * comment content, privacy, and status.
 *
 * Ensures linkage integrity and user authorization.
 *
 * Timestamps updated accordingly for auditing.
 *
 * @param props.connection
 * @param props.inquiryId Target inquiry's ID
 * @param props.commentId Target comment's ID
 * @param props.body Updated content and metadata for the comment
 * @path /shoppingMall/memberUser/inquiries/:inquiryId/comments/:commentId
 * @accessor api.functional.shoppingMall.memberUser.inquiries.comments.updateComment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateComment(
  connection: IConnection,
  props: updateComment.Props,
): Promise<updateComment.Response> {
  return true === connection.simulate
    ? updateComment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateComment.METADATA,
          path: updateComment.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateComment {
  export type Props = {
    /** Target inquiry's ID */
    inquiryId: string & tags.Format<"uuid">;

    /** Target comment's ID */
    commentId: string & tags.Format<"uuid">;

    /** Updated content and metadata for the comment */
    body: IShoppingMallComment.IUpdate;
  };
  export type Body = IShoppingMallComment.IUpdate;
  export type Response = IShoppingMallComment;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/memberUser/inquiries/:inquiryId/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IShoppingMallComment =>
    typia.random<IShoppingMallComment>();
  export const simulate = (
    connection: IConnection,
    props: updateComment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateComment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a comment under a specific inquiry by commentId. This is a hard delete
 * operation permanently removing the comment record.
 *
 * Authorization is strictly enforced.
 *
 * Deleted comments cannot be recovered.
 *
 * @param props.connection
 * @param props.inquiryId Target inquiry's ID
 * @param props.commentId Target comment's ID
 * @path /shoppingMall/memberUser/inquiries/:inquiryId/comments/:commentId
 * @accessor api.functional.shoppingMall.memberUser.inquiries.comments.eraseComment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseComment(
  connection: IConnection,
  props: eraseComment.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseComment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseComment.METADATA,
          path: eraseComment.path(props),
          status: null,
        },
      );
}
export namespace eraseComment {
  export type Props = {
    /** Target inquiry's ID */
    inquiryId: string & tags.Format<"uuid">;

    /** Target comment's ID */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/memberUser/inquiries/:inquiryId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseComment.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseComment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
