import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallInquiry } from "../../../../structures/IShoppingMallInquiry";
export * as comments from "./comments/index";

/**
 * Create new product inquiry.
 *
 * Create a new product inquiry record in the system. The inquiry records a
 * customer question or comment regarding a product. It includes properties such
 * as title, body, privacy settings, status, and associations with channels,
 * sections, categories, and users.
 *
 * The operation validates incoming data for correctness and authorization.
 *
 * Returns the newly created inquiry with full details including assigned ID and
 * timestamps.
 *
 * Access control applies to member users and appropriate roles.
 *
 * @param props.connection
 * @param props.body Information needed to create a new inquiry
 * @path /shoppingMall/memberUser/inquiries
 * @accessor api.functional.shoppingMall.memberUser.inquiries.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information needed to create a new inquiry */
    body: IShoppingMallInquiry.ICreate;
  };
  export type Body = IShoppingMallInquiry.ICreate;
  export type Response = IShoppingMallInquiry;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/memberUser/inquiries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/inquiries";
  export const random = (): IShoppingMallInquiry =>
    typia.random<IShoppingMallInquiry>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update product inquiry by ID.
 *
 * Update a product inquiry record by ID. This allows modifying inquiry content,
 * privacy, and status information.
 *
 * Only authorized users including the inquiry owner or administrators can
 * perform this operation.
 *
 * Returns the updated inquiry details to confirm changes.
 *
 * No request body is null; all changes must be provided explicitly.
 *
 * @param props.connection
 * @param props.id Unique identifier of the inquiry to update
 * @param props.body Updated inquiry information
 * @path /shoppingMall/memberUser/inquiries/:id
 * @accessor api.functional.shoppingMall.memberUser.inquiries.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the inquiry to update */
    id: string & tags.Format<"uuid">;

    /** Updated inquiry information */
    body: IShoppingMallInquiry.IUpdate;
  };
  export type Body = IShoppingMallInquiry.IUpdate;
  export type Response = IShoppingMallInquiry;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/memberUser/inquiries/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/inquiries/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallInquiry =>
    typia.random<IShoppingMallInquiry>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete product inquiry by ID.
 *
 * Delete a product inquiry by ID, permanently removing it from the system.
 *
 * The inquiry is a customer question or comment linked to a product. Deletion
 * is only allowed to authorized personnel.
 *
 * This operation performs a hard deletion, removing the entry completely from
 * the shopping_mall_inquiries table.
 *
 * No request body is needed.
 *
 * Ensure proper authorization before executing.
 *
 * No response body is returned.
 *
 * @param props.connection
 * @param props.id Unique identifier of the inquiry to delete
 * @path /shoppingMall/memberUser/inquiries/:id
 * @accessor api.functional.shoppingMall.memberUser.inquiries.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the inquiry to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/memberUser/inquiries/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/inquiries/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
