import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallComment } from "../../../../../structures/IShoppingMallComment";
import { IPageIShoppingMallComment } from "../../../../../structures/IPageIShoppingMallComment";

/**
 * Add a new comment to a product review.
 *
 * Create a new comment for a specific product review given by reviewId.
 *
 * The request body includes comment content, author identification, privacy
 * flag, and status.
 *
 * Only authorized users (memberUser, sellerUser, adminUser) may create
 * comments.
 *
 * Returns information about the created comment.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier of the target product review
 * @param props.body Review comment creation data
 * @path /shoppingMall/memberUser/reviews/:reviewId/comments
 * @accessor api.functional.shoppingMall.memberUser.reviews.comments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target product review */
    reviewId: string & tags.Format<"uuid">;

    /** Review comment creation data */
    body: IShoppingMallComment.ICreate;
  };
  export type Body = IShoppingMallComment.ICreate;
  export type Response = IShoppingMallComment;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/memberUser/reviews/:reviewId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/reviews/${encodeURIComponent(props.reviewId ?? "null")}/comments`;
  export const random = (): IShoppingMallComment =>
    typia.random<IShoppingMallComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve paginated comments list for a product review.
 *
 * Retrieve a filtered and paginated list of comments for a given product review
 * specified by reviewId.
 *
 * This operation returns detailed information including comment content,
 * privacy settings, author type (member, guest, seller), timestamps, and
 * status. It supports an interface for users and administrators to browse
 * comments effectively.
 *
 * Security and privacy rules apply to ensure only authorized users may see or
 * interact with private comments. The functionality supports enhanced product
 * review interactions within the shopping mall platform.
 *
 * This operation uses the shopping_mall_comments entity and related relations
 * as specified in the Prisma DB schema.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier of the target product review
 * @param props.body Search and pagination criteria for filtering review
 *   comments
 * @path /shoppingMall/memberUser/reviews/:reviewId/comments
 * @accessor api.functional.shoppingMall.memberUser.reviews.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target product review */
    reviewId: string & tags.Format<"uuid">;

    /** Search and pagination criteria for filtering review comments */
    body: IShoppingMallComment.IRequest;
  };
  export type Body = IShoppingMallComment.IRequest;
  export type Response = IPageIShoppingMallComment;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/reviews/:reviewId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/reviews/${encodeURIComponent(props.reviewId ?? "null")}/comments`;
  export const random = (): IPageIShoppingMallComment =>
    typia.random<IPageIShoppingMallComment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a specific review comment.
 *
 * Retrieve detailed information of a comment for a given product review by
 * commentId and reviewId.
 *
 * Returns all comment fields including content, privacy flag, author member or
 * guest or seller, status, and timestamps.
 *
 * Access control restrictions apply to protect private comments according to
 * user roles.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier of the target product review
 * @param props.commentId Unique identifier of the comment
 * @path /shoppingMall/memberUser/reviews/:reviewId/comments/:commentId
 * @accessor api.functional.shoppingMall.memberUser.reviews.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target product review */
    reviewId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallComment;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/memberUser/reviews/:reviewId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/reviews/${encodeURIComponent(props.reviewId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IShoppingMallComment =>
    typia.random<IShoppingMallComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Modify a product review comment.
 *
 * Update a comment on a product review identified by reviewId and commentId.
 *
 * The updated content, privacy setting, and status are in the request body.
 *
 * Access control restricts updates to authorized users.
 *
 * Returns the updated comment details.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier of the target product review
 * @param props.commentId Unique identifier of the comment
 * @param props.body Review comment update information
 * @path /shoppingMall/memberUser/reviews/:reviewId/comments/:commentId
 * @accessor api.functional.shoppingMall.memberUser.reviews.comments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target product review */
    reviewId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment */
    commentId: string & tags.Format<"uuid">;

    /** Review comment update information */
    body: IShoppingMallComment.IUpdate;
  };
  export type Body = IShoppingMallComment.IUpdate;
  export type Response = IShoppingMallComment;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/memberUser/reviews/:reviewId/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/reviews/${encodeURIComponent(props.reviewId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IShoppingMallComment =>
    typia.random<IShoppingMallComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a comment from a product review permanently.
 *
 * Permanently delete a comment within a product review.
 *
 * Deletion removes the comment record identified by commentId under the review
 * specified by reviewId.
 *
 * Only authorized users may delete comments.
 *
 * This is a hard delete operation without recovery.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier of the target product review
 * @param props.commentId Unique identifier of the comment
 * @path /shoppingMall/memberUser/reviews/:reviewId/comments/:commentId
 * @accessor api.functional.shoppingMall.memberUser.reviews.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target product review */
    reviewId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/memberUser/reviews/:reviewId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/reviews/${encodeURIComponent(props.reviewId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
