import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallReview } from "../../../../structures/IShoppingMallReview";
import { IPageIShoppingMallReview } from "../../../../structures/IPageIShoppingMallReview";
export * as comments from "./comments/index";

/**
 * Create a new product review.
 *
 * Submit a new product review.
 *
 * Includes rating, title, body, privacy.
 *
 * Validates purchase and permissions.
 *
 * Returns created review details.
 *
 * @param props.connection
 * @param props.body Content for creating a new review
 * @path /shoppingMall/memberUser/reviews
 * @accessor api.functional.shoppingMall.memberUser.reviews.createReview
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createReview(
  connection: IConnection,
  props: createReview.Props,
): Promise<createReview.Response> {
  return true === connection.simulate
    ? createReview.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createReview.METADATA,
          path: createReview.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createReview {
  export type Props = {
    /** Content for creating a new review */
    body: IShoppingMallReview.ICreate;
  };
  export type Body = IShoppingMallReview.ICreate;
  export type Response = IShoppingMallReview;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/memberUser/reviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/reviews";
  export const random = (): IShoppingMallReview =>
    typia.random<IShoppingMallReview>();
  export const simulate = (
    connection: IConnection,
    props: createReview.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createReview.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve product reviews with filtering and pagination.
 *
 * Retrieve a paginated list of product reviews filtered by search criteria.
 *
 * Supports sorting and filtering on rating, date, or product.
 *
 * Returns summaries optimized for listing.
 *
 * Authorized for member users only.
 *
 * @param props.connection
 * @param props.body Search and pagination criteria for reviews
 * @path /shoppingMall/memberUser/reviews
 * @accessor api.functional.shoppingMall.memberUser.reviews.indexReview
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexReview(
  connection: IConnection,
  props: indexReview.Props,
): Promise<indexReview.Response> {
  return true === connection.simulate
    ? indexReview.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexReview.METADATA,
          path: indexReview.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexReview {
  export type Props = {
    /** Search and pagination criteria for reviews */
    body: IShoppingMallReview.IRequest;
  };
  export type Body = IShoppingMallReview.IRequest;
  export type Response = IPageIShoppingMallReview.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/reviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/reviews";
  export const random = (): IPageIShoppingMallReview.ISummary =>
    typia.random<IPageIShoppingMallReview.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexReview.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexReview.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information about a product review.
 *
 * Get detailed information about a single product review by ID.
 *
 * Includes rating, content, privacy, user info.
 *
 * Enforces authorization.
 *
 * Accessible to authenticated member users.
 *
 * @param props.connection
 * @param props.id Target review's ID
 * @path /shoppingMall/memberUser/reviews/:id
 * @accessor api.functional.shoppingMall.memberUser.reviews.atReview
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atReview(
  connection: IConnection,
  props: atReview.Props,
): Promise<atReview.Response> {
  return true === connection.simulate
    ? atReview.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atReview.METADATA,
          path: atReview.path(props),
          status: null,
        },
      );
}
export namespace atReview {
  export type Props = {
    /** Target review's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallReview;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/memberUser/reviews/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/reviews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallReview =>
    typia.random<IShoppingMallReview>();
  export const simulate = (
    connection: IConnection,
    props: atReview.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atReview.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a product review by ID.
 *
 * Allows rating and content modifications.
 *
 * Requires authorization.
 *
 * Returns updated review info.
 *
 * @param props.connection
 * @param props.id Target review's ID
 * @param props.body Updated review data
 * @path /shoppingMall/memberUser/reviews/:id
 * @accessor api.functional.shoppingMall.memberUser.reviews.updateReview
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateReview(
  connection: IConnection,
  props: updateReview.Props,
): Promise<updateReview.Response> {
  return true === connection.simulate
    ? updateReview.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateReview.METADATA,
          path: updateReview.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateReview {
  export type Props = {
    /** Target review's ID */
    id: string & tags.Format<"uuid">;

    /** Updated review data */
    body: IShoppingMallReview.IUpdate;
  };
  export type Body = IShoppingMallReview.IUpdate;
  export type Response = IShoppingMallReview;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/memberUser/reviews/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/reviews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallReview =>
    typia.random<IShoppingMallReview>();
  export const simulate = (
    connection: IConnection,
    props: updateReview.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateReview.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a product review by ID.
 *
 * Hard delete operation.
 *
 * Authorization enforced.
 *
 * No response body.
 *
 * @param props.connection
 * @param props.id Target review's ID
 * @path /shoppingMall/memberUser/reviews/:id
 * @accessor api.functional.shoppingMall.memberUser.reviews.eraseReview
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseReview(
  connection: IConnection,
  props: eraseReview.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseReview.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseReview.METADATA,
          path: eraseReview.path(props),
          status: null,
        },
      );
}
export namespace eraseReview {
  export type Props = {
    /** Target review's ID */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/memberUser/reviews/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/reviews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseReview.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseReview.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
