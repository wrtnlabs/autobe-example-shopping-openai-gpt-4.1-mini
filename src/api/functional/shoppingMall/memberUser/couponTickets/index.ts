import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCouponTicket } from "../../../../structures/IShoppingMallCouponTicket";
import { IPageIShoppingMallCouponTicket } from "../../../../structures/IPageIShoppingMallCouponTicket";

/**
 * Create a new coupon ticket record representing issuance of a coupon to a
 * customer. The request body must include details like coupon association,
 * owner type, validity period, and initial usage status.
 *
 * This operation is exclusively available to authenticated users with the
 * 'memberUser' role, ensuring secure and controlled coupon management.
 *
 * It performs data validation and returns the created coupon ticket including
 * all relevant metadata for client verification and further processing.
 *
 * @param props.connection
 * @param props.body Creation info of the coupon ticket
 * @path /shoppingMall/memberUser/couponTickets
 * @accessor api.functional.shoppingMall.memberUser.couponTickets.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the coupon ticket */
    body: IShoppingMallCouponTicket.ICreate;
  };
  export type Body = IShoppingMallCouponTicket.ICreate;
  export type Response = IShoppingMallCouponTicket;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/memberUser/couponTickets",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/couponTickets";
  export const random = (): IShoppingMallCouponTicket =>
    typia.random<IShoppingMallCouponTicket>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated list of coupon tickets.
 *
 * Retrieve a filtered and paginated list of coupon tickets available in the
 * shopping mall system. The operation provides clients the ability to search
 * coupons by status, validity period, owner type (guestUser, memberUser,
 * sellerUser, adminUser), and other related conditions.
 *
 * This operation supports pagination, sorting, and advanced filtering to enable
 * efficient management of coupon ticket data, usable for analytics, customer
 * service, and campaign monitoring.
 *
 * Security measures ensure only authorized users with the role 'memberUser'
 * (authenticated users) can access the coupon ticket list, preserving data
 * privacy and security.
 *
 * Data returned includes ticket codes, validity windows, usage status, and
 * timestamps for creation and last update, enabling clients to present timely
 * and accurate coupon information.
 *
 * @param props.connection
 * @param props.body Coupon ticket search criteria with filtering and pagination
 *   parameters
 * @path /shoppingMall/memberUser/couponTickets
 * @accessor api.functional.shoppingMall.memberUser.couponTickets.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Coupon ticket search criteria with filtering and pagination
     * parameters
     */
    body: IShoppingMallCouponTicket.IRequest;
  };
  export type Body = IShoppingMallCouponTicket.IRequest;
  export type Response = IPageIShoppingMallCouponTicket.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/memberUser/couponTickets",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/memberUser/couponTickets";
  export const random = (): IPageIShoppingMallCouponTicket.ISummary =>
    typia.random<IPageIShoppingMallCouponTicket.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed coupon ticket information.
 *
 * Retrieve detailed information of a single coupon ticket by its UUID. The
 * operation requires the `couponTicketId` as a path parameter and returns
 * comprehensive data including ticket usage status, validity dates, ownership
 * relationships, and timestamps.
 *
 * Security checks restrict access to authenticated users with the 'memberUser'
 * role. This operation is critical for customer service and coupon management
 * interfaces where specific coupon ticket details are needed.
 *
 * The operation is linked to the `shopping_mall_coupon_tickets` table and
 * follows best practices for secure and consistent data retrieval.
 *
 * @param props.connection
 * @param props.couponTicketId Unique identifier of the target coupon ticket
 * @path /shoppingMall/memberUser/couponTickets/:couponTicketId
 * @accessor api.functional.shoppingMall.memberUser.couponTickets.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target coupon ticket */
    couponTicketId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCouponTicket;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/memberUser/couponTickets/:couponTicketId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/couponTickets/${encodeURIComponent(props.couponTicketId ?? "null")}`;
  export const random = (): IShoppingMallCouponTicket =>
    typia.random<IShoppingMallCouponTicket>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponTicketId")(() => typia.assert(props.couponTicketId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update coupon ticket details.
 *
 * Update an existing coupon ticket by its unique ID. Allows modification of
 * properties such as associated coupon, usage status, validity dates, and
 * ownership.
 *
 * This operation requires authentication for the 'memberUser' role and ensures
 * data integrity through validation.
 *
 * The updated coupon ticket is returned upon successful modification.
 *
 * @param props.connection
 * @param props.couponTicketId Unique identifier of the target coupon ticket
 * @param props.body Update info for the coupon ticket
 * @path /shoppingMall/memberUser/couponTickets/:couponTicketId
 * @accessor api.functional.shoppingMall.memberUser.couponTickets.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target coupon ticket */
    couponTicketId: string & tags.Format<"uuid">;

    /** Update info for the coupon ticket */
    body: IShoppingMallCouponTicket.IUpdate;
  };
  export type Body = IShoppingMallCouponTicket.IUpdate;
  export type Response = IShoppingMallCouponTicket;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/memberUser/couponTickets/:couponTicketId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/memberUser/couponTickets/${encodeURIComponent(props.couponTicketId ?? "null")}`;
  export const random = (): IShoppingMallCouponTicket =>
    typia.random<IShoppingMallCouponTicket>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponTicketId")(() => typia.assert(props.couponTicketId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete coupon ticket permanently.
 *
 * Delete a coupon ticket record from the system permanently by its unique ID.
 * This hard deletion removes all associated data without recovery.
 *
 * Only authenticated users with role 'memberUser' may perform this operation,
 * ensuring security controls.
 *
 * No content is returned upon successful deletion.
 *
 * @param props.connection
 * @param props.couponTicketId Unique identifier of the target coupon ticket
 * @path /shoppingMall/memberUser/couponTickets/:couponTicketId
 * @accessor api.functional.shoppingMall.memberUser.couponTickets.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target coupon ticket */
    couponTicketId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/memberUser/couponTickets/:couponTicketId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/memberUser/couponTickets/${encodeURIComponent(props.couponTicketId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponTicketId")(() => typia.assert(props.couponTicketId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
