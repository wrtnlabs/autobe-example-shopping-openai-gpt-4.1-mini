import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallMileageDonation } from "../../../../structures/IShoppingMallMileageDonation";
import { IPageIShoppingMallMileageDonation } from "../../../../structures/IPageIShoppingMallMileageDonation";

/**
 * Create a new mileage donation record.
 *
 * Allows admin users to record a new mileage donation to a member user for
 * promotions or compensation.
 *
 * Requires donation amount, admin donor ID, member recipient ID, reason, and
 * date.
 *
 * Ensures integrity with validation of IDs as UUID and positive donation
 * amounts.
 *
 * Admin authorization required.
 *
 * @param props.connection
 * @param props.body Mileage donation creation data
 * @path /shoppingMall/adminUser/mileageDonations
 * @accessor api.functional.shoppingMall.adminUser.mileageDonations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Mileage donation creation data */
    body: IShoppingMallMileageDonation.ICreate;
  };
  export type Body = IShoppingMallMileageDonation.ICreate;
  export type Response = IShoppingMallMileageDonation;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/mileageDonations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/mileageDonations";
  export const random = (): IShoppingMallMileageDonation =>
    typia.random<IShoppingMallMileageDonation>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list mileage donations with filtering and pagination.
 *
 * Retrieve a paginated list of mileage donations with filtering options for
 * admin users to monitor and audit donation history.
 *
 * Supports pagination, sorting, and filtering to refine search results based on
 * donation date ranges, admin, or member filters.
 *
 * Data reflects donation reason, amount, dates, and associated user references.
 *
 * Requires admin role authorization.
 *
 * @param props.connection
 * @param props.body Search filters and pagination parameters for mileage
 *   donations
 * @path /shoppingMall/adminUser/mileageDonations
 * @accessor api.functional.shoppingMall.adminUser.mileageDonations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search filters and pagination parameters for mileage donations */
    body: IShoppingMallMileageDonation.IRequest;
  };
  export type Body = IShoppingMallMileageDonation.IRequest;
  export type Response = IPageIShoppingMallMileageDonation;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/mileageDonations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/mileageDonations";
  export const random = (): IPageIShoppingMallMileageDonation =>
    typia.random<IPageIShoppingMallMileageDonation>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed mileage donation record information.
 *
 * Fetch detailed information about a particular mileage donation identified by
 * 'mileageDonationId'.
 *
 * Details include donor admin user, recipient member user, donation reason and
 * amount, and audit timestamps.
 *
 * Authorized admin users only.
 *
 * @param props.connection
 * @param props.mileageDonationId The unique identifier for the mileage donation
 *   record
 * @path /shoppingMall/adminUser/mileageDonations/:mileageDonationId
 * @accessor api.functional.shoppingMall.adminUser.mileageDonations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier for the mileage donation record */
    mileageDonationId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallMileageDonation;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/mileageDonations/:mileageDonationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/mileageDonations/${encodeURIComponent(props.mileageDonationId ?? "null")}`;
  export const random = (): IShoppingMallMileageDonation =>
    typia.random<IShoppingMallMileageDonation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageDonationId")(() =>
        typia.assert(props.mileageDonationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a mileage donation record.
 *
 * Allows updating details of an existing mileage donation record.
 *
 * Admin-only access.
 *
 * Validates donationId existence, UUID formats, and positive donation amounts.
 *
 * Supports update of donation reason, amount, and donation date.
 *
 * Returns updated record details.
 *
 * @param props.connection
 * @param props.mileageDonationId Unique identifier of the mileage donation to
 *   update
 * @param props.body Mileage donation update data
 * @path /shoppingMall/adminUser/mileageDonations/:mileageDonationId
 * @accessor api.functional.shoppingMall.adminUser.mileageDonations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the mileage donation to update */
    mileageDonationId: string & tags.Format<"uuid">;

    /** Mileage donation update data */
    body: IShoppingMallMileageDonation.IUpdate;
  };
  export type Body = IShoppingMallMileageDonation.IUpdate;
  export type Response = IShoppingMallMileageDonation;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/mileageDonations/:mileageDonationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/mileageDonations/${encodeURIComponent(props.mileageDonationId ?? "null")}`;
  export const random = (): IShoppingMallMileageDonation =>
    typia.random<IShoppingMallMileageDonation>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageDonationId")(() =>
        typia.assert(props.mileageDonationId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete mileage donation by ID.
 *
 * Delete a mileage donation record from the system by its unique identifier.
 * This operation permanently removes the mileage donation entry representing
 * mileage points donated by administrators to members. The deleted record
 * cannot be recovered later.
 *
 * Access to this operation should be restricted to admins with the necessary
 * permissions to manage mileage donations.
 *
 * This operation directly impacts business reporting related to customer
 * mileage donations and requires careful authorization control. Any
 * dependencies on existing donation records for reporting or analytics should
 * be handled prior to deletion.
 *
 * No request body is necessary for this operation.
 *
 * Successful execution results in complete removal of the mileage donation
 * record from the shopping_mall_mileage_donations table, without residual
 * traces in the system.
 *
 * @param props.connection
 * @param props.mileageDonationId Unique identifier of the mileage donation to
 *   delete
 * @path /shoppingMall/adminUser/mileageDonations/:mileageDonationId
 * @accessor api.functional.shoppingMall.adminUser.mileageDonations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the mileage donation to delete */
    mileageDonationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/mileageDonations/:mileageDonationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/mileageDonations/${encodeURIComponent(props.mileageDonationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageDonationId")(() =>
        typia.assert(props.mileageDonationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
