import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallGuestUsers } from "../../../../structures/IShoppingMallGuestUsers";
import { IPageIShoppingMallGuestUsers } from "../../../../structures/IPageIShoppingMallGuestUsers";

/**
 * Search guest user sessions with filters and pagination.
 *
 * Search and retrieve paginated list of guest user sessions connected to the
 * system. Supports filtering by various parameters such as IP address, user
 * agent, session start/end, and status.
 *
 * Only accessible by users with adminUser role.
 *
 * Request body contains filter criteria and pagination details.
 *
 * Response is a paginated collection of guest user summaries matching the
 * criteria.
 *
 * Useful for system audit and analytics.
 *
 * @param props.connection
 * @param props.body Guest user search filters and pagination parameters
 * @path /shoppingMall/adminUser/guestUsers
 * @accessor api.functional.shoppingMall.adminUser.guestUsers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Guest user search filters and pagination parameters */
    body: IShoppingMallGuestUsers.IRequest;
  };
  export type Body = IShoppingMallGuestUsers.IRequest;
  export type Response = IPageIShoppingMallGuestUsers.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/guestUsers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/guestUsers";
  export const random = (): IPageIShoppingMallGuestUsers.ISummary =>
    typia.random<IPageIShoppingMallGuestUsers.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get guest user session details by ID.
 *
 * Get detailed information of a guest user session identified by UUID.
 *
 * AdminUser role required for access.
 *
 * Returns full guest user record including session details, access metadata,
 * and status.
 *
 * If not found, returns 404 error.
 *
 * @param props.connection
 * @param props.id UUID of the guest user session to retrieve
 * @path /shoppingMall/adminUser/guestUsers/:id
 * @accessor api.functional.shoppingMall.adminUser.guestUsers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the guest user session to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallGuestUsers;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/guestUsers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/guestUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallGuestUsers =>
    typia.random<IShoppingMallGuestUsers>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update guest user session metadata.
 *
 * Update session and connection metadata for a guest user session identified by
 * UUID.
 *
 * AdminUser role required.
 *
 * Request body provides fields to update such as access_url, referrer,
 * user_agent, session_end_at, and status.
 *
 * Returns the updated guest user session record upon success.
 *
 * @param props.connection
 * @param props.id UUID of the guest user session to update
 * @param props.body Guest user update information
 * @path /shoppingMall/adminUser/guestUsers/:id
 * @accessor api.functional.shoppingMall.adminUser.guestUsers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the guest user session to update */
    id: string & tags.Format<"uuid">;

    /** Guest user update information */
    body: IShoppingMallGuestUsers.IUpdate;
  };
  export type Body = IShoppingMallGuestUsers.IUpdate;
  export type Response = IShoppingMallGuestUsers;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/guestUsers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/guestUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallGuestUsers =>
    typia.random<IShoppingMallGuestUsers>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete guest user session permanently by ID.
 *
 * Permanently delete a guest user session record by its UUID.
 *
 * AdminUser role required to perform this operation.
 *
 * No request body is needed.
 *
 * Successful deletion removes the record entirely.
 *
 * Parameter "id" is a UUID identifying the guest session to delete.
 *
 * @param props.connection
 * @param props.id UUID of guest user session to delete
 * @path /shoppingMall/adminUser/guestUsers/:id
 * @accessor api.functional.shoppingMall.adminUser.guestUsers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of guest user session to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/guestUsers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/guestUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
