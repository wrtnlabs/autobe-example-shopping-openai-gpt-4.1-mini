import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSection } from "../../../../structures/IShoppingMallSection";
import { IPageIShoppingMallSection } from "../../../../structures/IPageIShoppingMallSection";

/**
 * Create a new shopping mall spatial section.
 *
 * Create a new spatial section in the shopping mall system.
 *
 * The section groups products and orders spatially and supports administrative
 * configuration.
 *
 * Validation enforces unique codes and valid input data.
 *
 * Operation is restricted to adminUser.
 *
 * Returns the created section data.
 *
 * @param props.connection
 * @param props.body Data required to create a new shopping mall section
 * @path /shoppingMall/adminUser/sections
 * @accessor api.functional.shoppingMall.adminUser.sections.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data required to create a new shopping mall section */
    body: IShoppingMallSection.ICreate;
  };
  export type Body = IShoppingMallSection.ICreate;
  export type Response = IShoppingMallSection;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/sections",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/sections";
  export const random = (): IShoppingMallSection =>
    typia.random<IShoppingMallSection>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated list of shopping mall spatial sections.
 *
 * The operation supports filters on status, section name or code, with
 * pagination and sorting capabilities.
 *
 * Access is restricted to adminUser.
 *
 * Errors returned on invalid parameters or authorization failures.
 *
 * Response includes section summaries optimized for list display.
 *
 * @param props.connection
 * @param props.body Request parameters to filter, search, and paginate sections
 * @path /shoppingMall/adminUser/sections
 * @accessor api.functional.shoppingMall.adminUser.sections.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Request parameters to filter, search, and paginate sections */
    body: IShoppingMallSection.IRequest;
  };
  export type Body = IShoppingMallSection.IRequest;
  export type Response = IPageIShoppingMallSection.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/sections",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/sections";
  export const random = (): IPageIShoppingMallSection.ISummary =>
    typia.random<IPageIShoppingMallSection.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a shopping mall section by ID.
 *
 * Get detailed information of a specific shopping mall section by its ID.
 *
 * Only adminUser can perform this operation.
 *
 * Validation ensures ID is a valid UUID and the section exists.
 *
 * Returns full section details.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target shopping mall section
 * @path /shoppingMall/adminUser/sections/:id
 * @accessor api.functional.shoppingMall.adminUser.sections.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target shopping mall section */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSection;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/sections/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/sections/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallSection =>
    typia.random<IShoppingMallSection>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific product section by ID.
 *
 * This API endpoint allows authorized users to update detailed information of a
 * section, which is used to spatially organize products within the shopping
 * mall's multi-channel sales environment. The operation modifies section
 * properties such as the unique code, display name, optional description, and
 * current operational status.
 *
 * Section updates are subject to validation against the Prisma schema
 * shopping_mall_sections, ensuring data consistency and integrity. The endpoint
 * accepts the section identifier as a path parameter and the updated content in
 * the request body.
 *
 * Security controls enforce role-based permissions restricting this operation
 * to appropriate system users such as administrators or channel managers.
 * Errors in updating due to invalid identifiers or data violations are handled
 * with detailed responses.
 *
 * This operation supports maintenance of the product classification structure
 * and helps keep the mall's sections synchronized with business needs.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target section
 * @param props.body Update data for the section entity
 * @path /shoppingMall/adminUser/sections/:id
 * @accessor api.functional.shoppingMall.adminUser.sections.updateSection
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateSection(
  connection: IConnection,
  props: updateSection.Props,
): Promise<updateSection.Response> {
  return true === connection.simulate
    ? updateSection.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateSection.METADATA,
          path: updateSection.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateSection {
  export type Props = {
    /** Unique identifier of the target section */
    id: string & tags.Format<"uuid">;

    /** Update data for the section entity */
    body: IShoppingMallSection.IUpdate;
  };
  export type Body = IShoppingMallSection.IUpdate;
  export type Response = IShoppingMallSection;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/sections/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/sections/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallSection =>
    typia.random<IShoppingMallSection>();
  export const simulate = (
    connection: IConnection,
    props: updateSection.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateSection.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a product section permanently by ID.
 *
 * Deletes a product section identified by its unique ID. Sections organize
 * products spatially within channels in the shopping mall system.
 *
 * This operation removes the section record entirely from the database and
 * cannot be undone. It requires administrative authorization to ensure proper
 * controls.
 *
 * Upon successful deletion, no content is returned to confirm removal.
 *
 * Errors such as nonexistent IDs or database constraints violations are
 * reported in standard error responses.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target section
 * @path /shoppingMall/adminUser/sections/:id
 * @accessor api.functional.shoppingMall.adminUser.sections.eraseSection
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseSection(
  connection: IConnection,
  props: eraseSection.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseSection.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseSection.METADATA,
          path: eraseSection.path(props),
          status: null,
        },
      );
}
export namespace eraseSection {
  export type Props = {
    /** Unique identifier of the target section */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/sections/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/sections/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseSection.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseSection.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
