import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallDelivery } from "../../../../../structures/IShoppingMallDelivery";
import { IPageIShoppingMallDelivery } from "../../../../../structures/IPageIShoppingMallDelivery";

/**
 * Create a delivery record for an order.
 *
 * Create a new delivery entry under a specified order. This is key for tracking
 * shipments and managing delivery stages, expected dates, and related
 * metadata.
 *
 * @param props.connection
 * @param props.orderId Unique ID of the order to add a delivery record for
 * @param props.body Delivery creation information
 * @path /shoppingMall/adminUser/orders/:orderId/deliveries
 * @accessor api.functional.shoppingMall.adminUser.orders.deliveries.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique ID of the order to add a delivery record for */
    orderId: string & tags.Format<"uuid">;

    /** Delivery creation information */
    body: IShoppingMallDelivery.ICreate;
  };
  export type Body = IShoppingMallDelivery.ICreate;
  export type Response = IShoppingMallDelivery;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/orders/:orderId/deliveries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries`;
  export const random = (): IShoppingMallDelivery =>
    typia.random<IShoppingMallDelivery>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve delivery records for a given order.
 *
 * Retrieve a filtered and paginated list of delivery records associated with a
 * specific order. The operation supports advanced filtering criteria, sorting,
 * and pagination to manage large numbers of shipments efficiently.
 *
 * Only users with appropriate access roles such as administrators and sellers
 * (involved with the order) may access this operation due to sensitive shipment
 * information.
 *
 * This operation bases its data on the shopping_mall_deliveries table and
 * provides insights into the shipping and delivery process states, helpful for
 * order fulfillment tracking and customer service.
 *
 * Response includes detailed delivery information including status, stage,
 * expected dates, and timestamps.
 *
 * @param props.connection
 * @param props.orderId Unique ID of the order to retrieve deliveries for
 * @param props.body Delivery search and filtering criteria
 * @path /shoppingMall/adminUser/orders/:orderId/deliveries
 * @accessor api.functional.shoppingMall.adminUser.orders.deliveries.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique ID of the order to retrieve deliveries for */
    orderId: string & tags.Format<"uuid">;

    /** Delivery search and filtering criteria */
    body: IShoppingMallDelivery.IRequest;
  };
  export type Body = IShoppingMallDelivery.IRequest;
  export type Response = IPageIShoppingMallDelivery.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/orders/:orderId/deliveries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries`;
  export const random = (): IPageIShoppingMallDelivery.ISummary =>
    typia.random<IPageIShoppingMallDelivery.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get delivery detail by delivery ID.
 *
 * Retrieve detailed information about a specific delivery record linked to an
 * order. This supports shipment tracking with comprehensive delivery lifecycle
 * data and status.
 *
 * @param props.connection
 * @param props.orderId Unique ID of the order containing the delivery
 * @param props.deliveryId Unique ID of the delivery record
 * @path /shoppingMall/adminUser/orders/:orderId/deliveries/:deliveryId
 * @accessor api.functional.shoppingMall.adminUser.orders.deliveries.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique ID of the order containing the delivery */
    orderId: string & tags.Format<"uuid">;

    /** Unique ID of the delivery record */
    deliveryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallDelivery;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/orders/:orderId/deliveries/:deliveryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}`;
  export const random = (): IShoppingMallDelivery =>
    typia.random<IShoppingMallDelivery>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update delivery record for an order.
 *
 * Update a delivery record identified by its delivery ID within a specific
 * order. Supports changes to delivery lifecycle stage, status, and scheduling
 * information.
 *
 * @param props.connection
 * @param props.orderId Unique ID of the order containing the delivery to update
 * @param props.deliveryId Unique ID of the delivery record to update
 * @param props.body Delivery update information
 * @path /shoppingMall/adminUser/orders/:orderId/deliveries/:deliveryId
 * @accessor api.functional.shoppingMall.adminUser.orders.deliveries.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique ID of the order containing the delivery to update */
    orderId: string & tags.Format<"uuid">;

    /** Unique ID of the delivery record to update */
    deliveryId: string & tags.Format<"uuid">;

    /** Delivery update information */
    body: IShoppingMallDelivery.IUpdate;
  };
  export type Body = IShoppingMallDelivery.IUpdate;
  export type Response = IShoppingMallDelivery;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/orders/:orderId/deliveries/:deliveryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}`;
  export const random = (): IShoppingMallDelivery =>
    typia.random<IShoppingMallDelivery>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a delivery record from an order.
 *
 * Delete a delivery record by delivery ID under an order. This operation
 * permanently removes shipment tracking data from the system.
 *
 * @param props.connection
 * @param props.orderId Unique ID of the order containing the delivery to delete
 * @param props.deliveryId Unique ID of the delivery record to delete
 * @path /shoppingMall/adminUser/orders/:orderId/deliveries/:deliveryId
 * @accessor api.functional.shoppingMall.adminUser.orders.deliveries.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique ID of the order containing the delivery to delete */
    orderId: string & tags.Format<"uuid">;

    /** Unique ID of the delivery record to delete */
    deliveryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/orders/:orderId/deliveries/:deliveryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
