import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderStatusHistory } from "../../../../structures/IShoppingMallOrderStatusHistory";
import { IPageIShoppingMallOrderStatusHistory } from "../../../../structures/IPageIShoppingMallOrderStatusHistory";

/**
 * Search and retrieve paginated order status history records with filtering
 * options. This includes old and new status values, change timestamps, and
 * related order references.
 *
 * Only allowed for adminUser roles due to the sensitive nature of order audit
 * data.
 *
 * Supports pagination parameters to handle large datasets efficiently, enabling
 * administrators to review order lifecycle changes.
 *
 * Errors occur when invalid filters are applied or parameters exceed allowed
 * range.
 *
 * @param props.connection
 * @param props.body Order status history search criteria and pagination
 *   parameters
 * @path /shoppingMall/adminUser/orderStatusHistories
 * @accessor api.functional.shoppingMall.adminUser.orderStatusHistories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Order status history search criteria and pagination parameters */
    body: IShoppingMallOrderStatusHistory.IRequest;
  };
  export type Body = IShoppingMallOrderStatusHistory.IRequest;
  export type Response = IPageIShoppingMallOrderStatusHistory;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/orderStatusHistories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/orderStatusHistories";
  export const random = (): IPageIShoppingMallOrderStatusHistory =>
    typia.random<IPageIShoppingMallOrderStatusHistory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve order status history by ID.
 *
 * Retrieve a detailed order status history record by its unique ID. This record
 * traces the exact change in order status over time.
 *
 * Restricted access to adminUser roles ensures audit data integrity.
 *
 * Errors are returned if the record does not exist or the user lacks
 * permission.
 *
 * @param props.connection
 * @param props.id The unique ID of the target order status history record
 * @path /shoppingMall/adminUser/orderStatusHistories/:id
 * @accessor api.functional.shoppingMall.adminUser.orderStatusHistories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique ID of the target order status history record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderStatusHistory;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/orderStatusHistories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/orderStatusHistories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallOrderStatusHistory =>
    typia.random<IShoppingMallOrderStatusHistory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
