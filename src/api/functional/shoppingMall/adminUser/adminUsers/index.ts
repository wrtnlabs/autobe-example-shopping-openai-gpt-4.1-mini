import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAdminUser } from "../../../../structures/IShoppingMallAdminUser";
import { IPageIShoppingMallAdminuser } from "../../../../structures/IPageIShoppingMallAdminuser";

/**
 * Search and retrieve a filtered, paginated list of administrator users.
 *
 * Retrieve a filtered and paginated list of administrator users from the
 * shopping mall platform.
 *
 * This operation provides comprehensive search capabilities by email, nickname,
 * full name, and account status.
 *
 * Administrator accounts have elevated access privileges and manage critical
 * system functions.
 *
 * Therefore, the endpoint restricts access solely to users with the 'adminUser'
 * role.
 *
 * Returned results are paginated to handle large user bases efficiently and
 * include essential administrator profile and status information.
 *
 * Proper validation and error handling ensure robust, secure handling of
 * requests.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for administrator
 *   user filtering
 * @path /shoppingMall/adminUser/adminUsers
 * @accessor api.functional.shoppingMall.adminUser.adminUsers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for administrator user
     * filtering
     */
    body: IShoppingMallAdminUser.IRequest;
  };
  export type Body = IShoppingMallAdminUser.IRequest;
  export type Response = IPageIShoppingMallAdminuser;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/adminUsers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/adminUsers";
  export const random = (): IPageIShoppingMallAdminuser =>
    typia.random<IPageIShoppingMallAdminuser>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get administrator user details by ID.
 *
 * Get detailed information about a particular administrator user identified by
 * ID.
 *
 * Access is granted only to users with the 'adminUser' role to ensure
 * confidentiality of sensitive account credentials.
 *
 * The administrator entity schema defined in Prisma is strictly followed.
 *
 * Standard error handling applies for invalid or missing resources.
 *
 * @param props.connection
 * @param props.id Unique identifier of the administrator user
 * @path /shoppingMall/adminUser/adminUsers/:id
 * @accessor api.functional.shoppingMall.adminUser.adminUsers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the administrator user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAdminUser;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/adminUsers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/adminUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallAdminUser =>
    typia.random<IShoppingMallAdminUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an administrator user's information.
 *
 * Modify the details of a specific administrator user specified by unique
 * identifier.
 *
 * This operation permits updating email, nickname, full name, and status
 * fields.
 *
 * Only users with the 'adminUser' role are authorized for this action.
 *
 * The administrator user schema ensures data integrity.
 *
 * Errors result from invalid data or authentication failures.
 *
 * @param props.connection
 * @param props.id Unique identifier of the administrator user
 * @param props.body Update data for administrator user
 * @path /shoppingMall/adminUser/adminUsers/:id
 * @accessor api.functional.shoppingMall.adminUser.adminUsers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the administrator user */
    id: string & tags.Format<"uuid">;

    /** Update data for administrator user */
    body: IShoppingMallAdminUser.IUpdate;
  };
  export type Body = IShoppingMallAdminUser.IUpdate;
  export type Response = IShoppingMallAdminUser;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/adminUsers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/adminUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallAdminUser =>
    typia.random<IShoppingMallAdminUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an administrator user by ID.
 *
 * Remove an administrator user permanently by ID.
 *
 * This operation deletes the administrator user record and cannot be undone.
 *
 * Only users with the 'adminUser' role are authorized to perform this action.
 *
 * Errors occur on invalid IDs, non-existent records, or insufficient
 * permissions.
 *
 * Ensure confirmation controls to prevent accidental deletion.
 *
 * @param props.connection
 * @param props.id Unique identifier of the administrator user to remove
 * @path /shoppingMall/adminUser/adminUsers/:id
 * @accessor api.functional.shoppingMall.adminUser.adminUsers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the administrator user to remove */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/adminUsers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/adminUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
