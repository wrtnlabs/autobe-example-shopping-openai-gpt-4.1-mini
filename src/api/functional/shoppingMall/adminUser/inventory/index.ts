import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallInventory } from "../../../../structures/IShoppingMallInventory";
import { IPageIShoppingMallInventory } from "../../../../structures/IPageIShoppingMallInventory";

/**
 * Create inventory record.
 *
 * Create a new inventory record to track stock quantities for a specific sale
 * product option combination.
 *
 * The operation requires sale product ID, option combination code string, and
 * stock quantity in the request body.
 *
 * Authorization is limited to adminUser and sellerUser roles for security. The
 * response returns the created inventory entity with persisted timestamps.
 *
 * @param props.connection
 * @param props.body Inventory creation data
 * @path /shoppingMall/adminUser/inventory
 * @accessor api.functional.shoppingMall.adminUser.inventory.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Inventory creation data */
    body: IShoppingMallInventory.ICreate;
  };
  export type Body = IShoppingMallInventory.ICreate;
  export type Response = IShoppingMallInventory;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/inventory",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/inventory";
  export const random = (): IShoppingMallInventory =>
    typia.random<IShoppingMallInventory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve paginated inventory list.
 *
 * Search and retrieve a paginated list of inventory items.
 *
 * Supports filtering by sale ID, option code combinations, and stock quantity
 * range.
 *
 * Includes pagination for large result sets.
 *
 * Accessible by authorized users such as adminUser and sellers for inventory
 * oversight.
 *
 * Returns summarized inventory data suitable for display in management
 * consoles.
 *
 * Enables quick identification of low stock or replenishment needs.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for inventory
 * @path /shoppingMall/adminUser/inventory
 * @accessor api.functional.shoppingMall.adminUser.inventory.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for inventory */
    body: IShoppingMallInventory.IRequest;
  };
  export type Body = IShoppingMallInventory.IRequest;
  export type Response = IPageIShoppingMallInventory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/inventory",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/inventory";
  export const random = (): IPageIShoppingMallInventory.ISummary =>
    typia.random<IPageIShoppingMallInventory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve inventory record by ID.
 *
 * Retrieve detailed inventory record for a specified inventory ID. The
 * inventory represents stock of a particular sale product option combination.
 *
 * This operation accesses the shopping_mall_inventory table, returning the
 * inventory stock quantity and associated sale product ID. It ensures that only
 * authorized users can view this sensitive data to prevent leak of inventory
 * levels.
 *
 * The inventory ID must be a valid UUID corresponding to an existing inventory
 * record.
 *
 * The operation returns the inventory details including option combination code
 * and current stock quantity. If the record is not found or deleted, an
 * appropriate error should be handled by the server.
 *
 * @param props.connection
 * @param props.inventoryId Unique identifier of the target inventory record
 * @path /shoppingMall/adminUser/inventory/:inventoryId
 * @accessor api.functional.shoppingMall.adminUser.inventory.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target inventory record */
    inventoryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallInventory;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/inventory/:inventoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/inventory/${encodeURIComponent(props.inventoryId ?? "null")}`;
  export const random = (): IShoppingMallInventory =>
    typia.random<IShoppingMallInventory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inventoryId")(() => typia.assert(props.inventoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update inventory record by ID.
 *
 * Update specific inventory record with new stock quantity or option
 * combination code.
 *
 * The operation requires inventory ID path parameter and request body
 * containing updated inventory details.
 *
 * Authorized roles are adminUser and sellerUser. The response returns the
 * updated inventory record.
 *
 * @param props.connection
 * @param props.inventoryId Unique identifier of the inventory record to update
 * @param props.body Inventory update data
 * @path /shoppingMall/adminUser/inventory/:inventoryId
 * @accessor api.functional.shoppingMall.adminUser.inventory.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the inventory record to update */
    inventoryId: string & tags.Format<"uuid">;

    /** Inventory update data */
    body: IShoppingMallInventory.IUpdate;
  };
  export type Body = IShoppingMallInventory.IUpdate;
  export type Response = IShoppingMallInventory;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/inventory/:inventoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/inventory/${encodeURIComponent(props.inventoryId ?? "null")}`;
  export const random = (): IShoppingMallInventory =>
    typia.random<IShoppingMallInventory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inventoryId")(() => typia.assert(props.inventoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete inventory record by ID.
 *
 * Delete inventory record permanently by ID. This operation removes the
 * inventory record completely from the database.
 *
 * Only adminUser and sellerUser roles can delete inventory records.
 *
 * No response body is returned.
 *
 * @param props.connection
 * @param props.inventoryId Unique identifier of the inventory record to delete
 * @path /shoppingMall/adminUser/inventory/:inventoryId
 * @accessor api.functional.shoppingMall.adminUser.inventory.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the inventory record to delete */
    inventoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/inventory/:inventoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/inventory/${encodeURIComponent(props.inventoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inventoryId")(() => typia.assert(props.inventoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
