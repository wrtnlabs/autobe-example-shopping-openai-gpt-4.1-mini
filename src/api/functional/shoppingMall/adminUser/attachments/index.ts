import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAttachment } from "../../../../structures/IShoppingMallAttachment";
import { IPageIShoppingMallAttachment } from "../../../../structures/IPageIShoppingMallAttachment";

/**
 * Search and retrieve shopping mall attachment files.
 *
 * Provides advanced search capabilities for managing attachment files uploaded
 * to the shopping mall backend. This includes filtering by media type, created
 * date, and other relevant metadata.
 *
 * The attachments are browsable in pagination format for efficient data
 * retrieval.
 *
 * Access control restricts the endpoint to administrative users who manage
 * CDN-resident files and metadata.
 *
 * Errors include invalid filters or access denial.
 *
 * Returned data includes file URLs, types, sizes, and timestamps.
 *
 * @param props.connection
 * @param props.body Search parameters and pagination options for attachments
 * @path /shoppingMall/adminUser/attachments
 * @accessor api.functional.shoppingMall.adminUser.attachments.indexAttachment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexAttachment(
  connection: IConnection,
  props: indexAttachment.Props,
): Promise<indexAttachment.Response> {
  return true === connection.simulate
    ? indexAttachment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexAttachment.METADATA,
          path: indexAttachment.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexAttachment {
  export type Props = {
    /** Search parameters and pagination options for attachments */
    body: IShoppingMallAttachment.IRequest;
  };
  export type Body = IShoppingMallAttachment.IRequest;
  export type Response = IPageIShoppingMallAttachment;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/attachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/attachments";
  export const random = (): IPageIShoppingMallAttachment =>
    typia.random<IPageIShoppingMallAttachment>();
  export const simulate = (
    connection: IConnection,
    props: indexAttachment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexAttachment.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
