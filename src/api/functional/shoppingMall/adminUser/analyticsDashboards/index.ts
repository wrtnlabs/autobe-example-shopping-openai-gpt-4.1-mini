import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAnalyticsDashboard } from "../../../../structures/IShoppingMallAnalyticsDashboard";
import { IPageIShoppingMallAnalyticsDashboard } from "../../../../structures/IPageIShoppingMallAnalyticsDashboard";

/**
 * Create a new analytics dashboard with configuration and operational metadata.
 *
 * Requires adminUser authorization.
 *
 * Request must provide dashboard_type, JSON configuration, last_run_at
 * timestamp, and status.
 *
 * Response returns the created dashboard record including ID and timestamps.
 *
 * Validation errors include uniqueness constraints on dashboard_type.
 *
 * Supports admin workflows for analytics dashboard management.
 *
 * @param props.connection
 * @param props.body Analytics dashboard creation information
 * @path /shoppingMall/adminUser/analyticsDashboards
 * @accessor api.functional.shoppingMall.adminUser.analyticsDashboards.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Analytics dashboard creation information */
    body: IShoppingMallAnalyticsDashboard.ICreate;
  };
  export type Body = IShoppingMallAnalyticsDashboard.ICreate;
  export type Response = IShoppingMallAnalyticsDashboard;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/analyticsDashboards",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/analyticsDashboards";
  export const random = (): IShoppingMallAnalyticsDashboard =>
    typia.random<IShoppingMallAnalyticsDashboard>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated list of analytic dashboards.
 *
 * Retrieve a paginated list of analytics dashboards. Supports filters on
 * dashboard type, status, and last execution time.
 *
 * Access control is enforced for administrative roles.
 *
 * The shopping_mall_analytics_dashboards table manages metadata for dashboards
 * such as configurations and status.
 *
 * Typical use cases include system monitoring, analytic display management, or
 * operational oversight.
 *
 * Errors returned when filters are invalid or user is unauthorized.
 *
 * @param props.connection
 * @param props.body Filtering and pagination parameters for analytic dashboard
 *   listing
 * @path /shoppingMall/adminUser/analyticsDashboards
 * @accessor api.functional.shoppingMall.adminUser.analyticsDashboards.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and pagination parameters for analytic dashboard listing */
    body: IShoppingMallAnalyticsDashboard.IRequest;
  };
  export type Body = IShoppingMallAnalyticsDashboard.IRequest;
  export type Response = IPageIShoppingMallAnalyticsDashboard.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/analyticsDashboards",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/analyticsDashboards";
  export const random = (): IPageIShoppingMallAnalyticsDashboard.ISummary =>
    typia.random<IPageIShoppingMallAnalyticsDashboard.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific analytics dashboard by ID.
 *
 * Retrieve detailed information of a specified analytics dashboard by its ID.
 * This operation allows admin users to access the dashboard configuration JSON,
 * status, and audit timestamps.
 *
 * Only authenticated administrators are authorized to perform this action.
 *
 * No side-effects occur in this operation; it is a safe, idempotent read
 * operation suitable for display and auditing.
 *
 * If the specified dashboard ID does not exist, a 404 error is returned.
 *
 * This API complements create, update, and delete operations on analytics
 * dashboards.
 *
 * @param props.connection
 * @param props.analyticsDashboardId The unique identifier of the analytics
 *   dashboard
 * @path /shoppingMall/adminUser/analyticsDashboards/:analyticsDashboardId
 * @accessor api.functional.shoppingMall.adminUser.analyticsDashboards.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the analytics dashboard */
    analyticsDashboardId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAnalyticsDashboard;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/analyticsDashboards/:analyticsDashboardId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/analyticsDashboards/${encodeURIComponent(props.analyticsDashboardId ?? "null")}`;
  export const random = (): IShoppingMallAnalyticsDashboard =>
    typia.random<IShoppingMallAnalyticsDashboard>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("analyticsDashboardId")(() =>
        typia.assert(props.analyticsDashboardId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an analytics dashboard by ID.
 *
 * Update an existing analytics dashboard by its ID with new configuration and
 * metadata.
 *
 * Requires adminUser authorization.
 *
 * Input should include dashboard_type, configuration JSON, last_run_at
 * datetime, and status.
 *
 * Returns the updated analytics dashboard record.
 *
 * Errors include 404 if the dashboard ID is not found and conflict if
 * dashboard_type uniqueness is violated.
 *
 * Supports dashboard lifecycle management by admin users.
 *
 * @param props.connection
 * @param props.analyticsDashboardId The unique identifier of the analytics
 *   dashboard
 * @param props.body Analytics dashboard update information
 * @path /shoppingMall/adminUser/analyticsDashboards/:analyticsDashboardId
 * @accessor api.functional.shoppingMall.adminUser.analyticsDashboards.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the analytics dashboard */
    analyticsDashboardId: string & tags.Format<"uuid">;

    /** Analytics dashboard update information */
    body: IShoppingMallAnalyticsDashboard.IUpdate;
  };
  export type Body = IShoppingMallAnalyticsDashboard.IUpdate;
  export type Response = IShoppingMallAnalyticsDashboard;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/analyticsDashboards/:analyticsDashboardId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/analyticsDashboards/${encodeURIComponent(props.analyticsDashboardId ?? "null")}`;
  export const random = (): IShoppingMallAnalyticsDashboard =>
    typia.random<IShoppingMallAnalyticsDashboard>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("analyticsDashboardId")(() =>
        typia.assert(props.analyticsDashboardId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete an analytics dashboard by ID.
 *
 * Soft delete an analytics dashboard by its ID. This marks the record as
 * deleted by setting the deleted_at timestamp.
 *
 * Authorized only for adminUser role.
 *
 * No request or response body.
 *
 * Returns 204 No Content on successful soft deletion.
 *
 * Supports full lifecycle management of analytics dashboards.
 *
 * @param props.connection
 * @param props.analyticsDashboardId The unique identifier of the analytics
 *   dashboard
 * @path /shoppingMall/adminUser/analyticsDashboards/:analyticsDashboardId
 * @accessor api.functional.shoppingMall.adminUser.analyticsDashboards.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the analytics dashboard */
    analyticsDashboardId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/analyticsDashboards/:analyticsDashboardId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/analyticsDashboards/${encodeURIComponent(props.analyticsDashboardId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("analyticsDashboardId")(() =>
        typia.assert(props.analyticsDashboardId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
