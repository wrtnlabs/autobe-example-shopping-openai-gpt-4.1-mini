import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallChannelCategory } from "../../../../structures/IShoppingMallChannelCategory";
import { IPageIShoppingMallChannelCategory } from "../../../../structures/IPageIShoppingMallChannelCategory";

/**
 * Create a new channel category mapping.
 *
 * Creates a new channel-category association in the shopping mall system.
 *
 * This mapping defines which product categories belong to which sales channels
 * to support multi-channel category configurations.
 *
 * The API expects validated request data and enforces uniqueness of
 * channel-category pairs.
 *
 * Access control restricts creation to administrative roles with appropriate
 * permissions.
 *
 * On success, the newly created mapping's details are returned.
 *
 * @param props.connection
 * @param props.body Creation data for new channel-category mapping
 * @path /shoppingMall/adminUser/channelCategories
 * @accessor api.functional.shoppingMall.adminUser.channelCategories.createChannelCategory
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createChannelCategory(
  connection: IConnection,
  props: createChannelCategory.Props,
): Promise<createChannelCategory.Response> {
  return true === connection.simulate
    ? createChannelCategory.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createChannelCategory.METADATA,
          path: createChannelCategory.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createChannelCategory {
  export type Props = {
    /** Creation data for new channel-category mapping */
    body: IShoppingMallChannelCategory.ICreate;
  };
  export type Body = IShoppingMallChannelCategory.ICreate;
  export type Response = IShoppingMallChannelCategory;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/channelCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/channelCategories";
  export const random = (): IShoppingMallChannelCategory =>
    typia.random<IShoppingMallChannelCategory>();
  export const simulate = (
    connection: IConnection,
    props: createChannelCategory.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createChannelCategory.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve channel category mappings.
 *
 * Retrieves a list of shopping mall channel-category mappings with support for
 * filtering, sorting, and pagination. Channel categories enable configuration
 * of hierarchical product classifications per channel.
 *
 * The operation processes search criteria to narrow down results and returns a
 * paginated view of the matched mappings.
 *
 * Security and role-based filtering restrict access to authorized
 * administrators to manage channel category assignments and system
 * configurations.
 *
 * @param props.connection
 * @param props.body Search and filter parameters for channel-category mappings
 * @path /shoppingMall/adminUser/channelCategories
 * @accessor api.functional.shoppingMall.adminUser.channelCategories.indexChannelCategory
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexChannelCategory(
  connection: IConnection,
  props: indexChannelCategory.Props,
): Promise<indexChannelCategory.Response> {
  return true === connection.simulate
    ? indexChannelCategory.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexChannelCategory.METADATA,
          path: indexChannelCategory.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexChannelCategory {
  export type Props = {
    /** Search and filter parameters for channel-category mappings */
    body: IShoppingMallChannelCategory.IRequest;
  };
  export type Body = IShoppingMallChannelCategory.IRequest;
  export type Response = IPageIShoppingMallChannelCategory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/channelCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/channelCategories";
  export const random = (): IPageIShoppingMallChannelCategory.ISummary =>
    typia.random<IPageIShoppingMallChannelCategory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexChannelCategory.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexChannelCategory.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific channel category mapping by ID.
 *
 * Retrieves detailed information of a channel-category mapping specified by its
 * unique ID.
 *
 * This mapping represents the link between a sales channel and a product
 * category within the shopping mall system, enabling tailored product
 * classification structures per channel.
 *
 * Access is restricted to authorized administrative users to maintain system
 * integrity and configuration consistency.
 *
 * Potential errors include invalid IDs or unauthorized access handling.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target channel category mapping
 * @path /shoppingMall/adminUser/channelCategories/:id
 * @accessor api.functional.shoppingMall.adminUser.channelCategories.atChannelCategory
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atChannelCategory(
  connection: IConnection,
  props: atChannelCategory.Props,
): Promise<atChannelCategory.Response> {
  return true === connection.simulate
    ? atChannelCategory.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atChannelCategory.METADATA,
          path: atChannelCategory.path(props),
          status: null,
        },
      );
}
export namespace atChannelCategory {
  export type Props = {
    /** Unique identifier of the target channel category mapping */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallChannelCategory;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/channelCategories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/channelCategories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallChannelCategory =>
    typia.random<IShoppingMallChannelCategory>();
  export const simulate = (
    connection: IConnection,
    props: atChannelCategory.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atChannelCategory.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific channel category mapping by ID.
 *
 * Updates channel-category mapping details identified by its unique ID.
 *
 * This allows modification of which product category is linked to which sales
 * channel.
 *
 * Access is restricted to authorized administrative roles.
 *
 * The operation requires validation of the input data and enforces uniqueness
 * constraints.
 *
 * Errors due to invalid identifiers or data conflicts are properly managed.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target channel category
 * @param props.body Update data for the channel-category mapping
 * @path /shoppingMall/adminUser/channelCategories/:id
 * @accessor api.functional.shoppingMall.adminUser.channelCategories.updateChannelCategory
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateChannelCategory(
  connection: IConnection,
  props: updateChannelCategory.Props,
): Promise<updateChannelCategory.Response> {
  return true === connection.simulate
    ? updateChannelCategory.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateChannelCategory.METADATA,
          path: updateChannelCategory.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateChannelCategory {
  export type Props = {
    /** Unique identifier of the target channel category */
    id: string & tags.Format<"uuid">;

    /** Update data for the channel-category mapping */
    body: IShoppingMallChannelCategory.IUpdate;
  };
  export type Body = IShoppingMallChannelCategory.IUpdate;
  export type Response = IShoppingMallChannelCategory;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/channelCategories/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/channelCategories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallChannelCategory =>
    typia.random<IShoppingMallChannelCategory>();
  export const simulate = (
    connection: IConnection,
    props: updateChannelCategory.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateChannelCategory.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a channel category mapping permanently by ID.
 *
 * Deletes a specific channel-category mapping identified by ID.
 *
 * This removes the product category association from the specified sales
 * channel.
 *
 * Authorization is limited to administrators. The deletion is irreversible.
 *
 * No response body is returned on success.
 *
 * Errors for invalid IDs or permission issues are handled accordingly.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target channel category
 * @path /shoppingMall/adminUser/channelCategories/:id
 * @accessor api.functional.shoppingMall.adminUser.channelCategories.eraseChannelCategory
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseChannelCategory(
  connection: IConnection,
  props: eraseChannelCategory.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseChannelCategory.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseChannelCategory.METADATA,
          path: eraseChannelCategory.path(props),
          status: null,
        },
      );
}
export namespace eraseChannelCategory {
  export type Props = {
    /** Unique identifier of the target channel category */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/channelCategories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/channelCategories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseChannelCategory.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseChannelCategory.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
