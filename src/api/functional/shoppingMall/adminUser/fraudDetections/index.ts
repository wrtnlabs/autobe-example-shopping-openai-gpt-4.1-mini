import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallFraudDetection } from "../../../../structures/IShoppingMallFraudDetection";
import { IPageIShoppingMallFraudDetection } from "../../../../structures/IPageIShoppingMallFraudDetection";

/**
 * Create a new fraud detection record.
 *
 * Add a new fraud detection record capturing suspicious activity details
 * flagged by AI. Requires administrator privileges for access and validation.
 * All input fields must comply with schema constraints to correctly store the
 * detection event.
 *
 * Security is critical to prevent unauthorized creation.
 *
 * Successful creation returns the newly created object with full details.
 *
 * @param props.connection
 * @param props.body Information required to create a fraud detection record
 * @path /shoppingMall/adminUser/fraudDetections
 * @accessor api.functional.shoppingMall.adminUser.fraudDetections.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a fraud detection record */
    body: IShoppingMallFraudDetection.ICreate;
  };
  export type Body = IShoppingMallFraudDetection.ICreate;
  export type Response = IShoppingMallFraudDetection;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/fraudDetections",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/fraudDetections";
  export const random = (): IShoppingMallFraudDetection =>
    typia.random<IShoppingMallFraudDetection>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of fraud detections.
 *
 * Retrieve a filtered, pageable, and searchable list of fraud detection records
 * generated by AI systems in the shopping mall backend. The retrieved data
 * includes references to the member user flagged for potential fraud, detected
 * order if applicable, fraud detection classification, confidence scores
 * assigned by AI models, current resolution status of the fraud case, and
 * relevant timestamps.
 *
 * Security considerations include limiting access to authorized personnel such
 * as administrators and security analysts to protect sensitive detection data.
 * The response provides a paginated summary view optimized for analysis and
 * triage work.
 *
 * This operation maps directly to the shopping_mall_fraud_detections table as
 * defined in the Prisma schema, including all relevant fields to enable
 * detailed investigations. Filtering, sorting, and pagination capabilities are
 * integral to the request.
 *
 * Error cases include handling invalid filter parameters or query overload with
 * appropriate responses.
 *
 * @param props.connection
 * @param props.body Search criteria, filter, and pagination parameters for
 *   fraud detection records
 * @path /shoppingMall/adminUser/fraudDetections
 * @accessor api.functional.shoppingMall.adminUser.fraudDetections.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, filter, and pagination parameters for fraud
     * detection records
     */
    body: IShoppingMallFraudDetection.IRequest;
  };
  export type Body = IShoppingMallFraudDetection.IRequest;
  export type Response = IPageIShoppingMallFraudDetection.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/fraudDetections",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/fraudDetections";
  export const random = (): IPageIShoppingMallFraudDetection.ISummary =>
    typia.random<IPageIShoppingMallFraudDetection.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed fraud detection information.
 *
 * Fetch the detailed record of a fraud detection event by fraudDetectionId.
 * This includes all stored attributes such as the user flagged, detection type,
 * confidence score, status, resolution, and timeline data.
 *
 * Access is restricted to roles with administrative privileges due to the
 * sensitive nature of fraud data.
 *
 * The operation delivers a full resource view for use in detailed audits and
 * case management.
 *
 * @param props.connection
 * @param props.fraudDetectionId Unique identifier of the fraud detection record
 * @path /shoppingMall/adminUser/fraudDetections/:fraudDetectionId
 * @accessor api.functional.shoppingMall.adminUser.fraudDetections.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the fraud detection record */
    fraudDetectionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallFraudDetection;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/fraudDetections/:fraudDetectionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/fraudDetections/${encodeURIComponent(props.fraudDetectionId ?? "null")}`;
  export const random = (): IShoppingMallFraudDetection =>
    typia.random<IShoppingMallFraudDetection>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("fraudDetectionId")(() =>
        typia.assert(props.fraudDetectionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing fraud detection information.
 *
 * Modify an existing fraud detection record by its UUID. Requires
 * administrative access. The update can change detection classification,
 * confidence metrics, resolution progress, and additional data for ongoing case
 * management.
 *
 * Errors occur if the record does not exist or input data violates integrity
 * constraints.
 *
 * Returns the updated fraud detection entity upon success.
 *
 * @param props.connection
 * @param props.fraudDetectionId Unique identifier of the fraud detection record
 *   to update
 * @param props.body Data to update fraud detection record
 * @path /shoppingMall/adminUser/fraudDetections/:fraudDetectionId
 * @accessor api.functional.shoppingMall.adminUser.fraudDetections.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the fraud detection record to update */
    fraudDetectionId: string & tags.Format<"uuid">;

    /** Data to update fraud detection record */
    body: IShoppingMallFraudDetection.IUpdate;
  };
  export type Body = IShoppingMallFraudDetection.IUpdate;
  export type Response = IShoppingMallFraudDetection;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/fraudDetections/:fraudDetectionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/fraudDetections/${encodeURIComponent(props.fraudDetectionId ?? "null")}`;
  export const random = (): IShoppingMallFraudDetection =>
    typia.random<IShoppingMallFraudDetection>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("fraudDetectionId")(() =>
        typia.assert(props.fraudDetectionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete fraud detection record permanently.
 *
 * Permanently remove a fraud detection record by its UUID. Only administrators
 * may perform this action due to the sensitive nature of fraud data.
 *
 * The deletion is a hard delete, completely removing the record and preventing
 * recovery. Client applications should confirm this irreversible nature.
 *
 * Appropriate errors are returned if the record is not found.
 *
 * @param props.connection
 * @param props.fraudDetectionId Unique identifier of the fraud detection record
 *   to delete
 * @path /shoppingMall/adminUser/fraudDetections/:fraudDetectionId
 * @accessor api.functional.shoppingMall.adminUser.fraudDetections.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the fraud detection record to delete */
    fraudDetectionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/fraudDetections/:fraudDetectionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/fraudDetections/${encodeURIComponent(props.fraudDetectionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("fraudDetectionId")(() =>
        typia.assert(props.fraudDetectionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
