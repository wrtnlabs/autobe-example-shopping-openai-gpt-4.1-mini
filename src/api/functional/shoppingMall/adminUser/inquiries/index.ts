import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallInquiry } from "../../../../structures/IShoppingMallInquiry";
import { IPageIShoppingMallInquiry } from "../../../../structures/IPageIShoppingMallInquiry";
export * as comments from "./comments/index";

/**
 * Search and retrieve filtered list of product inquiries.
 *
 * Retrieve a paginated list of customer product inquiries with advanced
 * filtering capabilities. This operation accesses the shopping_mall_inquiries
 * table representing user inquiries related to products, capturing details such
 * as title, body, privacy settings, status, and associations with channels,
 * sections, categories, and users.
 *
 * Filtering options include channel ID, section ID, category ID, member user
 * ID, guest user ID, status, and inquiry privacy. Pagination control parameters
 * allow clients to fetch paged results efficiently.
 *
 * Security considerations enforce visibility of private inquiries only to
 * authorized roles. Results include all relevant inquiry summary information
 * for display in lists.
 *
 * This operation facilitates customer service management and oversight of
 * product inquiries within the shopping platform.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   inquiries
 * @path /shoppingMall/adminUser/inquiries
 * @accessor api.functional.shoppingMall.adminUser.inquiries.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering inquiries */
    body: IShoppingMallInquiry.IRequest;
  };
  export type Body = IShoppingMallInquiry.IRequest;
  export type Response = IPageIShoppingMallInquiry.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/inquiries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/inquiries";
  export const random = (): IPageIShoppingMallInquiry.ISummary =>
    typia.random<IPageIShoppingMallInquiry.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get product inquiry by ID.
 *
 * Retrieve detailed information of a single product inquiry by its ID. This
 * includes all inquiry properties such as title, body, privacy, status, and
 * relationship to channel, section, category, and associated users.
 *
 * Security enforces access control to private inquiries, ensuring data is
 * visible only to authorized roles including the inquiry owner and platform
 * administrators.
 *
 * This retrieval supports customer service case handling and inquiry response
 * generation.
 *
 * No request body is needed.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target inquiry
 * @path /shoppingMall/adminUser/inquiries/:id
 * @accessor api.functional.shoppingMall.adminUser.inquiries.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target inquiry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallInquiry;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/inquiries/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/inquiries/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallInquiry =>
    typia.random<IShoppingMallInquiry>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
