import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallComment } from "../../../../../structures/IShoppingMallComment";
import { IPageIShoppingMallComment } from "../../../../../structures/IPageIShoppingMallComment";

/**
 * Search comments by inquiry ID with pagination.
 *
 * Retrieve paginated comments for a specific product inquiry.
 *
 * Includes member, guest, and seller comments, structured with support for
 * nested replies and privacy controls.
 *
 * Allows status and privacy filtering as well as pagination.
 *
 * Results include comment summaries optimized for list display.
 *
 * Access control ensures private comments are only visible to authorized users.
 *
 * This supports customer service and communication workflows.
 *
 * @param props.connection
 * @param props.inquiryId Unique identifier of the parent inquiry
 * @param props.body Search parameters and pagination info for comments
 * @path /shoppingMall/adminUser/inquiries/:inquiryId/comments
 * @accessor api.functional.shoppingMall.adminUser.inquiries.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the parent inquiry */
    inquiryId: string & tags.Format<"uuid">;

    /** Search parameters and pagination info for comments */
    body: IShoppingMallComment.IRequest;
  };
  export type Body = IShoppingMallComment.IRequest;
  export type Response = IPageIShoppingMallComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/inquiries/:inquiryId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/comments`;
  export const random = (): IPageIShoppingMallComment.ISummary =>
    typia.random<IPageIShoppingMallComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get comment detail by inquiry ID and comment ID.
 *
 * Get detailed information of a specific comment by its ID and parent inquiry
 * ID.
 *
 * Information includes content, author type, privacy, status, and hierarchical
 * relationships.
 *
 * Access is limited to authorized users respecting privacy.
 *
 * Supports customer communication management.
 *
 * No request body is required.
 *
 * @param props.connection
 * @param props.inquiryId Unique identifier of the parent inquiry
 * @param props.commentId Unique identifier of the comment
 * @path /shoppingMall/adminUser/inquiries/:inquiryId/comments/:commentId
 * @accessor api.functional.shoppingMall.adminUser.inquiries.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent inquiry */
    inquiryId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallComment;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/inquiries/:inquiryId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IShoppingMallComment =>
    typia.random<IShoppingMallComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
