import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSaleOptionGroup } from "../../../../structures/IShoppingMallSaleOptionGroup";
import { IPageIShoppingMallSaleOptionGroup } from "../../../../structures/IPageIShoppingMallSaleOptionGroup";

/**
 * Create a new sale option group.
 *
 * Receives option group information and saves it to the database.
 *
 * Performs validation on input data including uniqueness of code.
 *
 * Returns the newly created option group for confirmation.
 *
 * Restricted to users with roles such as adminUser and sellerUser.
 *
 * Errors may include duplicate code or invalid input format.
 *
 * Ensures atomic creation and transactional integrity.
 *
 * @param props.connection
 * @param props.body New sale option group creation data
 * @path /shoppingMall/adminUser/saleOptionGroups
 * @accessor api.functional.shoppingMall.adminUser.saleOptionGroups.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New sale option group creation data */
    body: IShoppingMallSaleOptionGroup.ICreate;
  };
  export type Body = IShoppingMallSaleOptionGroup.ICreate;
  export type Response = IShoppingMallSaleOptionGroup;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/saleOptionGroups",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/saleOptionGroups";
  export const random = (): IShoppingMallSaleOptionGroup =>
    typia.random<IShoppingMallSaleOptionGroup>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve sale option groups list.
 *
 * Retrieve a filtered and paginated list of sale option groups.
 *
 * Supports search by code, name and status with pagination and sorting.
 *
 * Accessible by administrators and sellers for managing option groups.
 *
 * Returns summarized information about each option group for display in
 * listings.
 *
 * Useful for building UI components that allow selection or management of sale
 * option groups.
 *
 * Ensures efficient querying with appropriate indexes and filtering
 * capabilities.
 *
 * Supports empty or partial search parameters to return broad or targeted
 * results.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for sale option
 *   groups
 * @path /shoppingMall/adminUser/saleOptionGroups
 * @accessor api.functional.shoppingMall.adminUser.saleOptionGroups.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for sale option groups */
    body: IShoppingMallSaleOptionGroup.IRequest;
  };
  export type Body = IShoppingMallSaleOptionGroup.IRequest;
  export type Response = IPageIShoppingMallSaleOptionGroup.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/saleOptionGroups",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/saleOptionGroups";
  export const random = (): IPageIShoppingMallSaleOptionGroup.ISummary =>
    typia.random<IPageIShoppingMallSaleOptionGroup.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get sale option group detail by ID.
 *
 * Retrieve details of a specific sale option group by its ID.
 *
 * Includes all relevant metadata such as code, name, and timestamps.
 *
 * Required authorization ensures that only privileged users can access detailed
 * option group data.
 *
 * Useful for viewing or editing purposes in management interfaces.
 *
 * Errors will be returned if the specified option group ID does not exist.
 *
 * Security checks validate user permissions before data retrieval.
 *
 * @param props.connection
 * @param props.saleOptionGroupId Unique identifier of the sale option group to
 *   retrieve
 * @path /shoppingMall/adminUser/saleOptionGroups/:saleOptionGroupId
 * @accessor api.functional.shoppingMall.adminUser.saleOptionGroups.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the sale option group to retrieve */
    saleOptionGroupId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSaleOptionGroup;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/saleOptionGroups/:saleOptionGroupId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/saleOptionGroups/${encodeURIComponent(props.saleOptionGroupId ?? "null")}`;
  export const random = (): IShoppingMallSaleOptionGroup =>
    typia.random<IShoppingMallSaleOptionGroup>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleOptionGroupId")(() =>
        typia.assert(props.saleOptionGroupId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update sale option group by ID.
 *
 * Update sale option group details by ID.
 *
 * Allows modification of option group name, code, and other attributes.
 *
 * Requires administrator or seller authorization.
 *
 * Validation ensures data integrity and uniqueness constraints.
 *
 * Returns the updated option group object upon success.
 *
 * Errors occur if the ID does not exist or validation fails.
 *
 * Useful for managing option group lifecycle in the platform.
 *
 * @param props.connection
 * @param props.saleOptionGroupId Unique identifier of the sale option group to
 *   update
 * @param props.body Updated sale option group data
 * @path /shoppingMall/adminUser/saleOptionGroups/:saleOptionGroupId
 * @accessor api.functional.shoppingMall.adminUser.saleOptionGroups.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the sale option group to update */
    saleOptionGroupId: string & tags.Format<"uuid">;

    /** Updated sale option group data */
    body: IShoppingMallSaleOptionGroup.IUpdate;
  };
  export type Body = IShoppingMallSaleOptionGroup.IUpdate;
  export type Response = IShoppingMallSaleOptionGroup;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/saleOptionGroups/:saleOptionGroupId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/saleOptionGroups/${encodeURIComponent(props.saleOptionGroupId ?? "null")}`;
  export const random = (): IShoppingMallSaleOptionGroup =>
    typia.random<IShoppingMallSaleOptionGroup>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleOptionGroupId")(() =>
        typia.assert(props.saleOptionGroupId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete sale option group by ID.
 *
 * Delete a sale option group permanently by ID.
 *
 * This hard deletion removes all related option group data.
 *
 * Requires administrative or seller-level authorization.
 *
 * Once deleted, the action cannot be undone.
 *
 * Errors are returned if the group ID is not found.
 *
 * Ensure that dependencies such as linked sale options are handled
 * appropriately.
 *
 * Security checks prevent unauthorized deletions.
 *
 * @param props.connection
 * @param props.saleOptionGroupId Unique identifier of the sale option group to
 *   delete
 * @path /shoppingMall/adminUser/saleOptionGroups/:saleOptionGroupId
 * @accessor api.functional.shoppingMall.adminUser.saleOptionGroups.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the sale option group to delete */
    saleOptionGroupId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/saleOptionGroups/:saleOptionGroupId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/saleOptionGroups/${encodeURIComponent(props.saleOptionGroupId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleOptionGroupId")(() =>
        typia.assert(props.saleOptionGroupId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
