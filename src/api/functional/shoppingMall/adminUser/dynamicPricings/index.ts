import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallDynamicPricing } from "../../../../structures/IShoppingMallDynamicPricing";
import { IPageIShoppingMallDynamicPricing } from "../../../../structures/IPageIShoppingMallDynamicPricing";

/**
 * Create a new dynamic pricing record.
 *
 * Add a new dynamic pricing record with details about product price adjustments
 * controlled by AI models. Requires administrative access to create.
 *
 * Input must comply with schema definitions, particularly valid datetime ranges
 * and pricing values.
 *
 * Returns the created record with full details for confirmation.
 *
 * @param props.connection
 * @param props.body Data required to create a new dynamic pricing record
 * @path /shoppingMall/adminUser/dynamicPricings
 * @accessor api.functional.shoppingMall.adminUser.dynamicPricings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data required to create a new dynamic pricing record */
    body: IShoppingMallDynamicPricing.ICreate;
  };
  export type Body = IShoppingMallDynamicPricing.ICreate;
  export type Response = IShoppingMallDynamicPricing;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/dynamicPricings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/dynamicPricings";
  export const random = (): IShoppingMallDynamicPricing =>
    typia.random<IShoppingMallDynamicPricing>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve dynamic pricing records.
 *
 * Search and retrieve a paginated list of dynamic pricing adjustments applied
 * to products in the shopping mall system. Includes current pricing rule,
 * adjusted price, algorithm version, status, and effective dates.
 *
 * Restricted to authorized administrative users to prevent unauthorized price
 * changes. Supports filtering and sorting in request payload.
 *
 * Returns summary lists optimized for display and further actions.
 *
 * @param props.connection
 * @param props.body Filtering and pagination parameters for dynamic pricing
 *   search
 * @path /shoppingMall/adminUser/dynamicPricings
 * @accessor api.functional.shoppingMall.adminUser.dynamicPricings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and pagination parameters for dynamic pricing search */
    body: IShoppingMallDynamicPricing.IRequest;
  };
  export type Body = IShoppingMallDynamicPricing.IRequest;
  export type Response = IPageIShoppingMallDynamicPricing.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/dynamicPricings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/dynamicPricings";
  export const random = (): IPageIShoppingMallDynamicPricing.ISummary =>
    typia.random<IPageIShoppingMallDynamicPricing.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed dynamic pricing information.
 *
 * Fetch detailed dynamic price adjustment information for a given ID. Supports
 * administrative review and audit of AI-powered pricing strategies.
 *
 * Authorization is required as this data impacts product pricing and business
 * strategies.
 *
 * Response returns the entire dynamic pricing record.
 *
 * @param props.connection
 * @param props.dynamicPricingId Unique identifier of the dynamic pricing record
 * @path /shoppingMall/adminUser/dynamicPricings/:dynamicPricingId
 * @accessor api.functional.shoppingMall.adminUser.dynamicPricings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the dynamic pricing record */
    dynamicPricingId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallDynamicPricing;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/dynamicPricings/:dynamicPricingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/dynamicPricings/${encodeURIComponent(props.dynamicPricingId ?? "null")}`;
  export const random = (): IShoppingMallDynamicPricing =>
    typia.random<IShoppingMallDynamicPricing>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dynamicPricingId")(() =>
        typia.assert(props.dynamicPricingId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing dynamic pricing record in the shopping mall system.
 *
 * Update an existing AI-driven dynamic pricing record for a specific product.
 * This API enables authorized users to modify details related to pricing
 * adjustments calculated by AI algorithms, including the pricing rule applied,
 * adjusted price, algorithm version, status, and effective date range.
 *
 * Security considerations include role-based access control to prevent
 * unauthorized modifications that could disrupt pricing integrity.
 *
 * This operation relates directly to the shopping_mall_dynamic_pricing table
 * which tracks dynamic pricing strategies for products. Validation ensures the
 * adjusted price remains realistic and consistent with business policies.
 *
 * Typical usage involves administrators or pricing managers updating pricing
 * rules or algorithm versions reflecting marketing campaigns or seasonal
 * sales.
 *
 * Errors returned may include validation failures if dates or prices are
 * inconsistent or unauthorized access attempts.
 *
 * @param props.connection
 * @param props.dynamicPricingId Unique identifier of the dynamic pricing record
 *   to update
 * @param props.body Update payload for dynamic pricing record
 * @path /shoppingMall/adminUser/dynamicPricings/:dynamicPricingId
 * @accessor api.functional.shoppingMall.adminUser.dynamicPricings.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the dynamic pricing record to update */
    dynamicPricingId: string & tags.Format<"uuid">;

    /** Update payload for dynamic pricing record */
    body: IShoppingMallDynamicPricing.IUpdate;
  };
  export type Body = IShoppingMallDynamicPricing.IUpdate;
  export type Response = IShoppingMallDynamicPricing;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/dynamicPricings/:dynamicPricingId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/dynamicPricings/${encodeURIComponent(props.dynamicPricingId ?? "null")}`;
  export const random = (): IShoppingMallDynamicPricing =>
    typia.random<IShoppingMallDynamicPricing>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dynamicPricingId")(() =>
        typia.assert(props.dynamicPricingId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific dynamic pricing record from the shopping mall system.
 *
 * Permanently delete a specific dynamic pricing record by its unique
 * identifier. This operation irreversibly removes the entry from the database.
 *
 * Security is enforced by admin role restriction to prevent unauthorized
 * deletion.
 *
 * All related references must be managed prior to executing this deletion to
 * preserve data integrity.
 *
 * Deleting dynamic pricing records disables dynamic pricing adjustments for
 * associated products.
 *
 * @param props.connection
 * @param props.dynamicPricingId Unique identifier of the dynamic pricing record
 *   to delete
 * @path /shoppingMall/adminUser/dynamicPricings/:dynamicPricingId
 * @accessor api.functional.shoppingMall.adminUser.dynamicPricings.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the dynamic pricing record to delete */
    dynamicPricingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/dynamicPricings/:dynamicPricingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/dynamicPricings/${encodeURIComponent(props.dynamicPricingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dynamicPricingId")(() =>
        typia.assert(props.dynamicPricingId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
