import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCategory } from "../../../../structures/IShoppingMallCategory";
import { IPageIShoppingMallCategory } from "../../../../structures/IPageIShoppingMallCategory";
export * as categoryRelations from "./categoryRelations/index";

/**
 * Create product category.
 *
 * Create a new product category with specified details.
 *
 * AdminUser authorization required.
 *
 * Returns the created product category record.
 *
 * Validates uniqueness and required fields.
 *
 * @param props.connection
 * @param props.body Category creation data
 * @path /shoppingMall/adminUser/categories
 * @accessor api.functional.shoppingMall.adminUser.categories.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Category creation data */
    body: IShoppingMallCategory.ICreate;
  };
  export type Body = IShoppingMallCategory.ICreate;
  export type Response = IShoppingMallCategory;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/categories";
  export const random = (): IShoppingMallCategory =>
    typia.random<IShoppingMallCategory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search product categories with filters and pagination.
 *
 * Search and retrieve paginated product category list filtered by search
 * criteria.
 *
 * This operation supports adminUser role for category management tasks.
 *
 * Search parameters can include name filters, status and sorting options.
 *
 * Response includes paginated category summaries with essential fields.
 *
 * Invalid filter criteria should be handled gracefully.
 *
 * @param props.connection
 * @param props.body Category search filters and pagination parameters
 * @path /shoppingMall/adminUser/categories
 * @accessor api.functional.shoppingMall.adminUser.categories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Category search filters and pagination parameters */
    body: IShoppingMallCategory.IRequest;
  };
  export type Body = IShoppingMallCategory.IRequest;
  export type Response = IPageIShoppingMallCategory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/categories";
  export const random = (): IPageIShoppingMallCategory.ISummary =>
    typia.random<IPageIShoppingMallCategory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve product category by ID.
 *
 * Retrieve detailed product category by ID.
 *
 * This operation requires adminUser authorization.
 *
 * Response contains full category record data if found.
 *
 * Handles errors for missing or deleted entries appropriately.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the target product category
 * @path /shoppingMall/adminUser/categories/:categoryId
 * @accessor api.functional.shoppingMall.adminUser.categories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target product category */
    categoryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCategory;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IShoppingMallCategory =>
    typia.random<IShoppingMallCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update product category by ID with new values.
 *
 * AdminUser role authorized.
 *
 * Returns updated category record.
 *
 * Handles validation and existence checks.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the product category to update
 * @param props.body Category update data
 * @path /shoppingMall/adminUser/categories/:categoryId
 * @accessor api.functional.shoppingMall.adminUser.categories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the product category to update */
    categoryId: string & tags.Format<"uuid">;

    /** Category update data */
    body: IShoppingMallCategory.IUpdate;
  };
  export type Body = IShoppingMallCategory.IUpdate;
  export type Response = IShoppingMallCategory;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/categories/:categoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IShoppingMallCategory =>
    typia.random<IShoppingMallCategory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a product category by UUID from the shopping mall system.
 *
 * This API operation permanently removes a product category from the shopping
 * mall system, identified by the unique UUID categoryId.
 *
 * It targets the shopping_mall_categories table in the Prisma schema, which
 * stores category codes, names, status, description, and timestamps.
 *
 * Security considerations require that only users with appropriate
 * administrative or management roles can execute this deletion to prevent
 * unauthorized data loss.
 *
 * Any associated relationships, such as category relations or channel mappings,
 * must be handled appropriately by database cascade or business logic.
 *
 * This operation does not return a response body and deletes the record
 * irreversibly.
 *
 * Errors may occur if the categoryId does not exist or if deletion violates
 * relational integrity.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the target category to delete
 * @path /shoppingMall/adminUser/categories/:categoryId
 * @accessor api.functional.shoppingMall.adminUser.categories.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target category to delete */
    categoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
