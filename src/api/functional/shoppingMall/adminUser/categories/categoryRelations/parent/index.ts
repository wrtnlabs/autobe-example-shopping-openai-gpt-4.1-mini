import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCategoryRelations } from "../../../../../../structures/IShoppingMallCategoryRelations";
import { IPageIShoppingMallCategoryRelations } from "../../../../../../structures/IPageIShoppingMallCategoryRelations";

/**
 * Create a new parent category relation for a category.
 *
 * Create a new parent category relation for the category identified by
 * categoryId.
 *
 * This inserts a new record into the shopping_mall_category_relations table
 * linking parent and child categories.
 *
 * Request body must supply all necessary attributes to define this relation.
 *
 * Only admin users can perform this operation.
 *
 * The created entity with full detail will be returned.
 *
 * Errors may arise upon invalid data or existing relation conflicts.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the child category
 * @param props.body Information required to create a parent category relation
 * @path /shoppingMall/adminUser/categories/:categoryId/categoryRelations/parent
 * @accessor api.functional.shoppingMall.adminUser.categories.categoryRelations.parent.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the child category */
    categoryId: string & tags.Format<"uuid">;

    /** Information required to create a parent category relation */
    body: IShoppingMallCategoryRelations.ICreate;
  };
  export type Body = IShoppingMallCategoryRelations.ICreate;
  export type Response = IShoppingMallCategoryRelations;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/categories/:categoryId/categoryRelations/parent",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/categories/${encodeURIComponent(props.categoryId ?? "null")}/categoryRelations/parent`;
  export const random = (): IShoppingMallCategoryRelations =>
    typia.random<IShoppingMallCategoryRelations>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List parent category relations for a given category with filters and
 * pagination.
 *
 * Retrieve a filtered, paginated list of parent category relations for a
 * specific category, identified by categoryId.
 *
 * This relates to the shopping_mall_category_relations table, specifically
 * retrieving relations where the target category is the child, and the parents
 * are listed.
 *
 * Support advanced search filters, sorting, and pagination to enable efficient
 * navigation of category hierarchies.
 *
 * Access is restricted to authorized administrative users to maintain data
 * integrity.
 *
 * The response provides summarized information about each parent-child
 * relationship, including timestamps and relational context.
 *
 * Errors occur on invalid categoryId or unauthorized access.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the category for which to
 *   retrieve parent relations
 * @param props.body Filter, search, and pagination parameters for parent
 *   category relation retrieval
 * @path /shoppingMall/adminUser/categories/:categoryId/categoryRelations/parent
 * @accessor api.functional.shoppingMall.adminUser.categories.categoryRelations.parent.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the category for which to retrieve parent
     * relations
     */
    categoryId: string & tags.Format<"uuid">;

    /**
     * Filter, search, and pagination parameters for parent category
     * relation retrieval
     */
    body: IShoppingMallCategoryRelations.IRequest;
  };
  export type Body = IShoppingMallCategoryRelations.IRequest;
  export type Response = IPageIShoppingMallCategoryRelations.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/categories/:categoryId/categoryRelations/parent",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/categories/${encodeURIComponent(props.categoryId ?? "null")}/categoryRelations/parent`;
  export const random = (): IPageIShoppingMallCategoryRelations.ISummary =>
    typia.random<IPageIShoppingMallCategoryRelations.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get specific parent category relation details by relation ID.
 *
 * Retrieve detailed information for a specific parent category relation
 * identified by relationId belonging to categoryId.
 *
 * This corresponds to a single record in the shopping_mall_category_relations
 * table, representing the hierarchical link between parent and child
 * categories.
 *
 * Only users with admin role can access this data.
 *
 * The response contains all relation properties with timestamps for audit and
 * management.
 *
 * Errors may occur if parameters are invalid or relation does not exist.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the child category
 * @param props.relationId Unique identifier of the parent category relation
 * @path /shoppingMall/adminUser/categories/:categoryId/categoryRelations/parent/:relationId
 * @accessor api.functional.shoppingMall.adminUser.categories.categoryRelations.parent.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the child category */
    categoryId: string & tags.Format<"uuid">;

    /** Unique identifier of the parent category relation */
    relationId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCategoryRelations;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/categories/:categoryId/categoryRelations/parent/:relationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/categories/${encodeURIComponent(props.categoryId ?? "null")}/categoryRelations/parent/${encodeURIComponent(props.relationId ?? "null")}`;
  export const random = (): IShoppingMallCategoryRelations =>
    typia.random<IShoppingMallCategoryRelations>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.param("relationId")(() => typia.assert(props.relationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a parent category relation by relation ID.
 *
 * Update an existing parent category relation identified by relationId for
 * category categoryId.
 *
 * This updates fields in the shopping_mall_category_relations record.
 *
 * Admin role is required for authorization.
 *
 * Returns the updated relation object including timestamps.
 *
 * Validation errors or missing entity result in error responses.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the child category
 * @param props.relationId Unique identifier of the parent category relation
 * @param props.body Fields for updating a parent category relation
 * @path /shoppingMall/adminUser/categories/:categoryId/categoryRelations/parent/:relationId
 * @accessor api.functional.shoppingMall.adminUser.categories.categoryRelations.parent.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the child category */
    categoryId: string & tags.Format<"uuid">;

    /** Unique identifier of the parent category relation */
    relationId: string & tags.Format<"uuid">;

    /** Fields for updating a parent category relation */
    body: IShoppingMallCategoryRelations.IUpdate;
  };
  export type Body = IShoppingMallCategoryRelations.IUpdate;
  export type Response = IShoppingMallCategoryRelations;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/categories/:categoryId/categoryRelations/parent/:relationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/categories/${encodeURIComponent(props.categoryId ?? "null")}/categoryRelations/parent/${encodeURIComponent(props.relationId ?? "null")}`;
  export const random = (): IShoppingMallCategoryRelations =>
    typia.random<IShoppingMallCategoryRelations>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.param("relationId")(() => typia.assert(props.relationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a parent category relation by relation ID.
 *
 * Delete a specific parent category relation by relationId for the given
 * categoryId.
 *
 * Operates on the shopping_mall_category_relations table to remove hierarchical
 * links.
 *
 * Requires admin authorization.
 *
 * No content returned upon successful deletion.
 *
 * Errors on invalid IDs or access violations.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the child category
 * @param props.relationId Unique identifier of the parent category relation
 * @path /shoppingMall/adminUser/categories/:categoryId/categoryRelations/parent/:relationId
 * @accessor api.functional.shoppingMall.adminUser.categories.categoryRelations.parent.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the child category */
    categoryId: string & tags.Format<"uuid">;

    /** Unique identifier of the parent category relation */
    relationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/categories/:categoryId/categoryRelations/parent/:relationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/categories/${encodeURIComponent(props.categoryId ?? "null")}/categoryRelations/parent/${encodeURIComponent(props.relationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.param("relationId")(() => typia.assert(props.relationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
