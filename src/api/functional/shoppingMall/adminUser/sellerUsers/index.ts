import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSellerUser } from "../../../../structures/IShoppingMallSellerUser";
import { IPageIShoppingMallSellerUser } from "../../../../structures/IPageIShoppingMallSellerUser";

/**
 * Search and retrieve a filtered, paginated list of shopping mall seller users.
 *
 * Retrieve a filtered and paginated list of shopping mall seller users. Enables
 * administrative or reporting features to manage sellers effectively.
 *
 * Security restrictions apply to protect seller privacy and sensitive business
 * information.
 *
 * This operates on shopping_mall_sellerusers table with its indexed fields for
 * performance.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for seller user
 *   filtering
 * @path /shoppingMall/adminUser/sellerUsers
 * @accessor api.functional.shoppingMall.adminUser.sellerUsers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for seller user filtering */
    body: IShoppingMallSellerUser.IRequest;
  };
  export type Body = IShoppingMallSellerUser.IRequest;
  export type Response = IPageIShoppingMallSellerUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/sellerUsers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/sellerUsers";
  export const random = (): IPageIShoppingMallSellerUser.ISummary =>
    typia.random<IPageIShoppingMallSellerUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a shopping mall seller user by ID.
 *
 * Retrieve detailed information for a specific shopping mall seller user by ID.
 * Intended for administrative use and detailed profile management.
 *
 * Access is limited to authorized roles to safeguard sensitive business data.
 *
 * The response excludes secure authentication hashes but provides all essential
 * seller details.
 *
 * Useful for seller management and verification workflows.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target seller user
 * @path /shoppingMall/adminUser/sellerUsers/:id
 * @accessor api.functional.shoppingMall.adminUser.sellerUsers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target seller user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSellerUser;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/sellerUsers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/sellerUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallSellerUser =>
    typia.random<IShoppingMallSellerUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing shopping mall seller user by ID.
 *
 * Update specific information of a shopping mall seller user by ID. This
 * operation ensures authorized users can modify seller profiles safely without
 * exposing sensitive authentication credentials.
 *
 * The update request is validated against the schema's allowable update fields.
 *
 * Returns the updated seller user record upon success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target seller user
 * @param props.body Update data for the seller user
 * @path /shoppingMall/adminUser/sellerUsers/:id
 * @accessor api.functional.shoppingMall.adminUser.sellerUsers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target seller user */
    id: string & tags.Format<"uuid">;

    /** Update data for the seller user */
    body: IShoppingMallSellerUser.IUpdate;
  };
  export type Body = IShoppingMallSellerUser.IUpdate;
  export type Response = IShoppingMallSellerUser;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/sellerUsers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/sellerUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallSellerUser =>
    typia.random<IShoppingMallSellerUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a shopping mall seller user by ID.
 *
 * Soft delete a shopping mall seller user specified by ID. The operation
 * performs a logical deletion to retain audit trails while hiding the seller
 * from active queries.
 *
 * Administrator role required for sensitive data manipulation.
 *
 * Soft deletion ensures compliance with data retention policies.
 *
 * Deleted sellers will be excluded from general listings.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target seller user
 * @path /shoppingMall/adminUser/sellerUsers/:id
 * @accessor api.functional.shoppingMall.adminUser.sellerUsers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target seller user */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/sellerUsers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/sellerUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
