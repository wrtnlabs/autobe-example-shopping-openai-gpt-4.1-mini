import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSentimentAnalysis } from "../../../../structures/IShoppingMallSentimentAnalysis";
import { IPageIShoppingMallSentimentAnalysis } from "../../../../structures/IPageIShoppingMallSentimentAnalysis";

/**
 * Create a new customer sentiment analysis record.
 *
 * Create a new sentiment analysis record storing AI-generated customer
 * sentiment data. This API accepts detailed sentiment scoring and text input
 * linked to users and products.
 *
 * Access control requires administrative privileges. Validation enforces data
 * completeness and consistency.
 *
 * Use this operation to add fresh AI analysis results for business insights and
 * machine learning feedback.
 *
 * Errors include invalid data, missing foreign keys, or unauthorized access.
 *
 * @param props.connection
 * @param props.body Information needed to create a sentiment analysis record
 * @path /shoppingMall/adminUser/sentimentAnalysis
 * @accessor api.functional.shoppingMall.adminUser.sentimentAnalysis.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information needed to create a sentiment analysis record */
    body: IShoppingMallSentimentAnalysis.ICreate;
  };
  export type Body = IShoppingMallSentimentAnalysis.ICreate;
  export type Response = IShoppingMallSentimentAnalysis;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/sentimentAnalysis",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/sentimentAnalysis";
  export const random = (): IShoppingMallSentimentAnalysis =>
    typia.random<IShoppingMallSentimentAnalysis>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated, filtered list of shopping mall customer sentiment
 * analyses.
 *
 * Retrieve a paginated and filtered list of customer sentiment analyses
 * generated by AI models. This API supports querying records based on sentiment
 * categories, score ranges, product IDs, dates, and user filters.
 *
 * Security rules limit access to users with appropriate roles.
 *
 * The shopping_mall_sentiment_analysis table contains AI-derived sentiment data
 * linked to product and customer. This supports decision making in marketing
 * and product management.
 *
 * Typical use case includes analytics dashboards or reports extracting
 * sentiment trends and distributions.
 *
 * Errors may occur if filters are invalid or unauthorized access is detected.
 *
 * @param props.connection
 * @param props.body Filter and pagination parameters for customer sentiment
 *   queries
 * @path /shoppingMall/adminUser/sentimentAnalysis
 * @accessor api.functional.shoppingMall.adminUser.sentimentAnalysis.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter and pagination parameters for customer sentiment queries */
    body: IShoppingMallSentimentAnalysis.IRequest;
  };
  export type Body = IShoppingMallSentimentAnalysis.IRequest;
  export type Response = IPageIShoppingMallSentimentAnalysis.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/sentimentAnalysis",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/sentimentAnalysis";
  export const random = (): IPageIShoppingMallSentimentAnalysis.ISummary =>
    typia.random<IPageIShoppingMallSentimentAnalysis.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific customer sentiment analysis record by ID.
 *
 * Get detailed information for a single customer sentiment analysis record by
 * its unique identifier.
 *
 * View includes sentiment score, category, original text analyzed, and
 * contextual metadata.
 *
 * Operation is restricted to authorized roles ensuring data confidentiality.
 *
 * This supports detailed analytics and troubleshooting of AI sentiment model
 * outputs.
 *
 * Errors handled include invalid ID format, missing records, or access
 * violations.
 *
 * @param props.connection
 * @param props.sentimentAnalysisId Unique ID of the sentiment analysis record
 *   to retrieve
 * @path /shoppingMall/adminUser/sentimentAnalysis/:sentimentAnalysisId
 * @accessor api.functional.shoppingMall.adminUser.sentimentAnalysis.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique ID of the sentiment analysis record to retrieve */
    sentimentAnalysisId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSentimentAnalysis;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/sentimentAnalysis/:sentimentAnalysisId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/sentimentAnalysis/${encodeURIComponent(props.sentimentAnalysisId ?? "null")}`;
  export const random = (): IShoppingMallSentimentAnalysis =>
    typia.random<IShoppingMallSentimentAnalysis>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sentimentAnalysisId")(() =>
        typia.assert(props.sentimentAnalysisId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing sentiment analysis record.
 *
 * Update a sentiment analysis record identified by its unique ID. Modify fields
 * such as sentiment score, sentiment category, source text, and analysis date.
 *
 * Restricted to adminUser users for security.
 *
 * Supports correction or enhancement of previously stored sentiment results.
 *
 * Errors handled include invalid parameters, permissions, or record absence.
 *
 * @param props.connection
 * @param props.sentimentAnalysisId Unique ID of the sentiment analysis record
 *   to update
 * @param props.body Updated data for sentiment analysis record
 * @path /shoppingMall/adminUser/sentimentAnalysis/:sentimentAnalysisId
 * @accessor api.functional.shoppingMall.adminUser.sentimentAnalysis.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique ID of the sentiment analysis record to update */
    sentimentAnalysisId: string & tags.Format<"uuid">;

    /** Updated data for sentiment analysis record */
    body: IShoppingMallSentimentAnalysis.IUpdate;
  };
  export type Body = IShoppingMallSentimentAnalysis.IUpdate;
  export type Response = IShoppingMallSentimentAnalysis;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/sentimentAnalysis/:sentimentAnalysisId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/sentimentAnalysis/${encodeURIComponent(props.sentimentAnalysisId ?? "null")}`;
  export const random = (): IShoppingMallSentimentAnalysis =>
    typia.random<IShoppingMallSentimentAnalysis>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sentimentAnalysisId")(() =>
        typia.assert(props.sentimentAnalysisId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific sentiment analysis record from the shopping mall system.
 *
 * Permanently delete a specific sentiment analysis record identified by ID from
 * the shopping mall system.
 *
 * This is a hard delete action removing the record completely.
 *
 * Authorized only for adminUser roles to prevent data loss.
 *
 * Ensure this operation is used cautiously when cleaning up obsolete or
 * incorrect data.
 *
 * @param props.connection
 * @param props.sentimentAnalysisId Unique ID of the sentiment analysis record
 *   to delete
 * @path /shoppingMall/adminUser/sentimentAnalysis/:sentimentAnalysisId
 * @accessor api.functional.shoppingMall.adminUser.sentimentAnalysis.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique ID of the sentiment analysis record to delete */
    sentimentAnalysisId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/sentimentAnalysis/:sentimentAnalysisId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/sentimentAnalysis/${encodeURIComponent(props.sentimentAnalysisId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sentimentAnalysisId")(() =>
        typia.assert(props.sentimentAnalysisId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
