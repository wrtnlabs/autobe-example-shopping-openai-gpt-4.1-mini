import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallMemberUser } from "../../../../structures/IShoppingMallMemberUser";
import { IPageIShoppingMallMemberUser } from "../../../../structures/IPageIShoppingMallMemberUser";

/**
 * Search and retrieve a filtered, paginated list of shopping mall member users.
 *
 * Retrieve a filtered and paginated list of shopping mall member users. This
 * operation enables administrators and user service systems to search, filter,
 * and sort registered members by various criteria including email, nickname,
 * status, and creation date.
 *
 * Security considerations include restricting access to authorized roles due to
 * personal and sensitive data involved. Returned data includes essential member
 * attributes but omits sensitive password hashes for security.
 *
 * This operation interacts with the shopping_mall_memberusers table, respecting
 * its schema and indexing to optimize query performance.
 *
 * Typical usage includes member management dashboards, reporting tools, and
 * bulk user operations.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for member user
 *   filtering
 * @path /shoppingMall/adminUser/memberUsers
 * @accessor api.functional.shoppingMall.adminUser.memberUsers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for member user filtering */
    body: IShoppingMallMemberUser.IRequest;
  };
  export type Body = IShoppingMallMemberUser.IRequest;
  export type Response = IPageIShoppingMallMemberUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/memberUsers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/memberUsers";
  export const random = (): IPageIShoppingMallMemberUser.ISummary =>
    typia.random<IPageIShoppingMallMemberUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a shopping mall member user by ID.
 *
 * Retrieve detailed information for a specific shopping mall member user by ID.
 * This operation is intended for administrative use or user profile access
 * where detailed member information is necessary.
 *
 * Security is critical; access should be limited to authorized roles only to
 * protect personally identifiable information.
 *
 * Data returned matches the shopping_mall_memberusers table schema, excluding
 * password_hash for security.
 *
 * Use this endpoint to view or edit member details.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target member user
 * @path /shoppingMall/adminUser/memberUsers/:id
 * @accessor api.functional.shoppingMall.adminUser.memberUsers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target member user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallMemberUser;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/memberUsers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/memberUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallMemberUser =>
    typia.random<IShoppingMallMemberUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing shopping mall member user by ID.
 *
 * Update specific properties of a shopping mall member user identified by ID.
 * This operation is used for modifying member profile data without exposing
 * sensitive authentication data.
 *
 * Only authorized roles can perform this operation to ensure proper access
 * control.
 *
 * Input data conforms to the shopping_mall_memberusers schema's update fields.
 *
 * Successful updates return the updated member user record.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target member user
 * @param props.body Update data for the member user
 * @path /shoppingMall/adminUser/memberUsers/:id
 * @accessor api.functional.shoppingMall.adminUser.memberUsers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target member user */
    id: string & tags.Format<"uuid">;

    /** Update data for the member user */
    body: IShoppingMallMemberUser.IUpdate;
  };
  export type Body = IShoppingMallMemberUser.IUpdate;
  export type Response = IShoppingMallMemberUser;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/memberUsers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/memberUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallMemberUser =>
    typia.random<IShoppingMallMemberUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a shopping mall member user by ID.
 *
 * Soft delete a shopping mall member user identified by ID. This operation
 * marks the member user as deleted by setting the deletion timestamp,
 * preserving data integrity and audit trails.
 *
 * Only administrators have access to perform this sensitive operation.
 *
 * The system prevents accidental data loss by using logical deletion.
 *
 * Deleted member users will no longer appear in active user queries.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target member user
 * @path /shoppingMall/adminUser/memberUsers/:id
 * @accessor api.functional.shoppingMall.adminUser.memberUsers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target member user */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/memberUsers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/memberUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
