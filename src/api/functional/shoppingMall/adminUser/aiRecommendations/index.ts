import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiRecommendation } from "../../../../structures/IShoppingMallAiRecommendation";

/**
 * Create a new AI recommendation record based on user or system data.
 *
 * Only authorized system processes or admins may create records.
 *
 * Validates input data including user reference, recommendation type, algorithm
 * version, and payload.
 *
 * Errors occur with invalid input or insufficient permissions.
 *
 * @param props.connection
 * @param props.body AI recommendation creation data
 * @path /shoppingMall/adminUser/aiRecommendations
 * @accessor api.functional.shoppingMall.adminUser.aiRecommendations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** AI recommendation creation data */
    body: IShoppingMallAiRecommendation.ICreate;
  };
  export type Body = IShoppingMallAiRecommendation.ICreate;
  export type Response = IShoppingMallAiRecommendation;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/aiRecommendations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/aiRecommendations";
  export const random = (): IShoppingMallAiRecommendation =>
    typia.random<IShoppingMallAiRecommendation>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update AI recommendation record by ID.
 *
 * Update an existing AI-powered recommendation record by its ID.
 *
 * AdminUser-only access to enforce AI data consistency.
 *
 * Input is validated against creation/update schemas.
 *
 * Errors for missing or invalid IDs, or insufficient permissions.
 *
 * @param props.connection
 * @param props.aiRecommendationId ID of the AI recommendation to update
 * @param props.body AI recommendation updated field values
 * @path /shoppingMall/adminUser/aiRecommendations/:aiRecommendationId
 * @accessor api.functional.shoppingMall.adminUser.aiRecommendations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the AI recommendation to update */
    aiRecommendationId: string & tags.Format<"uuid">;

    /** AI recommendation updated field values */
    body: IShoppingMallAiRecommendation.IUpdate;
  };
  export type Body = IShoppingMallAiRecommendation.IUpdate;
  export type Response = IShoppingMallAiRecommendation;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/aiRecommendations/:aiRecommendationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/aiRecommendations/${encodeURIComponent(props.aiRecommendationId ?? "null")}`;
  export const random = (): IShoppingMallAiRecommendation =>
    typia.random<IShoppingMallAiRecommendation>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("aiRecommendationId")(() =>
        typia.assert(props.aiRecommendationId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete AI recommendation record by ID.
 *
 * Delete an AI recommendation record permanently by its ID.
 *
 * This operation performs a hard delete without soft deletion.
 *
 * AdminUser authorization is mandatory for this critical operation.
 *
 * No response body is returned upon success.
 *
 * @param props.connection
 * @param props.aiRecommendationId ID of the AI recommendation to delete
 * @path /shoppingMall/adminUser/aiRecommendations/:aiRecommendationId
 * @accessor api.functional.shoppingMall.adminUser.aiRecommendations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the AI recommendation to delete */
    aiRecommendationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/aiRecommendations/:aiRecommendationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/aiRecommendations/${encodeURIComponent(props.aiRecommendationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("aiRecommendationId")(() =>
        typia.assert(props.aiRecommendationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
