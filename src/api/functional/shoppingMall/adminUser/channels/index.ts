import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallChannel } from "../../../../structures/IShoppingMallChannel";
import { IPageIShoppingMallChannel } from "../../../../structures/IPageIShoppingMallChannel";

/**
 * Create a new shopping mall sales channel.
 *
 * Create a new sales channel in the shopping mall backend.
 *
 * Required data includes unique code, name, optional description, and current
 * status.
 *
 * Only adminUser may perform this operation.
 *
 * Validation ensures all required fields are present and code uniqueness is
 * enforced.
 *
 * Successfully created channel data is returned.
 *
 * @param props.connection
 * @param props.body New channel data to be created
 * @path /shoppingMall/adminUser/channels
 * @accessor api.functional.shoppingMall.adminUser.channels.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New channel data to be created */
    body: IShoppingMallChannel.ICreate;
  };
  export type Body = IShoppingMallChannel.ICreate;
  export type Response = IShoppingMallChannel;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/channels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/channels";
  export const random = (): IShoppingMallChannel =>
    typia.random<IShoppingMallChannel>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a list of shopping mall sales channels with filtering and
 * pagination.
 *
 * Retrieve a paginated list of shopping mall sales channels.
 *
 * This operation supports filtering by various criteria such as status, name,
 * and creation date, allowing administrators to efficiently browse large
 * numbers of channels. The response provides concise channel summaries with
 * essential attributes.
 *
 * Only users with adminUser role are authorized to access this data.
 *
 * Validation ensures correct pagination and filter criteria format to prevent
 * abuse or errors.
 *
 * @param props.connection
 * @param props.body Request parameters for filtering, sorting, and pagination
 *   of channels
 * @path /shoppingMall/adminUser/channels
 * @accessor api.functional.shoppingMall.adminUser.channels.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Request parameters for filtering, sorting, and pagination of channels */
    body: IShoppingMallChannel.IRequest;
  };
  export type Body = IShoppingMallChannel.IRequest;
  export type Response = IPageIShoppingMallChannel.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/channels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/channels";
  export const random = (): IPageIShoppingMallChannel.ISummary =>
    typia.random<IPageIShoppingMallChannel.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a sales channel by ID.
 *
 * Retrieve detailed information for a specific sales channel by its unique ID
 * (UUID).
 *
 * Access to this operation is restricted to adminUser.
 *
 * It fetches all fields from the shopping_mall_channels entity and returns them
 * in full detail.
 *
 * Request validation includes ensuring the ID is in proper UUID format.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target shopping mall sales channel
 * @path /shoppingMall/adminUser/channels/:id
 * @accessor api.functional.shoppingMall.adminUser.channels.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target shopping mall sales channel */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallChannel;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/channels/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/channels/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallChannel =>
    typia.random<IShoppingMallChannel>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing shopping mall sales channel.
 *
 * Update details of an existing sales channel using its UUID.
 *
 * AdminUser are authorized to perform this operation.
 *
 * Validation ensures the channel exists, the code remains unique, and updated
 * status values are valid.
 *
 * Returns the updated channel information on success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the sales channel to update
 * @param props.body Updated data for the sales channel
 * @path /shoppingMall/adminUser/channels/:id
 * @accessor api.functional.shoppingMall.adminUser.channels.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the sales channel to update */
    id: string & tags.Format<"uuid">;

    /** Updated data for the sales channel */
    body: IShoppingMallChannel.IUpdate;
  };
  export type Body = IShoppingMallChannel.IUpdate;
  export type Response = IShoppingMallChannel;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/channels/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/channels/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallChannel =>
    typia.random<IShoppingMallChannel>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a shopping mall sales channel by ID (soft delete).
 *
 * Delete a sales channel from the shopping mall platform identified by its
 * UUID.
 *
 * This operation marks the channel as deleted by setting the deleted_at
 * timestamp (soft delete).
 *
 * Only adminUser are authorized to execute this operation.
 *
 * Validation checks ensure the provided ID is a valid UUID and the channel
 * exists.
 *
 * No response content is returned upon successful deletion.
 *
 * @param props.connection
 * @param props.id Unique identifier of the sales channel to delete
 * @path /shoppingMall/adminUser/channels/:id
 * @accessor api.functional.shoppingMall.adminUser.channels.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the sales channel to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/channels/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/channels/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
