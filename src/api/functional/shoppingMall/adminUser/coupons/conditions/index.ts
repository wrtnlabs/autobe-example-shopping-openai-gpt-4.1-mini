import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCouponCondition } from "../../../../../structures/IShoppingMallCouponCondition";
import { IPageIShoppingMallCouponCondition } from "../../../../../structures/IPageIShoppingMallCouponCondition";

/**
 * Create coupon condition record.
 *
 * Create a new coupon condition record associated with a specific coupon.
 * Defines inclusion/exclusion rules for products, sections, or categories for
 * promotion application.
 *
 * The operation is restricted to 'adminUser' for promotional integrity.
 *
 * Returns the newly created coupon condition object conforming to the schema.
 *
 * @param props.connection
 * @param props.couponId Target coupon's UUID identifier
 * @param props.body Payload for coupon condition creation
 * @path /shoppingMall/adminUser/coupons/:couponId/conditions
 * @accessor api.functional.shoppingMall.adminUser.coupons.conditions.createCouponCondition
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createCouponCondition(
  connection: IConnection,
  props: createCouponCondition.Props,
): Promise<createCouponCondition.Response> {
  return true === connection.simulate
    ? createCouponCondition.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createCouponCondition.METADATA,
          path: createCouponCondition.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createCouponCondition {
  export type Props = {
    /** Target coupon's UUID identifier */
    couponId: string & tags.Format<"uuid">;

    /** Payload for coupon condition creation */
    body: IShoppingMallCouponCondition.ICreate;
  };
  export type Body = IShoppingMallCouponCondition.ICreate;
  export type Response = IShoppingMallCouponCondition;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/coupons/:couponId/conditions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/coupons/${encodeURIComponent(props.couponId ?? "null")}/conditions`;
  export const random = (): IShoppingMallCouponCondition =>
    typia.random<IShoppingMallCouponCondition>();
  export const simulate = (
    connection: IConnection,
    props: createCouponCondition.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createCouponCondition.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search coupon conditions by couponId.
 *
 * Search for coupon conditions associated with a coupon specified by couponId.
 * Supports detailed filter, search, and pagination parameters in request body
 * for fine-grained query of conditions affecting promotion logic.
 *
 * Endpoint is accessible only by users with the 'adminUser' role to maintain
 * control over promotional system configurations.
 *
 * Response includes paginated lists of coupon condition summaries matching
 * criteria.
 *
 * @param props.connection
 * @param props.couponId Target coupon's UUID identifier
 * @param props.body Filter and paginate coupon conditions
 * @path /shoppingMall/adminUser/coupons/:couponId/conditions
 * @accessor api.functional.shoppingMall.adminUser.coupons.conditions.searchCouponConditions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchCouponConditions(
  connection: IConnection,
  props: searchCouponConditions.Props,
): Promise<searchCouponConditions.Response> {
  return true === connection.simulate
    ? searchCouponConditions.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchCouponConditions.METADATA,
          path: searchCouponConditions.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace searchCouponConditions {
  export type Props = {
    /** Target coupon's UUID identifier */
    couponId: string & tags.Format<"uuid">;

    /** Filter and paginate coupon conditions */
    body: IShoppingMallCouponCondition.IRequest;
  };
  export type Body = IShoppingMallCouponCondition.IRequest;
  export type Response = IPageIShoppingMallCouponCondition.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/coupons/:couponId/conditions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/coupons/${encodeURIComponent(props.couponId ?? "null")}/conditions`;
  export const random = (): IPageIShoppingMallCouponCondition.ISummary =>
    typia.random<IPageIShoppingMallCouponCondition.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchCouponConditions.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchCouponConditions.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve coupon condition details.
 *
 * Retrieve detailed information for a specific coupon condition identified by
 * couponId and conditionId. Allows examination of promotion applicability rules
 * for individual coupons.
 *
 * Access restricted to 'adminUser' role users for security.
 *
 * Returns full coupon condition data structure matching the Prisma schema.
 *
 * @param props.connection
 * @param props.couponId Target coupon's UUID identifier
 * @param props.conditionId Target coupon condition's UUID identifier
 * @path /shoppingMall/adminUser/coupons/:couponId/conditions/:conditionId
 * @accessor api.functional.shoppingMall.adminUser.coupons.conditions.atCouponCondition
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atCouponCondition(
  connection: IConnection,
  props: atCouponCondition.Props,
): Promise<atCouponCondition.Response> {
  return true === connection.simulate
    ? atCouponCondition.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atCouponCondition.METADATA,
          path: atCouponCondition.path(props),
          status: null,
        },
      );
}
export namespace atCouponCondition {
  export type Props = {
    /** Target coupon's UUID identifier */
    couponId: string & tags.Format<"uuid">;

    /** Target coupon condition's UUID identifier */
    conditionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCouponCondition;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/coupons/:couponId/conditions/:conditionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/coupons/${encodeURIComponent(props.couponId ?? "null")}/conditions/${encodeURIComponent(props.conditionId ?? "null")}`;
  export const random = (): IShoppingMallCouponCondition =>
    typia.random<IShoppingMallCouponCondition>();
  export const simulate = (
    connection: IConnection,
    props: atCouponCondition.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atCouponCondition.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("conditionId")(() => typia.assert(props.conditionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update coupon condition record.
 *
 * Update existing coupon condition details given couponId and conditionId.
 * Supports modifications to condition attributes and applicability parameters.
 *
 * Restricted to 'adminUser' role for maintaining promotional system security.
 *
 * Returns updated coupon condition entity after successful modification.
 *
 * @param props.connection
 * @param props.couponId Target coupon's UUID identifier
 * @param props.conditionId Target coupon condition's UUID identifier
 * @param props.body Payload for coupon condition update
 * @path /shoppingMall/adminUser/coupons/:couponId/conditions/:conditionId
 * @accessor api.functional.shoppingMall.adminUser.coupons.conditions.updateCouponCondition
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateCouponCondition(
  connection: IConnection,
  props: updateCouponCondition.Props,
): Promise<updateCouponCondition.Response> {
  return true === connection.simulate
    ? updateCouponCondition.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateCouponCondition.METADATA,
          path: updateCouponCondition.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateCouponCondition {
  export type Props = {
    /** Target coupon's UUID identifier */
    couponId: string & tags.Format<"uuid">;

    /** Target coupon condition's UUID identifier */
    conditionId: string & tags.Format<"uuid">;

    /** Payload for coupon condition update */
    body: IShoppingMallCouponCondition.IUpdate;
  };
  export type Body = IShoppingMallCouponCondition.IUpdate;
  export type Response = IShoppingMallCouponCondition;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/coupons/:couponId/conditions/:conditionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/coupons/${encodeURIComponent(props.couponId ?? "null")}/conditions/${encodeURIComponent(props.conditionId ?? "null")}`;
  export const random = (): IShoppingMallCouponCondition =>
    typia.random<IShoppingMallCouponCondition>();
  export const simulate = (
    connection: IConnection,
    props: updateCouponCondition.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateCouponCondition.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("conditionId")(() => typia.assert(props.conditionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete coupon condition record.
 *
 * Delete an existing coupon condition record by couponId and conditionId. This
 * hard delete removes the condition permanently from the system.
 *
 * Accessible only to 'adminUser' to secure promo logic stability.
 *
 * No return body is provided upon successful deletion.
 *
 * @param props.connection
 * @param props.couponId Target coupon's UUID identifier
 * @param props.conditionId Target coupon condition's UUID identifier
 * @path /shoppingMall/adminUser/coupons/:couponId/conditions/:conditionId
 * @accessor api.functional.shoppingMall.adminUser.coupons.conditions.eraseCouponCondition
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseCouponCondition(
  connection: IConnection,
  props: eraseCouponCondition.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseCouponCondition.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseCouponCondition.METADATA,
          path: eraseCouponCondition.path(props),
          status: null,
        },
      );
}
export namespace eraseCouponCondition {
  export type Props = {
    /** Target coupon's UUID identifier */
    couponId: string & tags.Format<"uuid">;

    /** Target coupon condition's UUID identifier */
    conditionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/coupons/:couponId/conditions/:conditionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/coupons/${encodeURIComponent(props.couponId ?? "null")}/conditions/${encodeURIComponent(props.conditionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseCouponCondition.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseCouponCondition.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("conditionId")(() => typia.assert(props.conditionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
