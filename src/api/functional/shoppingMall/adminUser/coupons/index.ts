import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCoupon } from "../../../../structures/IShoppingMallCoupon";
import { IPageIShoppingMallCoupon } from "../../../../structures/IPageIShoppingMallCoupon";
export * as conditions from "./conditions/index";

/**
 * Create a new coupon promotion with details such as channel association,
 * coupon code, discount specifics, validity period, usage limits, and status.
 * This operation delivers controlled creation for marketing campaigns in the
 * shopping mall platform.
 *
 * The coupon entity corresponds to the shopping_mall_coupons table in the
 * Prisma schema. Only users with adminUser role can execute this operation to
 * maintain promotional integrity.
 *
 * The created coupon entity is returned for confirmation and future operations.
 *
 * @param props.connection
 * @param props.body Payload structure for new coupon creation
 * @path /shoppingMall/adminUser/coupons
 * @accessor api.functional.shoppingMall.adminUser.coupons.createCoupon
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createCoupon(
  connection: IConnection,
  props: createCoupon.Props,
): Promise<createCoupon.Response> {
  return true === connection.simulate
    ? createCoupon.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createCoupon.METADATA,
          path: createCoupon.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createCoupon {
  export type Props = {
    /** Payload structure for new coupon creation */
    body: IShoppingMallCoupon.ICreate;
  };
  export type Body = IShoppingMallCoupon.ICreate;
  export type Response = IShoppingMallCoupon;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/coupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/coupons";
  export const random = (): IShoppingMallCoupon =>
    typia.random<IShoppingMallCoupon>();
  export const simulate = (
    connection: IConnection,
    props: createCoupon.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createCoupon.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list discount coupons.
 *
 * Search and retrieve discount coupons with advanced filtering and pagination
 * capabilities.
 *
 * This endpoint allows administrators, sellers, and members to access available
 * coupons subject to their permissions.
 *
 * Coupons support amount and percentage discounts with conditions and
 * expiration dates.
 *
 * The underlying data originates from the shopping_mall_coupons table managing
 * coupon metadata, conditions, and usage logs.
 *
 * @param props.connection
 * @param props.body Coupon search criteria
 * @path /shoppingMall/adminUser/coupons
 * @accessor api.functional.shoppingMall.adminUser.coupons.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Coupon search criteria */
    body: IShoppingMallCoupon.IRequest;
  };
  export type Body = IShoppingMallCoupon.IRequest;
  export type Response = IPageIShoppingMallCoupon.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/coupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/coupons";
  export const random = (): IPageIShoppingMallCoupon.ISummary =>
    typia.random<IPageIShoppingMallCoupon.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve coupon detail by ID.
 *
 * Get detailed coupon information by coupon ID.
 *
 * Accessible by administrators, sellers, and members.
 *
 * Provides complete coupon properties, status, and usage rules.
 *
 * @param props.connection
 * @param props.couponId Unique ID of the coupon
 * @path /shoppingMall/adminUser/coupons/:couponId
 * @accessor api.functional.shoppingMall.adminUser.coupons.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique ID of the coupon */
    couponId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCoupon;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/coupons/:couponId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): IShoppingMallCoupon =>
    typia.random<IShoppingMallCoupon>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update coupon by ID.
 *
 * Update the details of an existing coupon by its ID provided in the path
 * parameter. This supports modification of discount amounts, usage limits,
 * validity dates, and descriptive fields within business rules.
 *
 * Only 'adminUser' role allowed to perform updates to protect the promotion
 * workflow. The operation returns the updated coupon entity on success.
 *
 * @param props.connection
 * @param props.couponId Target coupon's UUID identifier
 * @param props.body Payload structure for updating a coupon
 * @path /shoppingMall/adminUser/coupons/:couponId
 * @accessor api.functional.shoppingMall.adminUser.coupons.updateCoupon
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateCoupon(
  connection: IConnection,
  props: updateCoupon.Props,
): Promise<updateCoupon.Response> {
  return true === connection.simulate
    ? updateCoupon.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateCoupon.METADATA,
          path: updateCoupon.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateCoupon {
  export type Props = {
    /** Target coupon's UUID identifier */
    couponId: string & tags.Format<"uuid">;

    /** Payload structure for updating a coupon */
    body: IShoppingMallCoupon.IUpdate;
  };
  export type Body = IShoppingMallCoupon.IUpdate;
  export type Response = IShoppingMallCoupon;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/coupons/:couponId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): IShoppingMallCoupon =>
    typia.random<IShoppingMallCoupon>();
  export const simulate = (
    connection: IConnection,
    props: updateCoupon.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateCoupon.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete coupon by ID.
 *
 * Remove a coupon permanently from the database based on the given couponId.
 * This operation affects active promotions critically; only authorized
 * 'adminUser' can perform this deletion. There is no response content on
 * success.
 *
 * @param props.connection
 * @param props.couponId Target coupon's UUID identifier
 * @path /shoppingMall/adminUser/coupons/:couponId
 * @accessor api.functional.shoppingMall.adminUser.coupons.eraseCoupon
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseCoupon(
  connection: IConnection,
  props: eraseCoupon.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseCoupon.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseCoupon.METADATA,
          path: eraseCoupon.path(props),
          status: null,
        },
      );
}
export namespace eraseCoupon {
  export type Props = {
    /** Target coupon's UUID identifier */
    couponId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/coupons/:couponId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseCoupon.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseCoupon.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
