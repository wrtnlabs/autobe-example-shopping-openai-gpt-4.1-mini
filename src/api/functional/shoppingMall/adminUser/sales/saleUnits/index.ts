import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSaleUnit } from "../../../../../structures/IShoppingMallSaleUnit";
import { IPageIShoppingMallSaleUnit } from "../../../../../structures/IPageIShoppingMallSaleUnit";
export * as saleUnitOptions from "./saleUnitOptions/index";

/**
 * Create a new sale unit for a sale product.
 *
 * Create a new sale unit within a specified shopping mall sale product. This
 * operation allows sellerUsers or adminUsers to add granular components or
 * sub-parts of a sale product.
 *
 * The creation request must provide unique code, name, and optional description
 * for the unit. The system generates timestamps upon creation. Access control
 * enforces sellerUser or adminUser role requirements to prevent unauthorized
 * data modification.
 *
 * Upon success, the newly created sale unit is returned with detailed
 * information as confirmation and for subsequent operations.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the target sale product
 * @param props.body Creation details of the sale unit
 * @path /shoppingMall/adminUser/sales/:saleId/saleUnits
 * @accessor api.functional.shoppingMall.adminUser.sales.saleUnits.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target sale product */
    saleId: string & tags.Format<"uuid">;

    /** Creation details of the sale unit */
    body: IShoppingMallSaleUnit.ICreate;
  };
  export type Body = IShoppingMallSaleUnit.ICreate;
  export type Response = IShoppingMallSaleUnit;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/sales/:saleId/saleUnits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/sales/${encodeURIComponent(props.saleId ?? "null")}/saleUnits`;
  export const random = (): IShoppingMallSaleUnit =>
    typia.random<IShoppingMallSaleUnit>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List sale units for a specific sale product.
 *
 * Retrieve a filtered and paginated list of sales units associated with a
 * specific shopping mall sale product. Sale units define components or parts of
 * a product and are essential for managing complex product configurations and
 * inventory.
 *
 * This operation supports pagination and filtering to efficiently query
 * relevant units. Access is restricted to sellerUsers and adminUsers to
 * maintain data privacy and control.
 *
 * Returned data includes summary information for each sale unit optimized for
 * display in product management interfaces or reports.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the target sale product
 * @param props.body Search criteria and pagination for sale units
 * @path /shoppingMall/adminUser/sales/:saleId/saleUnits
 * @accessor api.functional.shoppingMall.adminUser.sales.saleUnits.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target sale product */
    saleId: string & tags.Format<"uuid">;

    /** Search criteria and pagination for sale units */
    body: IShoppingMallSaleUnit.IRequest;
  };
  export type Body = IShoppingMallSaleUnit.IRequest;
  export type Response = IPageIShoppingMallSaleUnit.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/sales/:saleId/saleUnits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/sales/${encodeURIComponent(props.saleId ?? "null")}/saleUnits`;
  export const random = (): IPageIShoppingMallSaleUnit.ISummary =>
    typia.random<IPageIShoppingMallSaleUnit.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific sale unit.
 *
 * Retrieve detailed information about a single sale unit of a shopping mall
 * sale product. Sale units represent components or sub-elements of a product
 * used for inventory and configuration.
 *
 * This operation checks that the requester has sellerUser or adminUser roles to
 * access product unit details. The response includes all properties of the sale
 * unit entity as defined in the underlying schema.
 *
 * Error handling accounts for invalid unit identifiers or unauthorized
 * requests. This endpoint supports complex product management scenarios
 * requiring component level details.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the target sale product
 * @param props.saleUnitId Unique identifier of the sale unit
 * @path /shoppingMall/adminUser/sales/:saleId/saleUnits/:saleUnitId
 * @accessor api.functional.shoppingMall.adminUser.sales.saleUnits.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target sale product */
    saleId: string & tags.Format<"uuid">;

    /** Unique identifier of the sale unit */
    saleUnitId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSaleUnit;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/sales/:saleId/saleUnits/:saleUnitId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/sales/${encodeURIComponent(props.saleId ?? "null")}/saleUnits/${encodeURIComponent(props.saleUnitId ?? "null")}`;
  export const random = (): IShoppingMallSaleUnit =>
    typia.random<IShoppingMallSaleUnit>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
      assert.param("saleUnitId")(() => typia.assert(props.saleUnitId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a sale unit of a sale product.
 *
 * Update data of a specific sale unit belonging to a shopping mall sale
 * product. This operation enables sellerUsers or adminUsers to modify details
 * such as code, name, and description of product components.
 *
 * The update request must specify valid fields to modify and respects
 * validation rules such as uniqueness and non-null constraints. Timestamps are
 * updated accordingly.
 *
 * Error handling covers cases of invalid sale unit identifiers and permission
 * enforcement ensuring only authorized roles can make changes.
 *
 * Upon success, the updated sale unit details are returned delivering
 * confirmation and further data access.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the target sale product
 * @param props.saleUnitId Unique identifier of the sale unit
 * @param props.body Update data for the sale unit
 * @path /shoppingMall/adminUser/sales/:saleId/saleUnits/:saleUnitId
 * @accessor api.functional.shoppingMall.adminUser.sales.saleUnits.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target sale product */
    saleId: string & tags.Format<"uuid">;

    /** Unique identifier of the sale unit */
    saleUnitId: string & tags.Format<"uuid">;

    /** Update data for the sale unit */
    body: IShoppingMallSaleUnit.IUpdate;
  };
  export type Body = IShoppingMallSaleUnit.IUpdate;
  export type Response = IShoppingMallSaleUnit;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/sales/:saleId/saleUnits/:saleUnitId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/sales/${encodeURIComponent(props.saleId ?? "null")}/saleUnits/${encodeURIComponent(props.saleUnitId ?? "null")}`;
  export const random = (): IShoppingMallSaleUnit =>
    typia.random<IShoppingMallSaleUnit>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
      assert.param("saleUnitId")(() => typia.assert(props.saleUnitId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a sale unit from a sale product.
 *
 * Delete a specific sale unit from a shopping mall sale product. This operation
 * permanently removes the component from the system including its relations
 * such as options. The operation enforces strict role-based access control
 * requiring sellerUser or adminUser privileges.
 *
 * Proper error handling ensures that invalid sale units or unauthorized
 * attempts are managed gracefully. This delete operation is irreversible and
 * removes the unit record entirely.
 *
 * Business validation ensures that dependent data or business rules are
 * respected before deletion.
 *
 * No response body is provided but HTTP status codes communicate success or
 * failure.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the target sale product
 * @param props.saleUnitId Unique identifier of the sale unit
 * @path /shoppingMall/adminUser/sales/:saleId/saleUnits/:saleUnitId
 * @accessor api.functional.shoppingMall.adminUser.sales.saleUnits.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target sale product */
    saleId: string & tags.Format<"uuid">;

    /** Unique identifier of the sale unit */
    saleUnitId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/sales/:saleId/saleUnits/:saleUnitId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/sales/${encodeURIComponent(props.saleId ?? "null")}/saleUnits/${encodeURIComponent(props.saleUnitId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
      assert.param("saleUnitId")(() => typia.assert(props.saleUnitId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
