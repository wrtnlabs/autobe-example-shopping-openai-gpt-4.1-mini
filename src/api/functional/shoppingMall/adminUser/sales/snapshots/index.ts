import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSaleSnapshot } from "../../../../../structures/IShoppingMallSaleSnapshot";
import { IPageIShoppingMallSaleSnapshot } from "../../../../../structures/IPageIShoppingMallSaleSnapshot";

/**
 * List paginated snapshots of a shopping mall sale product.
 *
 * Retrieve a paginated list of snapshots for a specified shopping mall sale
 * product. Snapshots preserve historical versions of the product data when
 * changes were made, enabling auditability and rollback capabilities.
 *
 * Security considerations include ensuring the requester has appropriate
 * viewing permissions, typically for authenticated sellerUsers or adminUsers
 * responsible for product data management.
 *
 * The operation supports complex query parameters such as date range filtering
 * and sorting to navigate snapshot history. The response delivers summary
 * snapshot information with metadata optimized for display in history logs or
 * version comparison tools.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the target sale product
 * @param props.body Search criteria and pagination parameters for sale
 *   snapshots filtering
 * @path /shoppingMall/adminUser/sales/:saleId/snapshots
 * @accessor api.functional.shoppingMall.adminUser.sales.snapshots.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target sale product */
    saleId: string & tags.Format<"uuid">;

    /**
     * Search criteria and pagination parameters for sale snapshots
     * filtering
     */
    body: IShoppingMallSaleSnapshot.IRequest;
  };
  export type Body = IShoppingMallSaleSnapshot.IRequest;
  export type Response = IPageIShoppingMallSaleSnapshot.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/adminUser/sales/:saleId/snapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/sales/${encodeURIComponent(props.saleId ?? "null")}/snapshots`;
  export const random = (): IPageIShoppingMallSaleSnapshot.ISummary =>
    typia.random<IPageIShoppingMallSaleSnapshot.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific sale snapshot.
 *
 * Retrieve detailed information about a specific snapshot of a shopping mall
 * sale product by saleId and snapshotId. Snapshots represent immutable
 * historical data of product state at certain times.
 *
 * This operation checks that the requester has sellerUser or adminUser
 * privileges to access historical product data. The response returns all
 * snapshot fields for review, audit, or comparison purposes.
 *
 * Error handling includes managing invalid snapshot references or unauthorized
 * access. This endpoint is crucial for managing product change histories and
 * ensuring data integrity.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the target sale product
 * @param props.snapshotId Unique identifier of the sale snapshot
 * @path /shoppingMall/adminUser/sales/:saleId/snapshots/:snapshotId
 * @accessor api.functional.shoppingMall.adminUser.sales.snapshots.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target sale product */
    saleId: string & tags.Format<"uuid">;

    /** Unique identifier of the sale snapshot */
    snapshotId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSaleSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/sales/:saleId/snapshots/:snapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/sales/${encodeURIComponent(props.saleId ?? "null")}/snapshots/${encodeURIComponent(props.snapshotId ?? "null")}`;
  export const random = (): IShoppingMallSaleSnapshot =>
    typia.random<IShoppingMallSaleSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
      assert.param("snapshotId")(() => typia.assert(props.snapshotId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
