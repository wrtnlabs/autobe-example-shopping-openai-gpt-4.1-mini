import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallMileage } from "../../../../structures/IShoppingMallMileage";

/**
 * Manage customer mileage records with full CRUD operations.
 *
 * This set of API operations manages customer mileage records in the shopping
 * mall backend system. The GET operation retrieves detailed mileage information
 * for a specific mileage record identified by 'mileageId', including balances
 * and accrued points. The POST operation allows creation of a new mileage
 * record for a user with initial values and timestamps. The PUT operation
 * updates an existing mileage record's balances and income/outcome history,
 * ensuring the record remains consistent with business rules. The DELETE
 * operation permanently removes a mileage record from the database, ensuring no
 * residual data remains.
 *
 * Security Considerations: These operations require authenticated access
 * typically by administrative roles, ensuring only authorized users can create,
 * update or delete mileage records. Data privacy and integrity are enforced by
 * restricting mutation operations.
 *
 * Database Relationships: Each mileage record is linked optionally to a guest
 * user or member user, and changes reflect in the corresponding user's mileage
 * accounts.
 *
 * Validation Rules:
 *
 * - Mileage IDs and user IDs must be valid UUIDs.
 * - Decimal fields (balances and income/outcome) must be non-negative where
 *   appropriate.
 * - Deleted records cannot be accessed or modified.
 *
 * Error Handling: Errors will be returned if invalid IDs are provided or if
 * updates violate business constraints. Attempts to delete non-existent records
 * will result in appropriate error responses.
 *
 * @param props.connection
 * @param props.mileageId Unique identifier of the mileage record
 * @path /shoppingMall/adminUser/mileages/:mileageId
 * @accessor api.functional.shoppingMall.adminUser.mileages.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the mileage record */
    mileageId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallMileage;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/adminUser/mileages/:mileageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/mileages/${encodeURIComponent(props.mileageId ?? "null")}`;
  export const random = (): IShoppingMallMileage =>
    typia.random<IShoppingMallMileage>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageId")(() => typia.assert(props.mileageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing mileage record.
 *
 * This API operation updates details of an existing mileage record, including
 * current balances, accumulated income/outcome, and expired mileage points. It
 * is designed for use by administrators to keep mileage data accurate and
 * consistent with transactional changes.
 *
 * The update operation requires specifying the mileage record by 'mileageId'
 * path parameter and provides an update payload conforming to business rules
 * and data types.
 *
 * Authorization requires admin privileges to prevent unauthorized
 * modifications.
 *
 * Error cases include invalid mileage IDs, attempts to update deleted records,
 * or invalid field values.
 *
 * @param props.connection
 * @param props.mileageId Unique identifier of the mileage record
 * @param props.body Mileage record update data
 * @path /shoppingMall/adminUser/mileages/:mileageId
 * @accessor api.functional.shoppingMall.adminUser.mileages.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the mileage record */
    mileageId: string & tags.Format<"uuid">;

    /** Mileage record update data */
    body: IShoppingMallMileage.IUpdate;
  };
  export type Body = IShoppingMallMileage.IUpdate;
  export type Response = IShoppingMallMileage;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/adminUser/mileages/:mileageId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/adminUser/mileages/${encodeURIComponent(props.mileageId ?? "null")}`;
  export const random = (): IShoppingMallMileage =>
    typia.random<IShoppingMallMileage>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageId")(() => typia.assert(props.mileageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a mileage record permanently.
 *
 * Deletes the specified mileage record identified by 'mileageId' permanently
 * from the database, releasing all associated mileage points and history.
 *
 * Requires admin authorization.
 *
 * Records once deleted cannot be recovered.
 *
 * Error responses ensue if the mileageId does not exist or invalid.
 *
 * This is a hard delete operation removing the database entry without any
 * soft-delete marking.
 *
 * @param props.connection
 * @param props.mileageId Unique identifier of the mileage record
 * @path /shoppingMall/adminUser/mileages/:mileageId
 * @accessor api.functional.shoppingMall.adminUser.mileages.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the mileage record */
    mileageId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/adminUser/mileages/:mileageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/adminUser/mileages/${encodeURIComponent(props.mileageId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageId")(() => typia.assert(props.mileageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new mileage record for a customer.
 *
 * This API operation creates a new mileage record linked to a member or guest
 * customer. Intended for administrative control, it initializes the mileage
 * balance and history for each customer. It also sets audit timestamps to
 * ensure proper tracking of the record lifespan.
 *
 * Security is restricted to admin roles to prevent unauthorized mileage
 * manipulation.
 *
 * The mileage record includes current balance, cumulative income and outcome
 * points, expired points, and references to the user for future reward
 * calculations.
 *
 * Potential errors include duplicate records for the same user, invalid UUIDs,
 * and out-of-range values for mileage points.
 *
 * @param props.connection
 * @param props.body Mileage record creation data
 * @path /shoppingMall/adminUser/mileages
 * @accessor api.functional.shoppingMall.adminUser.mileages.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Mileage record creation data */
    body: IShoppingMallMileage.ICreate;
  };
  export type Body = IShoppingMallMileage.ICreate;
  export type Response = IShoppingMallMileage;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/adminUser/mileages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/adminUser/mileages";
  export const random = (): IShoppingMallMileage =>
    typia.random<IShoppingMallMileage>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
