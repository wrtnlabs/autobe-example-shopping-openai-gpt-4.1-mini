import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallPayment } from "../../../../../structures/IShoppingMallPayment";
import { IPageIShoppingMallPayment } from "../../../../../structures/IPageIShoppingMallPayment";

/**
 * Create a new payment for an order.
 *
 * Add a payment application to a specific order. Authorized users can submit
 * payment information for the order.
 *
 * Supports multiple payment methods and amount validation.
 *
 * References the shopping_mall_payments table for insert operations.
 *
 * Returns the full payment application information on success.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order
 * @param props.body Payment details for creation
 * @path /shoppingMall/sellerUser/orders/:orderId/payments
 * @accessor api.functional.shoppingMall.sellerUser.orders.payments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the order */
    orderId: string & tags.Format<"uuid">;

    /** Payment details for creation */
    body: IShoppingMallPayment.ICreate;
  };
  export type Body = IShoppingMallPayment.ICreate;
  export type Response = IShoppingMallPayment;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/sellerUser/orders/:orderId/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/sellerUser/orders/${encodeURIComponent(props.orderId ?? "null")}/payments`;
  export const random = (): IShoppingMallPayment =>
    typia.random<IShoppingMallPayment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List payment applications related to a specific order.
 *
 * Retrieve list of payment applications for an order with filtering and
 * pagination. This operation returns summarized payment information to
 * authorized users.
 *
 * Links to the shopping_mall_payments database table filtered by order ID.
 *
 * Supports pagination, sorting, and status filtering.
 *
 * Only accessible to authorized roles.
 *
 * Returns paginated payment summaries.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order
 * @param props.body Search criteria and pagination parameters for payments
 *   filtering
 * @path /shoppingMall/sellerUser/orders/:orderId/payments
 * @accessor api.functional.shoppingMall.sellerUser.orders.payments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target order */
    orderId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for payments filtering */
    body: IShoppingMallPayment.IRequest;
  };
  export type Body = IShoppingMallPayment.IRequest;
  export type Response = IPageIShoppingMallPayment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/sellerUser/orders/:orderId/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/sellerUser/orders/${encodeURIComponent(props.orderId ?? "null")}/payments`;
  export const random = (): IPageIShoppingMallPayment.ISummary =>
    typia.random<IPageIShoppingMallPayment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get specific payment application details by orderId and paymentId.
 *
 * Get detailed payment application information by order ID and payment ID.
 * Authorized users can retrieve specific payment records associated with an
 * order.
 *
 * References the shopping_mall_payments database table.
 *
 * Validates existence of the payment under the given order.
 *
 * Returns full payment details.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order
 * @param props.paymentId Unique identifier of the payment
 * @path /shoppingMall/sellerUser/orders/:orderId/payments/:paymentId
 * @accessor api.functional.shoppingMall.sellerUser.orders.payments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the payment */
    paymentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallPayment;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/sellerUser/orders/:orderId/payments/:paymentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/sellerUser/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IShoppingMallPayment =>
    typia.random<IShoppingMallPayment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing payment for an order.
 *
 * Update an existing payment application for an order. Authorized users
 * (guestUser, memberUser, sellerUser, adminUser) can modify payment details
 * such as status, amount, and method.
 *
 * Security ensures only authorized roles perform updates.
 *
 * Validation confirms allowed status transitions and method correctness.
 *
 * Returns the updated payment information.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order
 * @param props.paymentId Unique identifier of the payment
 * @param props.body Updated payment details
 * @path /shoppingMall/sellerUser/orders/:orderId/payments/:paymentId
 * @accessor api.functional.shoppingMall.sellerUser.orders.payments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the order */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the payment */
    paymentId: string & tags.Format<"uuid">;

    /** Updated payment details */
    body: IShoppingMallPayment.IUpdate;
  };
  export type Body = IShoppingMallPayment.IUpdate;
  export type Response = IShoppingMallPayment;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/sellerUser/orders/:orderId/payments/:paymentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/sellerUser/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IShoppingMallPayment =>
    typia.random<IShoppingMallPayment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
