import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSaleOption } from "../../../../structures/IShoppingMallSaleOption";
import { IPageIShoppingMallSaleOption } from "../../../../structures/IPageIShoppingMallSaleOption";

/**
 * Create a new sale option master record with group, code, name, and type.
 *
 * SellerUser and adminUser only.
 *
 * Supports the expansion of product option sets in the sales system.
 *
 * @param props.connection
 * @param props.body Creation data for a new sale option
 * @path /shoppingMall/sellerUser/saleOptions
 * @accessor api.functional.shoppingMall.sellerUser.saleOptions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for a new sale option */
    body: IShoppingMallSaleOption.ICreate;
  };
  export type Body = IShoppingMallSaleOption.ICreate;
  export type Response = IShoppingMallSaleOption;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/sellerUser/saleOptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/sellerUser/saleOptions";
  export const random = (): IShoppingMallSaleOption =>
    typia.random<IShoppingMallSaleOption>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list sale options.
 *
 * Search and retrieve sale options with filters for option groups, names, and
 * types.
 *
 * This endpoint is accessible only to sellerUser and administrator users.
 *
 * Useful for managing the catalog of options applicable to products.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for sale options
 * @path /shoppingMall/sellerUser/saleOptions
 * @accessor api.functional.shoppingMall.sellerUser.saleOptions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for sale options */
    body: IShoppingMallSaleOption.IRequest;
  };
  export type Body = IShoppingMallSaleOption.IRequest;
  export type Response = IPageIShoppingMallSaleOption.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/sellerUser/saleOptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/sellerUser/saleOptions";
  export const random = (): IPageIShoppingMallSaleOption.ISummary =>
    typia.random<IPageIShoppingMallSaleOption.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed sale option information.
 *
 * Retrieve detailed information for a specific sale option, including its
 * group, code, name, and type.
 *
 * Roles sellerUser and adminUser are required for access.
 *
 * This operation is key for editing and reviewing option master data.
 *
 * @param props.connection
 * @param props.saleOptionId Unique identifier of the target sale option
 * @path /shoppingMall/sellerUser/saleOptions/:saleOptionId
 * @accessor api.functional.shoppingMall.sellerUser.saleOptions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target sale option */
    saleOptionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSaleOption;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/sellerUser/saleOptions/:saleOptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/sellerUser/saleOptions/${encodeURIComponent(props.saleOptionId ?? "null")}`;
  export const random = (): IShoppingMallSaleOption =>
    typia.random<IShoppingMallSaleOption>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleOptionId")(() => typia.assert(props.saleOptionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a sale option by ID.
 *
 * Update details of an existing sale option in the shopping mall backend
 * system.
 *
 * This operation allows authorized users to modify sale option attributes
 * including code, name, type, and associated option group. The saleOptionId
 * path parameter identifies the target sale option uniquely.
 *
 * Users with appropriate roles can perform this operation ensuring that product
 * option configurations remain current and accurate. Input validation ensures
 * the updated data fully conforms to schema constraints.
 *
 * The updated sale option record is returned as confirmation of success.
 *
 * Security considerations include verifying the identity and permissions of the
 * user making updates, and validation of the input to prevent invalid or
 * malicious data.
 *
 * Typically used in tandem with listing and creation endpoints for sale
 * options.
 *
 * @param props.connection
 * @param props.saleOptionId Unique identifier of the sale option to update
 * @param props.body Updated sale option data
 * @path /shoppingMall/sellerUser/saleOptions/:saleOptionId
 * @accessor api.functional.shoppingMall.sellerUser.saleOptions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the sale option to update */
    saleOptionId: string & tags.Format<"uuid">;

    /** Updated sale option data */
    body: IShoppingMallSaleOption.IUpdate;
  };
  export type Body = IShoppingMallSaleOption.IUpdate;
  export type Response = IShoppingMallSaleOption;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/sellerUser/saleOptions/:saleOptionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/sellerUser/saleOptions/${encodeURIComponent(props.saleOptionId ?? "null")}`;
  export const random = (): IShoppingMallSaleOption =>
    typia.random<IShoppingMallSaleOption>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleOptionId")(() => typia.assert(props.saleOptionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a sale option by ID.
 *
 * Permanently removes a sale option from the database by its unique identifier.
 *
 * This operation requires privileged access to prevent unauthorized deletions.
 *
 * Successful completion results in the hard deletion of the sale option record
 * and its immediate unavailability.
 *
 * This operation is irreversible and will remove all associated option
 * configurations.
 *
 * Use with caution and ensure proper user authorization.
 *
 * Errors may occur if the specified sale option ID does not exist.
 *
 * Security checks prevent unauthorized deletions.
 *
 * @param props.connection
 * @param props.saleOptionId Unique identifier of the sale option to delete
 * @path /shoppingMall/sellerUser/saleOptions/:saleOptionId
 * @accessor api.functional.shoppingMall.sellerUser.saleOptions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the sale option to delete */
    saleOptionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/sellerUser/saleOptions/:saleOptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/sellerUser/saleOptions/${encodeURIComponent(props.saleOptionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleOptionId")(() => typia.assert(props.saleOptionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
