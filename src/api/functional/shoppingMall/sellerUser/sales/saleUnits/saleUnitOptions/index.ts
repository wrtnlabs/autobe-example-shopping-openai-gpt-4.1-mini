import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSaleUnitOption } from "../../../../../../structures/IShoppingMallSaleUnitOption";
import { IPageIShoppingMallSaleUnitOption } from "../../../../../../structures/IPageIShoppingMallSaleUnitOption";

/**
 * Create a new sale unit option under a specific sale unit. Requires providing
 * option references, additional price, and stock details.
 *
 * Access control applies: only sellerUser or adminUser users can create sale
 * unit options.
 *
 * This operation ensures product configuration flexibility by adding option
 * variations at the unit level linked to the sale product.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the target sale product
 * @param props.saleUnitId Unique identifier of the target sale unit
 * @param props.body Information needed to create a sale unit option
 * @path /shoppingMall/sellerUser/sales/:saleId/saleUnits/:saleUnitId/saleUnitOptions
 * @accessor api.functional.shoppingMall.sellerUser.sales.saleUnits.saleUnitOptions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target sale product */
    saleId: string & tags.Format<"uuid">;

    /** Unique identifier of the target sale unit */
    saleUnitId: string & tags.Format<"uuid">;

    /** Information needed to create a sale unit option */
    body: IShoppingMallSaleUnitOption.ICreate;
  };
  export type Body = IShoppingMallSaleUnitOption.ICreate;
  export type Response = IShoppingMallSaleUnitOption;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/sellerUser/sales/:saleId/saleUnits/:saleUnitId/saleUnitOptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/sellerUser/sales/${encodeURIComponent(props.saleId ?? "null")}/saleUnits/${encodeURIComponent(props.saleUnitId ?? "null")}/saleUnitOptions`;
  export const random = (): IShoppingMallSaleUnitOption =>
    typia.random<IShoppingMallSaleUnitOption>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
      assert.param("saleUnitId")(() => typia.assert(props.saleUnitId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List sale unit options for a specific sale unit.
 *
 * Retrieve a paginated list of sale unit options for the specified sale unit
 * under a sale product. This allows clients to browse all configuration options
 * available for the product unit including price increments and stock
 * quantities.
 *
 * Users require appropriate permissions to view product sale option details.
 *
 * This operation references the shopping_mall_sale_unit_options table and is
 * linked to shopping_mall_sale_units and shopping_mall_sales entities. It
 * returns summary information optimized for list displays.
 *
 * Response includes pagination metadata and supports sorting and filtering by
 * option group, option code, and other attributes.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the target sale product
 * @param props.saleUnitId Unique identifier of the target sale unit
 * @param props.body Request parameters for filtering, searching and paginating
 *   sale unit options
 * @path /shoppingMall/sellerUser/sales/:saleId/saleUnits/:saleUnitId/saleUnitOptions
 * @accessor api.functional.shoppingMall.sellerUser.sales.saleUnits.saleUnitOptions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target sale product */
    saleId: string & tags.Format<"uuid">;

    /** Unique identifier of the target sale unit */
    saleUnitId: string & tags.Format<"uuid">;

    /**
     * Request parameters for filtering, searching and paginating sale unit
     * options
     */
    body: IShoppingMallSaleUnitOption.IRequest;
  };
  export type Body = IShoppingMallSaleUnitOption.IRequest;
  export type Response = IPageIShoppingMallSaleUnitOption.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/sellerUser/sales/:saleId/saleUnits/:saleUnitId/saleUnitOptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/sellerUser/sales/${encodeURIComponent(props.saleId ?? "null")}/saleUnits/${encodeURIComponent(props.saleUnitId ?? "null")}/saleUnitOptions`;
  export const random = (): IPageIShoppingMallSaleUnitOption.ISummary =>
    typia.random<IPageIShoppingMallSaleUnitOption.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
      assert.param("saleUnitId")(() => typia.assert(props.saleUnitId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed sale unit option information.
 *
 * Retrieve detailed information for a specific sale unit option under a given
 * sale unit. The response includes all option properties, additional pricing,
 * stock quantity, and related metadata.
 *
 * Security: Only authenticated users with sellerUser or adminUser roles can
 * access this endpoint.
 *
 * This operation is crucial for managing detailed option configurations and
 * adjustments for product units in the sales system.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the target sale product
 * @param props.saleUnitId Unique identifier of the target sale unit
 * @param props.saleUnitOptionId Unique identifier of the target sale unit
 *   option
 * @path /shoppingMall/sellerUser/sales/:saleId/saleUnits/:saleUnitId/saleUnitOptions/:saleUnitOptionId
 * @accessor api.functional.shoppingMall.sellerUser.sales.saleUnits.saleUnitOptions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target sale product */
    saleId: string & tags.Format<"uuid">;

    /** Unique identifier of the target sale unit */
    saleUnitId: string & tags.Format<"uuid">;

    /** Unique identifier of the target sale unit option */
    saleUnitOptionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSaleUnitOption;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/sellerUser/sales/:saleId/saleUnits/:saleUnitId/saleUnitOptions/:saleUnitOptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/sellerUser/sales/${encodeURIComponent(props.saleId ?? "null")}/saleUnits/${encodeURIComponent(props.saleUnitId ?? "null")}/saleUnitOptions/${encodeURIComponent(props.saleUnitOptionId ?? "null")}`;
  export const random = (): IShoppingMallSaleUnitOption =>
    typia.random<IShoppingMallSaleUnitOption>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
      assert.param("saleUnitId")(() => typia.assert(props.saleUnitId));
      assert.param("saleUnitOptionId")(() =>
        typia.assert(props.saleUnitOptionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a sale unit option.
 *
 * Update an existing sale unit option with new details such as additional price
 * and stock.
 *
 * Only authorized sellerUser or adminUser users may perform this operation.
 *
 * This operation supports product options management and pricing adjustment
 * workflows.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the target sale product
 * @param props.saleUnitId Unique identifier of the target sale unit
 * @param props.saleUnitOptionId Unique identifier of the target sale unit
 *   option
 * @param props.body Data to update sale unit option fields
 * @path /shoppingMall/sellerUser/sales/:saleId/saleUnits/:saleUnitId/saleUnitOptions/:saleUnitOptionId
 * @accessor api.functional.shoppingMall.sellerUser.sales.saleUnits.saleUnitOptions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target sale product */
    saleId: string & tags.Format<"uuid">;

    /** Unique identifier of the target sale unit */
    saleUnitId: string & tags.Format<"uuid">;

    /** Unique identifier of the target sale unit option */
    saleUnitOptionId: string & tags.Format<"uuid">;

    /** Data to update sale unit option fields */
    body: IShoppingMallSaleUnitOption.IUpdate;
  };
  export type Body = IShoppingMallSaleUnitOption.IUpdate;
  export type Response = IShoppingMallSaleUnitOption;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/sellerUser/sales/:saleId/saleUnits/:saleUnitId/saleUnitOptions/:saleUnitOptionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/sellerUser/sales/${encodeURIComponent(props.saleId ?? "null")}/saleUnits/${encodeURIComponent(props.saleUnitId ?? "null")}/saleUnitOptions/${encodeURIComponent(props.saleUnitOptionId ?? "null")}`;
  export const random = (): IShoppingMallSaleUnitOption =>
    typia.random<IShoppingMallSaleUnitOption>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
      assert.param("saleUnitId")(() => typia.assert(props.saleUnitId));
      assert.param("saleUnitOptionId")(() =>
        typia.assert(props.saleUnitOptionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a sale unit option permanently.
 *
 * Permanently delete a sale unit option from a sale unit. Operation requires
 * high privilege through sellerUser or adminUser roles.
 *
 * The record is hard deleted from the database and cannot be recovered.
 *
 * This operation is essential for maintaining clean and accurate product unit
 * configurations.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the target sale product
 * @param props.saleUnitId Unique identifier of the target sale unit
 * @param props.saleUnitOptionId Unique identifier of the target sale unit
 *   option
 * @path /shoppingMall/sellerUser/sales/:saleId/saleUnits/:saleUnitId/saleUnitOptions/:saleUnitOptionId
 * @accessor api.functional.shoppingMall.sellerUser.sales.saleUnits.saleUnitOptions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target sale product */
    saleId: string & tags.Format<"uuid">;

    /** Unique identifier of the target sale unit */
    saleUnitId: string & tags.Format<"uuid">;

    /** Unique identifier of the target sale unit option */
    saleUnitOptionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/sellerUser/sales/:saleId/saleUnits/:saleUnitId/saleUnitOptions/:saleUnitOptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/sellerUser/sales/${encodeURIComponent(props.saleId ?? "null")}/saleUnits/${encodeURIComponent(props.saleUnitId ?? "null")}/saleUnitOptions/${encodeURIComponent(props.saleUnitOptionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
      assert.param("saleUnitId")(() => typia.assert(props.saleUnitId));
      assert.param("saleUnitOptionId")(() =>
        typia.assert(props.saleUnitOptionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
