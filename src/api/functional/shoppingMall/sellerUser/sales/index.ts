import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSale } from "../../../../structures/IShoppingMallSale";
import { IPageIShoppingMallSale } from "../../../../structures/IPageIShoppingMallSale";
export * as snapshots from "./snapshots/index";
export * as saleUnits from "./saleUnits/index";

/**
 * Create a new sales product record.
 *
 * Register a new product for sale in the shopping mall.
 *
 * Restricted to users with 'sellerUser' role.
 *
 * Input includes product channel, seller, unique code, status, name, optional
 * description, and base price.
 *
 * Unique code is validated.
 *
 * On successful creation, returns the created product data.
 *
 * Handles errors including validation failure and code conflict.
 *
 * @param props.connection
 * @param props.body Creation data for new sales product
 * @path /shoppingMall/sellerUser/sales
 * @accessor api.functional.shoppingMall.sellerUser.sales.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for new sales product */
    body: IShoppingMallSale.ICreate;
  };
  export type Body = IShoppingMallSale.ICreate;
  export type Response = IShoppingMallSale;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/sellerUser/sales",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/sellerUser/sales";
  export const random = (): IShoppingMallSale =>
    typia.random<IShoppingMallSale>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list shopping mall sales products.
 *
 * Get a filtered and paginated list of sales products in the shopping mall.
 *
 * This endpoint supports multiple filters like product name, seller, channel,
 * and status.
 *
 * Search results include active and archived products with audit and status
 * tracking.
 *
 * Access is restricted to users with 'adminUser' or 'sellerUser' roles.
 *
 * Validation of paging and filters is implemented.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination for sales products
 * @path /shoppingMall/sellerUser/sales
 * @accessor api.functional.shoppingMall.sellerUser.sales.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination for sales products */
    body: IShoppingMallSale.IRequest;
  };
  export type Body = IShoppingMallSale.IRequest;
  export type Response = IPageIShoppingMallSale.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/sellerUser/sales",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/sellerUser/sales";
  export const random = (): IPageIShoppingMallSale.ISummary =>
    typia.random<IPageIShoppingMallSale.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed sales product by ID.
 *
 * Get a sales product's full information by saleId.
 *
 * Access is restricted to authorized users with roles 'adminUser' or
 * 'sellerUser'.
 *
 * Returns comprehensive product details including audit timestamps.
 *
 * Handles errors for invalid or missing product IDs.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the sales product
 * @path /shoppingMall/sellerUser/sales/:saleId
 * @accessor api.functional.shoppingMall.sellerUser.sales.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the sales product */
    saleId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSale;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/sellerUser/sales/:saleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/sellerUser/sales/${encodeURIComponent(props.saleId ?? "null")}`;
  export const random = (): IShoppingMallSale =>
    typia.random<IShoppingMallSale>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a sales product's information.
 *
 * Modify details of a sales product identified by saleId.
 *
 * Authorization is required for 'adminUser' and 'sellerUser' roles.
 *
 * Update payload can modify channel, section, seller id, status, name,
 * description, and price.
 *
 * Validates inputs strictly.
 *
 * Returns updated product info or errors.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the sales product to update
 * @param props.body Update data for sales product
 * @path /shoppingMall/sellerUser/sales/:saleId
 * @accessor api.functional.shoppingMall.sellerUser.sales.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the sales product to update */
    saleId: string & tags.Format<"uuid">;

    /** Update data for sales product */
    body: IShoppingMallSale.IUpdate;
  };
  export type Body = IShoppingMallSale.IUpdate;
  export type Response = IShoppingMallSale;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/sellerUser/sales/:saleId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/sellerUser/sales/${encodeURIComponent(props.saleId ?? "null")}`;
  export const random = (): IShoppingMallSale =>
    typia.random<IShoppingMallSale>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a shopping mall sale product by its ID.
 *
 * This API endpoint allows a sellerUser or adminUser to permanently delete a
 * product sale record identified by its unique saleId. The operation directly
 * removes the sale entry from the shopping_mall_sales table. Cascade deletion
 * ensures that associated sale snapshots, sale units, and inventory items are
 * removed to prevent orphaned records.
 *
 * Only users with 'sellerUser' or 'adminUser' roles have the authority to
 * perform this deletion due to the irreversible nature of the operation and its
 * impact on product catalogs and order consistency. Attempts by unauthorized
 * roles will be rejected.
 *
 * Upon successful deletion, no response body is returned, but appropriate HTTP
 * status codes communicate the result. Error handling covers cases such as
 * non-existent saleId or insufficient permissions. This operation removes
 * product data permanently and is not reversible through application logic.
 *
 * @param props.connection
 * @param props.saleId Unique identifier of the target sale product
 * @path /shoppingMall/sellerUser/sales/:saleId
 * @accessor api.functional.shoppingMall.sellerUser.sales.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target sale product */
    saleId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/sellerUser/sales/:saleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/sellerUser/sales/${encodeURIComponent(props.saleId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("saleId")(() => typia.assert(props.saleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
