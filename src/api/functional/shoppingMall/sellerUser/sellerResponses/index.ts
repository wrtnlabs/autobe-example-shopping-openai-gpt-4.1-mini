import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSellerResponse } from "../../../../structures/IShoppingMallSellerResponse";
import { IPageIShoppingMallSellerResponse } from "../../../../structures/IPageIShoppingMallSellerResponse";

/**
 * Create new seller response.
 *
 * Create a new seller response entry.
 *
 * Request body includes response text, author user ID, privacy, and status.
 *
 * Only authorized users with seller or admin roles may create responses.
 *
 * Returns the created seller response record.
 *
 * @param props.connection
 * @param props.body New seller response data
 * @path /shoppingMall/sellerUser/sellerResponses
 * @accessor api.functional.shoppingMall.sellerUser.sellerResponses.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New seller response data */
    body: IShoppingMallSellerResponse.ICreate;
  };
  export type Body = IShoppingMallSellerResponse.ICreate;
  export type Response = IShoppingMallSellerResponse;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/sellerUser/sellerResponses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/sellerUser/sellerResponses";
  export const random = (): IShoppingMallSellerResponse =>
    typia.random<IShoppingMallSellerResponse>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List seller responses with filtering options.
 *
 * Retrieve seller responses with pagination and filtering capabilities.
 *
 * Supports filtering by content, privacy, status, and author.
 *
 * Access restricted to members with proper seller or admin roles.
 *
 * Used to manage official seller communications to customers.
 *
 * @param props.connection
 * @param props.body Pagination and filter criteria for seller responses
 * @path /shoppingMall/sellerUser/sellerResponses
 * @accessor api.functional.shoppingMall.sellerUser.sellerResponses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Pagination and filter criteria for seller responses */
    body: IShoppingMallSellerResponse.IRequest;
  };
  export type Body = IShoppingMallSellerResponse.IRequest;
  export type Response = IPageIShoppingMallSellerResponse;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/sellerUser/sellerResponses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/sellerUser/sellerResponses";
  export const random = (): IPageIShoppingMallSellerResponse =>
    typia.random<IPageIShoppingMallSellerResponse>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific seller response.
 *
 * Retrieve detailed information of a seller response identified by id.
 *
 * Includes response content, author identification, privacy settings, status,
 * and metadata.
 *
 * Authorization required for seller or admin users.
 *
 * Supports management and audit of seller communications.
 *
 * @param props.connection
 * @param props.id Unique identifier of the seller response
 * @path /shoppingMall/sellerUser/sellerResponses/:id
 * @accessor api.functional.shoppingMall.sellerUser.sellerResponses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the seller response */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSellerResponse;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/sellerUser/sellerResponses/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/sellerUser/sellerResponses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallSellerResponse =>
    typia.random<IShoppingMallSellerResponse>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a seller response by ID.
 *
 * This operation updates a seller response record in the shopping mall backend
 * system. The seller response contains official replies from sellers to
 * customer inquiries or reviews, supporting private or public visibility and
 * status management.
 *
 * Users with sellerUser role authorization are permitted to update their
 * response content, privacy flags, and status to ensure accurate and timely
 * communication with customers.
 *
 * The operation modifies the shopping_mall_seller_responses table, referencing
 * the seller user and associated inquiry or review. It enforces authorization
 * checks, ensuring only legitimate sellers update their own responses.
 *
 * Validation ensures all required fields comply with the schema constraints,
 * and updates are atomic to maintain data consistency.
 *
 * This API operation is critical for maintaining seller-customer interaction
 * quality and enhancing customer support responsiveness.
 *
 * @param props.connection
 * @param props.id Unique identifier of the seller response to update
 * @param props.body Updated content and status of the seller response
 * @path /shoppingMall/sellerUser/sellerResponses/:id
 * @accessor api.functional.shoppingMall.sellerUser.sellerResponses.updateSellerResponse
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateSellerResponse(
  connection: IConnection,
  props: updateSellerResponse.Props,
): Promise<updateSellerResponse.Response> {
  return true === connection.simulate
    ? updateSellerResponse.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateSellerResponse.METADATA,
          path: updateSellerResponse.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateSellerResponse {
  export type Props = {
    /** Unique identifier of the seller response to update */
    id: string & tags.Format<"uuid">;

    /** Updated content and status of the seller response */
    body: IShoppingMallSellerResponse.IUpdate;
  };
  export type Body = IShoppingMallSellerResponse.IUpdate;
  export type Response = IShoppingMallSellerResponse;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/sellerUser/sellerResponses/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/sellerUser/sellerResponses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallSellerResponse =>
    typia.random<IShoppingMallSellerResponse>();
  export const simulate = (
    connection: IConnection,
    props: updateSellerResponse.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateSellerResponse.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a seller response by ID.
 *
 * This operation permanently deletes a seller response from the database.
 *
 * The seller response is an official message from a seller to a customer
 * inquiry or review.
 *
 * Removal of seller responses is restricted to authorized sellers who own the
 * response.
 *
 * This deletion operation ensures complete removal without retention,
 * supporting clean data management and compliance.
 *
 * No response body is returned upon successful deletion.
 *
 * @param props.connection
 * @param props.id Unique identifier of the seller response to delete
 * @path /shoppingMall/sellerUser/sellerResponses/:id
 * @accessor api.functional.shoppingMall.sellerUser.sellerResponses.eraseSellerResponse
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseSellerResponse(
  connection: IConnection,
  props: eraseSellerResponse.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseSellerResponse.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseSellerResponse.METADATA,
          path: eraseSellerResponse.path(props),
          status: null,
        },
      );
}
export namespace eraseSellerResponse {
  export type Props = {
    /** Unique identifier of the seller response to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/sellerUser/sellerResponses/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/sellerUser/sellerResponses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseSellerResponse.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseSellerResponse.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
