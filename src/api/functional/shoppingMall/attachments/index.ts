import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAttachments } from "../../../structures/IShoppingMallAttachments";

/**
 * Retrieve an attachment's metadata by ID.
 *
 * Retrieve detailed metadata of an attachment file specified by its UUID. This
 * includes file name, URL pointing to storage/CDN, media type (e.g.,
 * image/png), file size in bytes, optional upload IP address, and
 * created/updated timestamps.
 *
 * This is a safe, read-only operation used to fetch attachment details for
 * presentation or management.
 *
 * If the specified ID does not exist, a 404 error response will be returned.
 *
 * Authorization roles are not required or handled externally.
 *
 * The 'id' parameter must be a valid UUID in string format.
 *
 * @param props.connection
 * @param props.id UUID of the attachment to retrieve
 * @path /shoppingMall/attachments/:id
 * @accessor api.functional.shoppingMall.attachments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the attachment to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAttachments;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/attachments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/attachments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IShoppingMallAttachments =>
    typia.random<IShoppingMallAttachments>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
