import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSellerUser } from "../../../../../structures/IShoppingMallSellerUser";

/**
 * Authenticated seller user password change operation with old password
 * verification.
 *
 * This API operation allows logged-in seller users to change their password by
 * verifying the old password.
 *
 * It ensures the requester is authenticated and validates the old password hash
 * before securely updating to the new password.
 *
 * The operation is part of overall account security features for seller users.
 *
 * Additional logging and auditing may be applied for password changes.
 *
 * @param props.connection
 * @param props.body Request body containing old and new password details,
 *   following IShoppingMallSellerUser.IChangePassword structure.
 * @path /auth/sellerUser/password/change
 * @accessor api.functional.auth.sellerUser.password.change.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<void> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /**
     * Request body containing old and new password details, following
     * IShoppingMallSellerUser.IChangePassword structure.
     */
    body: IShoppingMallSellerUser.IChangePassword;
  };
  export type Body = IShoppingMallSellerUser.IChangePassword;

  export const METADATA = {
    method: "POST",
    path: "/auth/sellerUser/password/change",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/sellerUser/password/change";
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
