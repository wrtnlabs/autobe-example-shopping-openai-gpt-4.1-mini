import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSellerUser } from "../../../../../../structures/IShoppingMallSellerUser";

/**
 * Initiate password reset request for seller user accounts.
 *
 * This API operation initiates a password reset process for seller users who
 * have forgotten their password.
 *
 * It accepts the user's registered email and triggers a verification and
 * recovery email containing a secure token or link.
 *
 * This process adheres to security best practices ensuring that no sensitive
 * information is disclosed.
 *
 * The operation relates to password change and password reset confirmation APIs
 * forming a secure password recovery workflow.
 *
 * @param props.connection
 * @param props.body Seller user password reset request, including registered
 *   email address, following IShoppingMallSellerUser.IResetPasswordRequest
 *   structure.
 * @path /auth/sellerUser/password/reset/request
 * @accessor api.functional.auth.sellerUser.password.reset.request.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<void> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /**
     * Seller user password reset request, including registered email
     * address, following IShoppingMallSellerUser.IResetPasswordRequest
     * structure.
     */
    body: IShoppingMallSellerUser.IResetPasswordRequest;
  };
  export type Body = IShoppingMallSellerUser.IResetPasswordRequest;

  export const METADATA = {
    method: "POST",
    path: "/auth/sellerUser/password/reset/request",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/sellerUser/password/reset/request";
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
