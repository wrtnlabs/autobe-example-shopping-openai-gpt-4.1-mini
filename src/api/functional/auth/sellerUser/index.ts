import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSellerUser } from "../../../structures/IShoppingMallSellerUser";
export * as password from "./password/index";

/**
 * Create a new seller user account and issue initial authorization tokens, tied
 * to shopping_mall_sellerusers table.
 *
 * This API endpoint allows new seller users (members with seller permissions)
 * to register by providing required credentials and profile data in accordance
 * with the shopping_mall_sellerusers Prisma schema.
 *
 * The operation performs validation of unique fields including email and
 * business_registration_number and securely hashes the provided password before
 * storage.
 *
 * Upon successful registration, the system issues JWT access and refresh tokens
 * embedding seller user identity and roles, conforming to the
 * IShoppingMallSellerUser.IAuthorized type.
 *
 * This operation is intended to be publicly accessible to enable new seller
 * onboarding while ensuring data integrity and security.
 *
 * Related operations include the login and token refresh endpoints for
 * authentication lifecycle management.
 *
 * @param props.connection
 * @param props.body Seller user registration request body adhering to
 *   IShoppingMallSellerUser.ICreate structure.
 * @setHeader token.access Authorization
 *
 * @path /auth/sellerUser/join
 * @accessor api.functional.auth.sellerUser.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Seller user registration request body adhering to
     * IShoppingMallSellerUser.ICreate structure.
     */
    body: IShoppingMallSellerUser.ICreate;
  };
  export type Body = IShoppingMallSellerUser.ICreate;
  export type Response = IShoppingMallSellerUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/sellerUser/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/sellerUser/join";
  export const random = (): IShoppingMallSellerUser.IAuthorized =>
    typia.random<IShoppingMallSellerUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate seller user credentials and issue JWT tokens, linked to
 * shopping_mall_sellerusers table.
 *
 * This API endpoint authenticates seller users by verifying their email and
 * password against the stored hashed password in the shopping_mall_sellerusers
 * table.
 *
 * Security best practices are applied including throttling, temporal locking on
 * failed attempts, and hash comparison to prevent timing attacks.
 *
 * Successful authentication issues JWT tokens with encoded claims for seller
 * user identification allowing subsequent authorized requests.
 *
 * This operation is related to registration and refresh token endpoints that
 * manage the full authentication lifecycle.
 *
 * @param props.connection
 * @param props.body Seller user login request body following
 *   IShoppingMallSellerUser.ILogin structure with email and password.
 * @setHeader token.access Authorization
 *
 * @path /auth/sellerUser/login
 * @accessor api.functional.auth.sellerUser.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Seller user login request body following
     * IShoppingMallSellerUser.ILogin structure with email and password.
     */
    body: IShoppingMallSellerUser.ILogin;
  };
  export type Body = IShoppingMallSellerUser.ILogin;
  export type Response = IShoppingMallSellerUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/sellerUser/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/sellerUser/login";
  export const random = (): IShoppingMallSellerUser.IAuthorized =>
    typia.random<IShoppingMallSellerUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for seller users with valid refresh token, linked to
 * shopping_mall_sellerusers table.
 *
 * This API endpoint enables seller users to renew their JWT access tokens by
 * providing a valid refresh token.
 *
 * It validates the token against issued records and expiration constraints in
 * the system tied to the shopping_mall_sellerusers role.
 *
 * Upon validation, new access and refresh tokens are generated and returned
 * within the IShoppingMallSellerUser.IAuthorized response format.
 *
 * This complements the join and login operations, forming a complete token
 * lifecycle management for seller users.
 *
 * @param props.connection
 * @param props.body Request containing valid refresh token for seller user,
 *   following IShoppingMallSellerUser.IRefresh structure.
 * @setHeader token.access Authorization
 *
 * @path /auth/sellerUser/refresh
 * @accessor api.functional.auth.sellerUser.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Request containing valid refresh token for seller user, following
     * IShoppingMallSellerUser.IRefresh structure.
     */
    body: IShoppingMallSellerUser.IRefresh;
  };
  export type Body = IShoppingMallSellerUser.IRefresh;
  export type Response = IShoppingMallSellerUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/sellerUser/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/sellerUser/refresh";
  export const random = (): IShoppingMallSellerUser.IAuthorized =>
    typia.random<IShoppingMallSellerUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
