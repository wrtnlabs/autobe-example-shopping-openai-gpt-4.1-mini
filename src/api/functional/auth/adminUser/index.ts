import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAdminUser } from "../../../structures/IShoppingMallAdminUser";

/**
 * Create new admin user accounts and issue JWT tokens for authorization.
 *
 * The join operation creates new system administrator user accounts. It accepts
 * registration info including email, password, nickname, and full name.
 *
 * This process securely hashes passwords, validates unique email identities,
 * and assigns admin privileges. Upon successful registration, the system issues
 * JWT tokens allowing immediate authenticated access.
 *
 * This operation is public and designed with security best practices to prevent
 * unauthorized account creation and ensure admin user authenticity.
 *
 * Clients should provide accurate and valid inputs conforming to schema
 * constraints.
 *
 * This operation complements login and refresh endpoints to provide full admin
 * authentication lifecycle management.
 *
 * @param props.connection
 * @param props.body Information required to register a new admin user account.
 * @setHeader token.access Authorization
 *
 * @path /auth/adminUser/join
 * @accessor api.functional.auth.adminUser.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Information required to register a new admin user account. */
    body: IShoppingMallAdminUser.ICreate;
  };
  export type Body = IShoppingMallAdminUser.ICreate;
  export type Response = IShoppingMallAdminUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/adminUser/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/adminUser/join";
  export const random = (): IShoppingMallAdminUser.IAuthorized =>
    typia.random<IShoppingMallAdminUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate admin users and issue JWT access and refresh tokens.
 *
 * Authenticate system administrator users and issue JWT tokens.
 *
 * The operation validates administrator credentials against stored records in
 * shopping_mall_adminusers.
 *
 * On success, it issues JWT tokens that grant access to admin resources and
 * operations.
 *
 * Security mechanisms prevent brute force attacks and credential leaks.
 *
 * This operation pairs with join and refresh endpoints to maintain admin
 * authentication lifecycles.
 *
 * @param props.connection
 * @param props.body Login credentials for admin users.
 * @setHeader token.access Authorization
 *
 * @path /auth/adminUser/login
 * @accessor api.functional.auth.adminUser.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Login credentials for admin users. */
    body: IShoppingMallAdminUser.ILogin;
  };
  export type Body = IShoppingMallAdminUser.ILogin;
  export type Response = IShoppingMallAdminUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/adminUser/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/adminUser/login";
  export const random = (): IShoppingMallAdminUser.IAuthorized =>
    typia.random<IShoppingMallAdminUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT access tokens for admin users using a valid refresh token.
 *
 * Refresh JWT access tokens for authenticated admin users.
 *
 * The operation requires a valid refresh token and issues new authorization
 * tokens upon verification.
 *
 * It supports session continuity and secure token handling policies.
 *
 * Only accessible for authenticated admins with valid refresh tokens.
 *
 * Works alongside join and login endpoints to secure admin sessions.
 *
 * @param props.connection
 * @param props.body Refresh token request body containing the current refresh
 *   token.
 * @setHeader token.access Authorization
 *
 * @path /auth/adminUser/refresh
 * @accessor api.functional.auth.adminUser.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request body containing the current refresh token. */
    body: IShoppingMallAdminUser.IRefresh;
  };
  export type Body = IShoppingMallAdminUser.IRefresh;
  export type Response = IShoppingMallAdminUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/adminUser/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/adminUser/refresh";
  export const random = (): IShoppingMallAdminUser.IAuthorized =>
    typia.random<IShoppingMallAdminUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
