import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallGuestUser } from "../../../structures/IShoppingMallGuestUser";

/**
 * Create a temporary guest user account and issue access tokens using the
 * shopping_mall_guestusers table.
 *
 * This join operation is specifically designed for the guestUser role. It
 * creates a new guest user session without requiring traditional credential
 * validation, enabling temporary access and browsing capabilities. The
 * operation interfaces with the shopping_mall_guestusers table to persist
 * session metadata corresponding with generated JWT tokens.
 *
 * Security considerations include limited permission scopes for guest users and
 * tightly scoped token lifetimes. This operation is public and requires no
 * authentication, matching the guest user context.
 *
 * In the broader identity management flow, this operation provides a basis for
 * transitioning visitor sessions into registered member sessions, facilitating
 * data consistency.
 *
 * Token issuance strictly adheres to JWT standards with relevant claims
 * reflecting the guest user context.
 *
 * This operation does not involve password management or credential checks,
 * consistent with guest user limited access.
 *
 * Refreshing of guest tokens is handled by a separate refresh operation.
 *
 * @param props.connection
 * @param props.body Guest join request
 * @setHeader token.access Authorization
 *
 * @path /auth/guestUser/join
 * @accessor api.functional.auth.guestUser.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Guest join request */
    body: IShoppingMallGuestUser.IJoin;
  };
  export type Body = IShoppingMallGuestUser.IJoin;
  export type Response = IShoppingMallGuestUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guestUser/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guestUser/join";
  export const random = (): IShoppingMallGuestUser.IAuthorized =>
    typia.random<IShoppingMallGuestUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Renew temporary JWT tokens for guestUser based on valid refresh tokens.
 *
 * Refresh temporary access tokens for guestUser role using valid refresh
 * tokens. This operation involves validation of refresh tokens associated with
 * shopping_mall_guestusers sessions.
 *
 * It is designed for the guestUser role, which lacks traditional login
 * credentials, thus the refresh is the primary means of token renewal.
 *
 * Ensures secure token lifecycle management, preventing unauthorized refresh
 * attempts and maintaining session integrity.
 *
 * Integration with the shopping_mall_guestusers table allows tracking of active
 * guest sessions and refresh token validity.
 *
 * The operation strictly validates JWT refresh tokens and issues corresponding
 * access tokens following JWT standards.
 *
 * No password or credential validation is involved, consistent with the guest
 * user model.
 *
 * This operation must be invoked only with valid refresh tokens and appropriate
 * role claims.
 *
 * Complementary to guest join but excludes login as login is not applicable for
 * guests.
 *
 * Refresh token expiration policies apply as per security best practices for
 * guest sessions.
 *
 * @param props.connection
 * @param props.body Guest refresh token request
 * @setHeader token.access Authorization
 *
 * @path /auth/guestUser/refresh
 * @accessor api.functional.auth.guestUser.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Guest refresh token request */
    body: IShoppingMallGuestUser.IRefresh;
  };
  export type Body = IShoppingMallGuestUser.IRefresh;
  export type Response = IShoppingMallGuestUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guestUser/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guestUser/refresh";
  export const random = (): IShoppingMallGuestUser.IAuthorized =>
    typia.random<IShoppingMallGuestUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
