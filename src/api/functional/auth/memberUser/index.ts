import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallMemberUser } from "../../../structures/IShoppingMallMemberUser";

/**
 * Member user registration operation linked to the 'shopping_mall_memberusers'
 * table.
 *
 * This operation registers a new member user in the system by creating an
 * account record in the 'shopping_mall_memberusers' table. It requires
 * essential information such as email, password_hash, nickname, and full_name.
 * The registration flow includes validation of unique email constraints and
 * default status assignment. Soft deletion is monitored by the 'deleted_at'
 * timestamp, and lifecycle management is maintained through 'status' and audit
 * timestamps. Upon success, JWT tokens are issued encapsulated in the
 * standardized response type. This registration endpoint is publicly accessible
 * and serves as the entry point for new member users to join the shopping mall
 * platform.
 *
 * @param props.connection
 * @param props.body Member user registration payload including credentials and
 *   profile data.
 * @setHeader token.access Authorization
 *
 * @path /auth/memberUser/join
 * @accessor api.functional.auth.memberUser.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Member user registration payload including credentials and profile
     * data.
     */
    body: IShoppingMallMemberUser.ICreate;
  };
  export type Body = IShoppingMallMemberUser.ICreate;
  export type Response = IShoppingMallMemberUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/memberUser/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/memberUser/join";
  export const random = (): IShoppingMallMemberUser.IAuthorized =>
    typia.random<IShoppingMallMemberUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Member user login operation referencing the 'shopping_mall_memberusers'
 * table.
 *
 * This member user login operation authenticates users against the stored
 * credentials in the 'shopping_mall_memberusers' table. It checks user status
 * for active accounts and ensures that soft-deleted users are not permitted to
 * log in. Upon successful authentication, JWT access and refresh tokens are
 * generated and returned using the specified response type. This login endpoint
 * is publicly accessible and crucial for securing member user sessions and
 * access authorization.
 *
 * @param props.connection
 * @param props.body Member user login credentials containing email and
 *   password.
 * @setHeader token.access Authorization
 *
 * @path /auth/memberUser/login
 * @accessor api.functional.auth.memberUser.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Member user login credentials containing email and password. */
    body: IShoppingMallMemberUser.ILogin;
  };
  export type Body = IShoppingMallMemberUser.ILogin;
  export type Response = IShoppingMallMemberUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/memberUser/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/memberUser/login";
  export const random = (): IShoppingMallMemberUser.IAuthorized =>
    typia.random<IShoppingMallMemberUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Member user token refresh operation based on 'shopping_mall_memberusers'
 * table.
 *
 * This token refresh operation validates an existing refresh token for a member
 * user and issues new JWT access and refresh tokens. It ensures the user
 * account is active and not soft-deleted according to the
 * 'shopping_mall_memberusers' table constraints. This operation helps maintain
 * secure, continuous sessions by renewing tokens without full credential
 * re-entry. Access is authorized and requires a valid refresh token.
 *
 * @param props.connection
 * @param props.body Request payload containing refresh token for member user
 *   session renewal.
 * @setHeader token.access Authorization
 *
 * @path /auth/memberUser/refresh
 * @accessor api.functional.auth.memberUser.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Request payload containing refresh token for member user session
     * renewal.
     */
    body: IShoppingMallMemberUser.IRefresh;
  };
  export type Body = IShoppingMallMemberUser.IRefresh;
  export type Response = IShoppingMallMemberUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/memberUser/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/memberUser/refresh";
  export const random = (): IShoppingMallMemberUser.IAuthorized =>
    typia.random<IShoppingMallMemberUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
