import { tags } from "typia";

/**
 * Inventory entity managing stock for sale products by option combinations.
 *
 * Tracks available stock and supports soft deletion with audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallInventory = {
  /** Unique identifier of the inventory record. */
  id: string & tags.Format<"uuid">;

  /**
   * Associated product sale ID.
   *
   * References the product this inventory entry manages.
   */
  shopping_mall_sale_id: string & tags.Format<"uuid">;

  /**
   * Option combination code string.
   *
   * Represents the specific combination of sale options for this inventory
   * record.
   */
  option_combination_code: string;

  /**
   * Available stock quantity.
   *
   * Integer value representing current stock quantity for this option
   * combination. Typically zero or positive integer.
   */
  stock_quantity: number;

  /** Creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional logical deletion timestamp for soft delete.
   *
   * Nullable; null if record is active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallInventory {
  /**
   * Request payload for searching and paginating inventory items.
   *
   * Includes filters for sale ID, option combination code, stock quantity
   * range, and pagination controls.
   */
  export type IRequest = {
    /**
     * Sale product ID to filter inventory records.
     *
     * Nullable. If null or omitted, do not filter by sale.
     */
    saleId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter matching option combination codes.
     *
     * Nullable. Use partial match with wildcards if necessary.
     */
    optionCombinationCode?: string | null | undefined;

    /**
     * Minimum stock quantity filter.
     *
     * Nullable. Applies to filter inventory with stock_quantity >=
     * minQuantity.
     *
     * Must be a non-negative integer or null.
     */
    minQuantity?: number | null | undefined;

    /**
     * Maximum stock quantity filter.
     *
     * Nullable. Applies to filter inventory with stock_quantity <=
     * maxQuantity.
     *
     * Must be a non-negative integer or null.
     */
    maxQuantity?: number | null | undefined;

    /**
     * Pagination: page number starting at 1.
     *
     * Nullable. Defaults to 1 if omitted.
     *
     * Must be a positive integer.
     */
    page?: number | null | undefined;

    /**
     * Pagination: records per page limit.
     *
     * Nullable. Defaults to 20 or other configured limit.
     *
     * Must be a positive integer.
     */
    limit?: number | null | undefined;

    /**
     * Sorting field.
     *
     * Must match one of the sortable fields such as 'created_at',
     * 'stock_quantity'.
     *
     * Optional.
     */
    orderBy?: string | null | undefined;
  };

  /**
   * Create a new inventory record to track stock quantities for a specific
   * sale product option combination.
   *
   * The operation requires sale product ID, option combination code string,
   * and stock quantity in the request body.
   *
   * Authorization is limited to adminUser and sellerUser roles for security.
   * The response returns the created inventory entity with persisted
   * timestamps.
   */
  export type ICreate = {
    /** Associated product {@link shopping_mall_sales.id}. */
    shopping_mall_sale_id: string & tags.Format<"uuid">;

    /**
     * Code representing the combination of options this inventory record
     * applies to.
     */
    option_combination_code: string;

    /** Available stock quantity for this option combination. */
    stock_quantity: number & tags.Type<"int32">;
  };

  /**
   * Update specific inventory record with new stock quantity or option
   * combination code.
   *
   * The operation requires inventory ID path parameter and request body
   * containing updated inventory details.
   *
   * Authorized roles are adminUser and sellerUser. The response returns the
   * updated inventory record.
   */
  export type IUpdate = {
    /** Associated product {@link shopping_mall_sales.id}. */
    shopping_mall_sale_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Code representing the combination of options this inventory record
     * applies to.
     */
    option_combination_code?: string | null | undefined;

    /** Available stock quantity for this option combination. */
    stock_quantity?: (number & tags.Type<"int32">) | null | undefined;

    /** Logical deletion timestamp for soft delete. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary representation of shopping mall inventory, including IDs, option
   * combination, and stock quantity.
   */
  export type ISummary = {
    /**
     * Primary Key.
     *
     * Unique ID of the inventory record.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Belonged sale product ID.
     *
     * Reference for the product this inventory belongs to.
     */
    shopping_mall_sale_id: string & tags.Format<"uuid">;

    /**
     * Option combination code.
     *
     * Exact option code combination string.
     */
    option_combination_code: string;

    /**
     * Stock quantity.
     *
     * Current available stock.
     */
    stock_quantity: number & tags.Type<"int32">;
  };
}
