import { tags } from "typia";

/**
 * Snapshot representing immutable historical state of a sale product for audit
 * and rollback.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallSaleSnapshot = {
  /** Primary Key UUID of the sale snapshot. */
  id: string & tags.Format<"uuid">;

  /** Foreign Key to shopping_mall_sales. */
  shopping_mall_sale_id: string & tags.Format<"uuid">;

  /** Product code at snapshot time. */
  code: string;

  /** Product status at snapshot time. */
  status: string;

  /** Product name at snapshot time. */
  name: string;

  /** Optional product description at snapshot time. */
  description?: string | null | undefined;

  /** Product price at snapshot time. */
  price: number;

  /** Timestamp when snapshot was created. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallSaleSnapshot {
  /**
   * Request parameters for paginated sale snapshot search filtering. Allows
   * querying snapshots by various search criteria with pagination support.
   */
  export type IRequest = {
    /** Page number. */
    page: (number & tags.Type<"int32"> & tags.Minimum<1>) | null;

    /** Limit of records per page. */
    limit: (number & tags.Type<"int32"> & tags.Minimum<1>) | null;

    /**
     * Optional filter criteria. Can filter snapshots by search text,
     * associated sale ID, date ranges, status list, and price range.
     */
    filter?:
      | {
          /** Text string to filter snapshots by matching name or code. */
          searchText?: string | null | undefined;

          /** Specific sale ID to filter snapshots. */
          saleId?: (string & tags.Format<"uuid">) | null | undefined;

          /** Filters snapshots created on or after this date/time. */
          createdAfter?: (string & tags.Format<"date-time">) | null | undefined;

          /** Filters snapshots created before this date/time. */
          createdBefore?:
            | (string & tags.Format<"date-time">)
            | null
            | undefined;

          /** List of sale status strings to filter. */
          statuses?: string[] | null | undefined;

          /** Minimum price to filter snapshots. */
          minPrice?: number | null | undefined;

          /** Maximum price to filter snapshots. */
          maxPrice?: number | null | undefined;
        }
      | undefined;
  };

  /**
   * Summary information of a sale snapshot representing a specific version of
   * a sale product.
   *
   * Includes read-only historical data captured at snapshot creation for
   * audit and rollback.
   */
  export type ISummary = {
    /** Unique identifier of the sale snapshot. */
    id: string & tags.Format<"uuid">;

    /** Sale product ID this snapshot belongs to. */
    shopping_mall_sale_id: string & tags.Format<"uuid">;

    /** Product code at snapshot time. */
    code: string;

    /** Product status at snapshot time. */
    status: string;

    /** Product name at snapshot time. */
    name: string;

    /** Optional description at snapshot time. */
    description?: string | null | undefined;

    /** Price at snapshot time. */
    price: number;

    /** Snapshot creation timestamp. */
    created_at: string & tags.Format<"date-time">;
  };
}
