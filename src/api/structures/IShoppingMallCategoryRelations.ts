import { tags } from "typia";

/**
 * Entity schema representing a parent-child hierarchical relation between
 * categories in the shopping mall.
 *
 * Includes unique identifiers for both parent and child categories, along with
 * audit timestamps.
 *
 * Supports soft deletion via deleted_at nullable timestamp.
 *
 * Used to build and maintain category hierarchies crucial for product
 * classification and navigation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallCategoryRelations = {
  /** Primary key identifier of the category relation */
  id: string & tags.Format<"uuid">;

  /** UUID of the parent category entity */
  parent_shopping_mall_category_id: string & tags.Format<"uuid">;

  /** UUID of the child category entity */
  child_shopping_mall_category_id: string & tags.Format<"uuid">;

  /** Timestamp when the relation was created */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the relation was last updated */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the relation was soft deleted */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallCategoryRelations {
  /**
   * Request type for searching and filtering shopping mall category
   * relations.
   *
   * Includes optional filters on category IDs, parent and child categories,
   * timestamps, deletion status, and pagination.
   *
   * Enables precise querying of category hierarchy relations in the mall.
   *
   * Pagination and sorting assist efficient data retrieval.
   */
  export type IRequest = {
    /** Category ID filter (nullable) */
    categoryId?: (string & tags.Format<"uuid">) | null | undefined;

    /** Parent category UUID filter (nullable) */
    parent_shopping_mall_category_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Child category UUID filter (nullable) */
    child_shopping_mall_category_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Filter for creation timestamp from (nullable) */
    created_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for creation timestamp to (nullable) */
    created_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for update timestamp from (nullable) */
    updated_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for update timestamp to (nullable) */
    updated_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter to include only deleted records if true (nullable) */
    deleted_at?: boolean | null | undefined;

    /** Page number for pagination (nullable) */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Number of records per page for pagination (nullable) */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Sort criteria (nullable) */
    sort?: string | null | undefined;
  };

  /**
   * Request type for creating a new parent-child category relation in the
   * shopping mall.
   *
   * Requires both parent and child category UUIDs.
   *
   * Establishes a new hierarchical link in the category tree.
   */
  export type ICreate = {
    /** UUID of the parent category for the relation */
    parent_shopping_mall_category_id: string & tags.Format<"uuid">;

    /** UUID of the child category for the relation */
    child_shopping_mall_category_id: string & tags.Format<"uuid">;
  };

  /**
   * Request type for updating an existing parent-child category relation.
   *
   * Properties include parent and child category UUIDs and timestamps, all
   * optional for partial updates.
   *
   * Supports soft deletion via deleted_at timestamp.
   */
  export type IUpdate = {
    /** UUID of the parent category in the relation */
    parent_shopping_mall_category_id?:
      | (string & tags.Format<"uuid">)
      | undefined;

    /** UUID of the child category in the relation */
    child_shopping_mall_category_id?:
      | (string & tags.Format<"uuid">)
      | undefined;

    /** Creation timestamp of the relation */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /** Last update timestamp */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp when the relation was soft deleted */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary of shopping mall category relations with parent and child IDs and
   * timestamps.
   */
  export type ISummary = {
    /**
     * Primary Key.
     *
     * Unique identifier of the category relation.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Parent category ID.
     *
     * References the parent category in the relation.
     */
    parent_shopping_mall_category_id: string & tags.Format<"uuid">;

    /**
     * Child category ID.
     *
     * References the child category in the relation.
     */
    child_shopping_mall_category_id: string & tags.Format<"uuid">;

    /**
     * Relation establishment timestamp.
     *
     * ISO 8601 date-time when the relation was created.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last update timestamp.
     *
     * ISO 8601 date-time when the relation was last updated.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
