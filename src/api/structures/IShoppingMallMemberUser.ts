import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Member user information representing registered customers with authentication
 * credentials and profile data. Members can make purchases, manage orders, and
 * participate in reviews.
 *
 * Stores essential information including unique email, password hash, nickname,
 * full name, optional phone number, current status, and audit timestamps.
 *
 * Soft deletion is supported via the deleted_at timestamp for compliance.
 *
 * This table is central to managing shopping mall customers requiring login and
 * personalization.
 *
 * All sensitive fields such as password hashes are protected and not exposed in
 * response bodies without security controls.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallMemberUser = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Member's unique email address used for login and communication. */
  email: string;

  /** Hashed password for member authentication. */
  password_hash: string;

  /** Nickname chosen by the member for display. */
  nickname: string;

  /** Full name of the member for official documentation. */
  full_name: string;

  /** Contact phone number of the member. */
  phone_number?: string | null | undefined;

  /**
   * Current status or lifecycle state of the member account (e.g., active,
   * suspended, closed).
   */
  status: string;

  /** Account creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when member account was logically deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallMemberUser {
  /**
   * Request payload to create a new member user account.
   *
   * Excludes auto-generated ID and timestamps.
   *
   * Excludes password hash in responses except during creation.
   */
  export type ICreate = {
    /** Member's registered unique email address. */
    email: string;

    /**
     * Plain password string for initial account creation.
     *
     * MUST be hashed by server.
     *
     * Included in creation request only.
     */
    password_hash: string;

    /** Nickname chosen by the member user. */
    nickname: string;

    /** Full legal name of the member user. */
    full_name: string;

    /** Optional phone number string. */
    phone_number?: string | null | undefined;

    /** Initial member user status. */
    status: string;
  };

  /**
   * Authorization response including id and JWT token.
   *
   * Excludes password_hash.
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated member user. */
    id: string & tags.Format<"uuid">;

    /** Member's unique email address used for login and communication. */
    email: string;

    /** Hashed password for member authentication. */
    password_hash: string;

    /** Nickname chosen by the member for display. */
    nickname: string;

    /** Full name of the member for official documentation. */
    full_name: string;

    /** Contact phone number of the member. */
    phone_number?: string | null | undefined;

    /**
     * Current status or lifecycle state of the member account (e.g.,
     * active, suspended, closed).
     */
    status: string;

    /** Account creation timestamp. */
    created_at: string & tags.Format<"date-time">;

    /** Last update timestamp. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp when member account was logically deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** User login credentials for the shopping mall member user. */
  export type ILogin = {
    /**
     * Member's unique email address used for login and communication.
     *
     * You should provide a valid email string matching official member
     * email.
     *
     * Example: "user@example.com"
     */
    email: string & tags.Format<"email">;

    /**
     * Member user's plain text login password.
     *
     * This is the raw secret password the user provides on login.
     *
     * Although hashed_password is stored, login payload expects plain text
     * password to verify credentials.
     *
     * The password must be strong, secure, and comply with backend password
     * policy.
     *
     * Example: "P@ssword123!"
     */
    password: string;
  };

  /** Refresh token payload for shopping mall member user session renewal. */
  export type IRefresh = {
    /**
     * JWT refresh token string provided to renew access tokens.
     *
     * The token must be valid and unexpired.
     *
     * Example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
     */
    refreshToken: string;
  };

  /**
   * Request parameters for filtering and paginating member user list.
   * Provides flexible searching, sorting, and paging for member user
   * management interfaces.
   */
  export type IRequest = {
    /** Email address of the member user for filtering. */
    email?: string | null | undefined;

    /** Nickname of the member user for filtering. */
    nickname?: string | null | undefined;

    /** Lifecycle status of the member user for filtering. */
    status?: string | null | undefined;

    /** Creation timestamp filter. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Update timestamp filter. */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp of deletion for filtering. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Limit of records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Fulltext search string for member user aggregation. */
    search?: string | null | undefined;

    /** Field to order the results by. */
    orderBy?: string | null | undefined;

    /** Sort direction: 'asc' or 'desc'. */
    direction?: string | null | undefined;
  };

  /**
   * Update payload for member user entity. Supports modifications of email,
   * password hash, nickname, full name, phone number, status, and audit
   * timestamps.
   */
  export type IUpdate = {
    /** Member's unique email address used for login and communication. */
    email?: string | undefined;

    /** Hashed password for member authentication. */
    password_hash?: string | undefined;

    /** Nickname chosen by the member for display. */
    nickname?: string | undefined;

    /** Full name of the member for official documentation. */
    full_name?: string | undefined;

    /** Contact phone number of the member. */
    phone_number?: string | null | undefined;

    /**
     * Current status or lifecycle state of the member account (e.g.,
     * active, suspended, closed).
     */
    status?: string | undefined;

    /** Account creation timestamp. */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /** Last update timestamp. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp when member account was logically deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information of registered member users providing essential
   * profile and account status details. This summary omits sensitive
   * properties and focuses on display-ready data for list views and
   * references.
   */
  export type ISummary = {
    /** Unique identifier of the member user account. */
    id: string & tags.Format<"uuid">;

    /** Registered email address of the member for login and communication. */
    email: string;

    /** Display name or nickname chosen by the member user. */
    nickname: string;

    /** Full legal name of the member user. */
    full_name: string;

    /**
     * Current status or lifecycle state of the member user account, such as
     * active, suspended, or closed.
     */
    status: string;

    /** Timestamp when the member user account was created. */
    created_at: string & tags.Format<"date-time">;
  };
}
