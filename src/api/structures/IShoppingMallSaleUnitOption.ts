import { tags } from "typia";

/**
 * A sale unit option representing configurable options attached to a sale unit.
 *
 * Includes pricing adjustment and available stock management.
 *
 * Mapped to the shopping_mall_sale_unit_options table in the database.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallSaleUnitOption = {
  /** Primary key of the sale unit option record */
  id: string & tags.Format<"uuid">;

  /** Reference to associated sale unit */
  shopping_mall_sale_unit_id: string & tags.Format<"uuid">;

  /** Reference to associated sale option */
  shopping_mall_sale_option_id: string & tags.Format<"uuid">;

  /** Additional price increment introduced by this option unit */
  additional_price: number;

  /** Available stock quantity for this option unit */
  stock_quantity: number & tags.Type<"int32">;

  /** Record creation timestamp */
  created_at: string & tags.Format<"date-time">;

  /** Last record update timestamp */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null if the record is active */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallSaleUnitOption {
  /** Request parameters for searching and paginating sale unit options. */
  export type IRequest = {
    /** Filter by sale unit ID (UUID) */
    saleUnitId?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by sale option ID (UUID) */
    saleOptionId?: (string & tags.Format<"uuid">) | null | undefined;

    /** Page number for pagination */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Number of items per page */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Optional sort field with order */
    sort?: string | undefined;

    /** Optional filter string */
    filter?: string | undefined;
  };

  /** Creation payload for a new sale unit option. All properties are required. */
  export type ICreate = {
    /** Belonged sale unit ID to which this option applies */
    shopping_mall_sale_unit_id: string & tags.Format<"uuid">;

    /** Belonged sale option ID selected */
    shopping_mall_sale_option_id: string & tags.Format<"uuid">;

    /** Incremental price added by this option */
    additional_price: number;

    /** Stock quantity available for this option */
    stock_quantity: number & tags.Type<"int32">;
  };

  /** Partial update payload for sale unit option. All properties are optional. */
  export type IUpdate = {
    /** Belonged sale unit ID (optional for update) */
    shopping_mall_sale_unit_id?: (string & tags.Format<"uuid">) | undefined;

    /** Selected sale option ID (optional for update) */
    shopping_mall_sale_option_id?: (string & tags.Format<"uuid">) | undefined;

    /** Updated additional price (optional) */
    additional_price?: number | undefined;

    /** Updated stock quantity (optional) */
    stock_quantity?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Summary of a sale unit option detailing pricing increments and stock
   * availability.
   *
   * Essential for product option management and inventory control.
   */
  export type ISummary = {
    /** Unique identifier of the sale unit option. */
    id: string & tags.Format<"uuid">;

    /** Sale unit ID this option belongs to. */
    shopping_mall_sale_unit_id: string & tags.Format<"uuid">;

    /** Sale option ID applied to this unit. */
    shopping_mall_sale_option_id: string & tags.Format<"uuid">;

    /** Additional price added by this option. */
    additional_price: number;

    /** Stock quantity available for the option. */
    stock_quantity: number & tags.Type<"int32">;

    /** Creation timestamp. */
    created_at: string & tags.Format<"date-time">;

    /** Last update timestamp. */
    updated_at: string & tags.Format<"date-time">;
  };
}
