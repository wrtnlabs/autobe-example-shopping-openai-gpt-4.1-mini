import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Represents a member with seller permissions including identity, contact,
 * authentication, and business registration details.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallSellerUser = {
  /** Primary Key as UUID of the seller user */
  id: string & tags.Format<"uuid">;

  /** Unique email address of the seller user */
  email: string;

  /** Hashed password for seller authentication */
  password_hash: string;

  /** Display nickname of the seller user */
  nickname: string;

  /** Full legal name of the seller user */
  full_name: string;

  /** Contact phone number of the seller user */
  phone_number?: string | null | undefined;

  /** Operational status of the seller user */
  status: string;

  /** Unique business registration number of the seller user */
  business_registration_number: string;

  /** Account creation timestamp */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp */
  updated_at: string & tags.Format<"date-time">;

  /** Deletion timestamp for soft delete */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallSellerUser {
  /** Creation payload for registering a new seller user. */
  export type ICreate = {
    /**
     * Seller's unique email address used for login and communication.
     *
     * Must be a valid email.
     *
     * Example: "seller@example.com"
     */
    email: string & tags.Format<"email">;

    /**
     * Plain text password for the seller user on registration.
     *
     * Will be hashed by backend.
     *
     * Must comply with password policy.
     *
     * Example: "P@ssword123!"
     */
    password: string;

    /**
     * Nickname chosen by seller for display.
     *
     * Example: "BestSeller"
     */
    nickname: string;

    /**
     * Full name of the seller for official documents.
     *
     * Example: "John Doe"
     */
    full_name: string;

    /**
     * Contact phone number.
     *
     * Optional, format: "+1234567890"
     */
    phone_number?: string | null | undefined;

    /**
     * Official business registration number.
     *
     * Unique per seller.
     *
     * Example: "BRN123456789"
     */
    business_registration_number: string;
  };

  /** Authorization response with tokens and profile for the seller user. */
  export type IAuthorized = {
    /** Unique identifier of the authenticated seller user */
    id: string & tags.Format<"uuid">;

    /** Seller user's email */
    email: string & tags.Format<"email">;

    /** Hashed password for seller authentication */
    password_hash: string;

    /** Seller user's nickname */
    nickname: string;

    /** Seller user's full name */
    full_name: string;

    /** Contact phone number of the seller user */
    phone_number?: string | null | undefined;

    /** Current status of the seller account */
    status: string;

    /** Unique business registration number of the seller user */
    business_registration_number: string;

    /** Account creation timestamp */
    created_at: string & tags.Format<"date-time">;

    /** Last update timestamp */
    updated_at: string & tags.Format<"date-time">;

    /** Deletion timestamp for soft delete */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT access token issued after authentication */
    accessToken?: string | undefined;

    /** JWT refresh token for renewing access tokens */
    refreshToken?: string | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Seller user login credentials payload */
  export type ILogin = {
    /** Seller's email address used for login */
    email: string & tags.Format<"email">;

    /** Plain text password for login authentication */
    password: string;
  };

  /**
   * Payload for refreshing JWT tokens for seller user authentication.
   *
   * This includes only the refresh token string.
   */
  export type IRefresh = {
    /** The JWT refresh token string used to obtain new access tokens. */
    refreshToken: string;
  };

  /** Request payload for seller user password reset initiation. */
  export type IResetPasswordRequest = {
    /**
     * Registered email address of the seller user requesting a password
     * reset.
     */
    email: string & tags.Format<"email">;
  };

  /**
   * Request payload for confirming password reset with new password and reset
   * token received by email.
   */
  export type IResetPasswordConfirm = {
    /**
     * Secure token received in password reset email allowing password
     * change.
     */
    resetToken: string;

    /** The new password chosen by the seller user. */
    newPassword: string;
  };

  /** Request payload for authenticated seller users to change their password. */
  export type IChangePassword = {
    /** Current password of the seller user for verification. */
    oldPassword: string;

    /** New password the seller user wants to set. */
    newPassword: string;
  };

  /** Request parameters for searching and paginating seller users. */
  export type IRequest = {
    /** Page number for pagination */
    page?: number | null | undefined;

    /** Record limit per page */
    limit?: number | null | undefined;

    /** Search string to query seller users by email, nickname, or full name */
    search?: string | null | undefined;

    /** Status filter for seller users, e.g., active, pending, or suspended. */
    status?: string | null | undefined;

    /**
     * Sort criteria string for ordering results by fields like email or
     * created_at.
     */
    sort?: string | null | undefined;
  };

  /** Properties for updating seller user information. */
  export type IUpdate = {
    /** Email address of the seller user; must be unique. */
    email?: string | undefined;

    /** Hashed password for authentication; stored securely. */
    password_hash?: string | undefined;

    /** Public nickname for display in the platform. */
    nickname?: string | undefined;

    /** Member's full legal name. */
    full_name?: string | undefined;

    /** Optional contact phone number of the seller. */
    phone_number?: string | null | undefined;

    /** Operational status of the seller, e.g., active or suspended. */
    status?: string | undefined;

    /** Seller's unique business registration number. */
    business_registration_number?: string | undefined;
  };

  /**
   * Summary information of registered seller users including essential
   * contact, business registration number, and status. This type excludes
   * sensitive authentication details and focuses on data used for list
   * display and verification.
   */
  export type ISummary = {
    /** Unique identifier of the seller user account. */
    id: string & tags.Format<"uuid">;

    /** Registered email address of the seller user. */
    email: string;

    /** Nickname or display handle chosen by the seller user. */
    nickname: string;

    /** Full legal name of the seller user. */
    full_name: string;

    /**
     * Current lifecycle status of the seller user account, e.g. active,
     * pending, suspended.
     */
    status: string;

    /** Official business registration number assigned to the seller user. */
    business_registration_number: string;

    /** Timestamp when the seller user account was created. */
    created_at: string & tags.Format<"date-time">;
  };
}
