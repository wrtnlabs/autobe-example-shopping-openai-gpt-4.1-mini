import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_guestUser_join } from "../../../providers/post__auth_guestUser_join";
import { GuestuserAuth } from "../../../decorators/GuestuserAuth";
import { GuestuserPayload } from "../../../decorators/payload/GuestuserPayload";
import { post__auth_guestUser_refresh } from "../../../providers/post__auth_guestUser_refresh";

import { IShoppingMallGuestUser } from "../../../api/structures/IShoppingMallGuestUser";

@Controller("/auth/guestUser")
export class AuthGuestuserController {
  /**
   * Create a temporary guest user account and issue access tokens using the
   * shopping_mall_guestusers table.
   *
   * This join operation is specifically designed for the guestUser role. It
   * creates a new guest user session without requiring traditional credential
   * validation, enabling temporary access and browsing capabilities. The
   * operation interfaces with the shopping_mall_guestusers table to persist
   * session metadata corresponding with generated JWT tokens.
   *
   * Security considerations include limited permission scopes for guest users
   * and tightly scoped token lifetimes. This operation is public and requires
   * no authentication, matching the guest user context.
   *
   * In the broader identity management flow, this operation provides a basis
   * for transitioning visitor sessions into registered member sessions,
   * facilitating data consistency.
   *
   * Token issuance strictly adheres to JWT standards with relevant claims
   * reflecting the guest user context.
   *
   * This operation does not involve password management or credential checks,
   * consistent with guest user limited access.
   *
   * Refreshing of guest tokens is handled by a separate refresh operation.
   *
   * @param connection
   * @param body Guest join request
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
    @TypedBody()
    body: IShoppingMallGuestUser.IJoin,
  ): Promise<IShoppingMallGuestUser.IAuthorized> {
    try {
      return await post__auth_guestUser_join({
        guestUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Renew temporary JWT tokens for guestUser based on valid refresh tokens.
   *
   * Refresh temporary access tokens for guestUser role using valid refresh
   * tokens. This operation involves validation of refresh tokens associated
   * with shopping_mall_guestusers sessions.
   *
   * It is designed for the guestUser role, which lacks traditional login
   * credentials, thus the refresh is the primary means of token renewal.
   *
   * Ensures secure token lifecycle management, preventing unauthorized refresh
   * attempts and maintaining session integrity.
   *
   * Integration with the shopping_mall_guestusers table allows tracking of
   * active guest sessions and refresh token validity.
   *
   * The operation strictly validates JWT refresh tokens and issues
   * corresponding access tokens following JWT standards.
   *
   * No password or credential validation is involved, consistent with the guest
   * user model.
   *
   * This operation must be invoked only with valid refresh tokens and
   * appropriate role claims.
   *
   * Complementary to guest join but excludes login as login is not applicable
   * for guests.
   *
   * Refresh token expiration policies apply as per security best practices for
   * guest sessions.
   *
   * @param connection
   * @param body Guest refresh token request
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
    @TypedBody()
    body: IShoppingMallGuestUser.IRefresh,
  ): Promise<IShoppingMallGuestUser.IAuthorized> {
    try {
      return await post__auth_guestUser_refresh({
        guestUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
