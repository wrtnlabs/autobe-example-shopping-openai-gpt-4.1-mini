import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_adminUser_join } from "../../../providers/post__auth_adminUser_join";
import { AdminuserAuth } from "../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../decorators/payload/AdminuserPayload";
import { post__auth_adminUser_login } from "../../../providers/post__auth_adminUser_login";
import { post__auth_adminUser_refresh } from "../../../providers/post__auth_adminUser_refresh";

import { IShoppingMallAdminUser } from "../../../api/structures/IShoppingMallAdminUser";

@Controller("/auth/adminUser")
export class AuthAdminuserController {
  /**
   * Create new admin user accounts and issue JWT tokens for authorization.
   *
   * The join operation creates new system administrator user accounts. It
   * accepts registration info including email, password, nickname, and full
   * name.
   *
   * This process securely hashes passwords, validates unique email identities,
   * and assigns admin privileges. Upon successful registration, the system
   * issues JWT tokens allowing immediate authenticated access.
   *
   * This operation is public and designed with security best practices to
   * prevent unauthorized account creation and ensure admin user authenticity.
   *
   * Clients should provide accurate and valid inputs conforming to schema
   * constraints.
   *
   * This operation complements login and refresh endpoints to provide full
   * admin authentication lifecycle management.
   *
   * @param connection
   * @param body Information required to register a new admin user account.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallAdminUser.ICreate,
  ): Promise<IShoppingMallAdminUser.IAuthorized> {
    try {
      return await post__auth_adminUser_join({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate admin users and issue JWT access and refresh tokens.
   *
   * Authenticate system administrator users and issue JWT tokens.
   *
   * The operation validates administrator credentials against stored records in
   * shopping_mall_adminusers.
   *
   * On success, it issues JWT tokens that grant access to admin resources and
   * operations.
   *
   * Security mechanisms prevent brute force attacks and credential leaks.
   *
   * This operation pairs with join and refresh endpoints to maintain admin
   * authentication lifecycles.
   *
   * @param connection
   * @param body Login credentials for admin users.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallAdminUser.ILogin,
  ): Promise<IShoppingMallAdminUser.IAuthorized> {
    try {
      return await post__auth_adminUser_login({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT access tokens for admin users using a valid refresh token.
   *
   * Refresh JWT access tokens for authenticated admin users.
   *
   * The operation requires a valid refresh token and issues new authorization
   * tokens upon verification.
   *
   * It supports session continuity and secure token handling policies.
   *
   * Only accessible for authenticated admins with valid refresh tokens.
   *
   * Works alongside join and login endpoints to secure admin sessions.
   *
   * @param connection
   * @param body Refresh token request body containing the current refresh
   *   token.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallAdminUser.IRefresh,
  ): Promise<IShoppingMallAdminUser.IAuthorized> {
    try {
      return await post__auth_adminUser_refresh({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
