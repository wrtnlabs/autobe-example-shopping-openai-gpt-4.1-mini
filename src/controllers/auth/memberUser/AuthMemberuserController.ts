import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_memberUser_join } from "../../../providers/post__auth_memberUser_join";
import { post__auth_memberUser_login } from "../../../providers/post__auth_memberUser_login";
import { post__auth_memberUser_refresh } from "../../../providers/post__auth_memberUser_refresh";

import { IShoppingMallMemberUser } from "../../../api/structures/IShoppingMallMemberUser";

@Controller("/auth/memberUser")
export class AuthMemberuserController {
  /**
   * Member user registration operation linked to the
   * 'shopping_mall_memberusers' table.
   *
   * This operation registers a new member user in the system by creating an
   * account record in the 'shopping_mall_memberusers' table. It requires
   * essential information such as email, password_hash, nickname, and
   * full_name. The registration flow includes validation of unique email
   * constraints and default status assignment. Soft deletion is monitored by
   * the 'deleted_at' timestamp, and lifecycle management is maintained through
   * 'status' and audit timestamps. Upon success, JWT tokens are issued
   * encapsulated in the standardized response type. This registration endpoint
   * is publicly accessible and serves as the entry point for new member users
   * to join the shopping mall platform.
   *
   * @param connection
   * @param body Member user registration payload including credentials and
   *   profile data.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IShoppingMallMemberUser.ICreate,
  ): Promise<IShoppingMallMemberUser.IAuthorized> {
    try {
      return await post__auth_memberUser_join({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Member user login operation referencing the 'shopping_mall_memberusers'
   * table.
   *
   * This member user login operation authenticates users against the stored
   * credentials in the 'shopping_mall_memberusers' table. It checks user status
   * for active accounts and ensures that soft-deleted users are not permitted
   * to log in. Upon successful authentication, JWT access and refresh tokens
   * are generated and returned using the specified response type. This login
   * endpoint is publicly accessible and crucial for securing member user
   * sessions and access authorization.
   *
   * @param connection
   * @param body Member user login credentials containing email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IShoppingMallMemberUser.ILogin,
  ): Promise<IShoppingMallMemberUser.IAuthorized> {
    try {
      return await post__auth_memberUser_login({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Member user token refresh operation based on 'shopping_mall_memberusers'
   * table.
   *
   * This token refresh operation validates an existing refresh token for a
   * member user and issues new JWT access and refresh tokens. It ensures the
   * user account is active and not soft-deleted according to the
   * 'shopping_mall_memberusers' table constraints. This operation helps
   * maintain secure, continuous sessions by renewing tokens without full
   * credential re-entry. Access is authorized and requires a valid refresh
   * token.
   *
   * @param connection
   * @param body Request payload containing refresh token for member user
   *   session renewal.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IShoppingMallMemberUser.IRefresh,
  ): Promise<IShoppingMallMemberUser.IAuthorized> {
    try {
      return await post__auth_memberUser_refresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
