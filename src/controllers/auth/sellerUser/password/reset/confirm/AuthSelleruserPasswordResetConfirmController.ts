import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_sellerUser_password_reset_confirm } from "../../../../../../providers/post__auth_sellerUser_password_reset_confirm";
import { SelleruserAuth } from "../../../../../../decorators/SelleruserAuth";
import { SelleruserPayload } from "../../../../../../decorators/payload/SelleruserPayload";

import { IShoppingMallSellerUser } from "../../../../../../api/structures/IShoppingMallSellerUser";

@Controller("/auth/sellerUser/password/reset/confirm")
export class AuthSelleruserPasswordResetConfirmController {
  /**
   * Confirm and apply new password for seller user password reset.
   *
   * This API operation confirms the password reset request by verifying the
   * reset token and setting the new password for the seller user.
   *
   * It validates token authenticity, expiration, and associated user, then
   * updates the password securely.
   *
   * This operation finalizes the password recovery workflow complementing the
   * reset request initiation.
   *
   * Secure handling of token and password hashing is mandatory.
   *
   * @param connection
   * @param body Seller user password reset confirmation including reset token
   *   and new password, following IShoppingMallSellerUser.IResetPasswordConfirm
   *   structure.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async confirmPasswordReset(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedBody()
    body: IShoppingMallSellerUser.IResetPasswordConfirm,
  ): Promise<void> {
    try {
      return await post__auth_sellerUser_password_reset_confirm({
        sellerUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
