import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_sellerUser_password_change } from "../../../../../providers/post__auth_sellerUser_password_change";
import { SelleruserAuth } from "../../../../../decorators/SelleruserAuth";
import { SelleruserPayload } from "../../../../../decorators/payload/SelleruserPayload";

import { IShoppingMallSellerUser } from "../../../../../api/structures/IShoppingMallSellerUser";

@Controller("/auth/sellerUser/password/change")
export class AuthSelleruserPasswordChangeController {
  /**
   * Authenticated seller user password change operation with old password
   * verification.
   *
   * This API operation allows logged-in seller users to change their password
   * by verifying the old password.
   *
   * It ensures the requester is authenticated and validates the old password
   * hash before securely updating to the new password.
   *
   * The operation is part of overall account security features for seller
   * users.
   *
   * Additional logging and auditing may be applied for password changes.
   *
   * @param connection
   * @param body Request body containing old and new password details, following
   *   IShoppingMallSellerUser.IChangePassword structure.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async changePassword(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedBody()
    body: IShoppingMallSellerUser.IChangePassword,
  ): Promise<void> {
    try {
      return await post__auth_sellerUser_password_change({
        sellerUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
