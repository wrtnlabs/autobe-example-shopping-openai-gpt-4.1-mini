import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions } from "../../../../../../providers/post__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions";
import { SelleruserAuth } from "../../../../../../decorators/SelleruserAuth";
import { SelleruserPayload } from "../../../../../../decorators/payload/SelleruserPayload";
import { patch__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions } from "../../../../../../providers/patch__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions";
import { get__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions_$saleUnitOptionId } from "../../../../../../providers/get__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions_$saleUnitOptionId";
import { put__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions_$saleUnitOptionId } from "../../../../../../providers/put__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions_$saleUnitOptionId";
import { delete__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions_$saleUnitOptionId } from "../../../../../../providers/delete__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions_$saleUnitOptionId";

import { IShoppingMallSaleUnitOption } from "../../../../../../api/structures/IShoppingMallSaleUnitOption";
import { IPageIShoppingMallSaleUnitOption } from "../../../../../../api/structures/IPageIShoppingMallSaleUnitOption";

@Controller(
  "/shoppingMall/sellerUser/sales/:saleId/saleUnits/:saleUnitId/saleUnitOptions",
)
export class ShoppingmallSelleruserSalesSaleunitsSaleunitoptionsController {
  /**
   * Create a new sale unit option under a specific sale unit. Requires
   * providing option references, additional price, and stock details.
   *
   * Access control applies: only sellerUser or adminUser users can create sale
   * unit options.
   *
   * This operation ensures product configuration flexibility by adding option
   * variations at the unit level linked to the sale product.
   *
   * @param connection
   * @param saleId Unique identifier of the target sale product
   * @param saleUnitId Unique identifier of the target sale unit
   * @param body Information needed to create a sale unit option
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedParam("saleUnitId")
    saleUnitId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSaleUnitOption.ICreate,
  ): Promise<IShoppingMallSaleUnitOption> {
    try {
      return await post__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions(
        {
          sellerUser,
          saleId,
          saleUnitId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List sale unit options for a specific sale unit.
   *
   * Retrieve a paginated list of sale unit options for the specified sale unit
   * under a sale product. This allows clients to browse all configuration
   * options available for the product unit including price increments and stock
   * quantities.
   *
   * Users require appropriate permissions to view product sale option details.
   *
   * This operation references the shopping_mall_sale_unit_options table and is
   * linked to shopping_mall_sale_units and shopping_mall_sales entities. It
   * returns summary information optimized for list displays.
   *
   * Response includes pagination metadata and supports sorting and filtering by
   * option group, option code, and other attributes.
   *
   * @param connection
   * @param saleId Unique identifier of the target sale product
   * @param saleUnitId Unique identifier of the target sale unit
   * @param body Request parameters for filtering, searching and paginating sale
   *   unit options
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedParam("saleUnitId")
    saleUnitId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSaleUnitOption.IRequest,
  ): Promise<IPageIShoppingMallSaleUnitOption.ISummary> {
    try {
      return await patch__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions(
        {
          sellerUser,
          saleId,
          saleUnitId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed sale unit option information.
   *
   * Retrieve detailed information for a specific sale unit option under a given
   * sale unit. The response includes all option properties, additional pricing,
   * stock quantity, and related metadata.
   *
   * Security: Only authenticated users with sellerUser or adminUser roles can
   * access this endpoint.
   *
   * This operation is crucial for managing detailed option configurations and
   * adjustments for product units in the sales system.
   *
   * @param connection
   * @param saleId Unique identifier of the target sale product
   * @param saleUnitId Unique identifier of the target sale unit
   * @param saleUnitOptionId Unique identifier of the target sale unit option
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":saleUnitOptionId")
  public async at(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedParam("saleUnitId")
    saleUnitId: string & tags.Format<"uuid">,
    @TypedParam("saleUnitOptionId")
    saleUnitOptionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSaleUnitOption> {
    try {
      return await get__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions_$saleUnitOptionId(
        {
          sellerUser,
          saleId,
          saleUnitId,
          saleUnitOptionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a sale unit option.
   *
   * Update an existing sale unit option with new details such as additional
   * price and stock.
   *
   * Only authorized sellerUser or adminUser users may perform this operation.
   *
   * This operation supports product options management and pricing adjustment
   * workflows.
   *
   * @param connection
   * @param saleId Unique identifier of the target sale product
   * @param saleUnitId Unique identifier of the target sale unit
   * @param saleUnitOptionId Unique identifier of the target sale unit option
   * @param body Data to update sale unit option fields
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":saleUnitOptionId")
  public async update(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedParam("saleUnitId")
    saleUnitId: string & tags.Format<"uuid">,
    @TypedParam("saleUnitOptionId")
    saleUnitOptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSaleUnitOption.IUpdate,
  ): Promise<IShoppingMallSaleUnitOption> {
    try {
      return await put__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions_$saleUnitOptionId(
        {
          sellerUser,
          saleId,
          saleUnitId,
          saleUnitOptionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a sale unit option permanently.
   *
   * Permanently delete a sale unit option from a sale unit. Operation requires
   * high privilege through sellerUser or adminUser roles.
   *
   * The record is hard deleted from the database and cannot be recovered.
   *
   * This operation is essential for maintaining clean and accurate product unit
   * configurations.
   *
   * @param connection
   * @param saleId Unique identifier of the target sale product
   * @param saleUnitId Unique identifier of the target sale unit
   * @param saleUnitOptionId Unique identifier of the target sale unit option
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":saleUnitOptionId")
  public async erase(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedParam("saleUnitId")
    saleUnitId: string & tags.Format<"uuid">,
    @TypedParam("saleUnitOptionId")
    saleUnitOptionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_sellerUser_sales_$saleId_saleUnits_$saleUnitId_saleUnitOptions_$saleUnitOptionId(
        {
          sellerUser,
          saleId,
          saleUnitId,
          saleUnitOptionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
