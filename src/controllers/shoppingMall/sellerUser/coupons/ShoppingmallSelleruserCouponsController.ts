import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMall_sellerUser_coupons } from "../../../../providers/patch__shoppingMall_sellerUser_coupons";
import { SelleruserAuth } from "../../../../decorators/SelleruserAuth";
import { SelleruserPayload } from "../../../../decorators/payload/SelleruserPayload";
import { get__shoppingMall_sellerUser_coupons_$couponId } from "../../../../providers/get__shoppingMall_sellerUser_coupons_$couponId";

import { IPageIShoppingMallCoupon } from "../../../../api/structures/IPageIShoppingMallCoupon";
import { IShoppingMallCoupon } from "../../../../api/structures/IShoppingMallCoupon";

@Controller("/shoppingMall/sellerUser/coupons")
export class ShoppingmallSelleruserCouponsController {
  /**
   * Search and list discount coupons.
   *
   * Search and retrieve discount coupons with advanced filtering and pagination
   * capabilities.
   *
   * This endpoint allows administrators, sellers, and members to access
   * available coupons subject to their permissions.
   *
   * Coupons support amount and percentage discounts with conditions and
   * expiration dates.
   *
   * The underlying data originates from the shopping_mall_coupons table
   * managing coupon metadata, conditions, and usage logs.
   *
   * @param connection
   * @param body Coupon search criteria
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedBody()
    body: IShoppingMallCoupon.IRequest,
  ): Promise<IPageIShoppingMallCoupon.ISummary> {
    try {
      return await patch__shoppingMall_sellerUser_coupons({
        sellerUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve coupon detail by ID.
   *
   * Get detailed coupon information by coupon ID.
   *
   * Accessible by administrators, sellers, and members.
   *
   * Provides complete coupon properties, status, and usage rules.
   *
   * @param connection
   * @param couponId Unique ID of the coupon
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":couponId")
  public async at(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCoupon> {
    try {
      return await get__shoppingMall_sellerUser_coupons_$couponId({
        sellerUser,
        couponId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
