import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_sellerUser_orders_$orderId_items } from "../../../../../providers/post__shoppingMall_sellerUser_orders_$orderId_items";
import { SelleruserAuth } from "../../../../../decorators/SelleruserAuth";
import { SelleruserPayload } from "../../../../../decorators/payload/SelleruserPayload";
import { patch__shoppingMall_sellerUser_orders_$orderId_items } from "../../../../../providers/patch__shoppingMall_sellerUser_orders_$orderId_items";
import { get__shoppingMall_sellerUser_orders_$orderId_items_$orderItemId } from "../../../../../providers/get__shoppingMall_sellerUser_orders_$orderId_items_$orderItemId";
import { put__shoppingMall_sellerUser_orders_$orderId_items_$orderItemId } from "../../../../../providers/put__shoppingMall_sellerUser_orders_$orderId_items_$orderItemId";
import { delete__shoppingMall_sellerUser_orders_$orderId_items_$orderItemId } from "../../../../../providers/delete__shoppingMall_sellerUser_orders_$orderId_items_$orderItemId";

import { IShoppingMallOrderItem } from "../../../../../api/structures/IShoppingMallOrderItem";
import { IPageIShoppingMallOrderItem } from "../../../../../api/structures/IPageIShoppingMallOrderItem";

@Controller("/shoppingMall/sellerUser/orders/:orderId/items")
export class ShoppingmallSelleruserOrdersItemsController {
  /**
   * Add a new order item to a specific order.
   *
   * Create a new order item within a specified order. Authorized users
   * (guestUser, memberUser, sellerUser, adminUser) can add products associated
   * with specific snapshots to existing orders.
   *
   * Security considerations require user authentication and permission
   * validation to prevent unauthorized order modifications.
   *
   * This operation relates to the shopping_mall_order_items table, requiring
   * valid references to existing orders and product snapshots.
   *
   * Validation includes ensuring quantity and price are positive numbers and
   * the product snapshot exists.
   *
   * On success, returns the full detailed order item record.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param body Details of the order item to create
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderItem.ICreate,
  ): Promise<IShoppingMallOrderItem> {
    try {
      return await post__shoppingMall_sellerUser_orders_$orderId_items({
        sellerUser,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List order items for a specified order.
   *
   * Retrieve a paginated list of order items within a specific order identified
   * by orderId.
   *
   * The list includes detailed information about each item such as quantity,
   * price, and status.
   *
   * Authorization roles supported are guestUser, memberUser, sellerUser, and
   * adminUser.
   *
   * Errors occur if orderId is invalid or unauthorized access is attempted.
   *
   * @param connection
   * @param orderId Unique identifier of the order
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexOrderItems(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<IPageIShoppingMallOrderItem> {
    try {
      return await patch__shoppingMall_sellerUser_orders_$orderId_items({
        sellerUser,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific order item information by orderId and orderItemId.
   *
   * Retrieve detailed information of a specific order item within an order.
   * This operation allows authorized users (guestUser, memberUser, sellerUser,
   * adminUser) to fetch data regarding a particular item ordered by the
   * customer, referencing the product snapshot at the time of order placement
   * to ensure consistency. The order item includes details such as quantity
   * ordered and unit price.
   *
   * Security: Only authorized roles can access order items.
   *
   * The operation relates to the shopping_mall_order_items database table,
   * which holds individual order line items referencing the
   * shopping_mall_orders (via orderId) and shopping_mall_sale_snapshots
   * (product snapshot).
   *
   * Validation: Both 'orderId' and 'orderItemId' must be valid UUID strings
   * identifying existing records. If the item or order does not exist, a
   * suitable error response should be returned.
   *
   * Expected behavior: Returns a single shopping mall order item entity
   * matching the specified identifiers with full detail.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param orderItemId Unique identifier of the target order item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderItemId")
  public async at(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("orderItemId")
    orderItemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderItem> {
    try {
      return await get__shoppingMall_sellerUser_orders_$orderId_items_$orderItemId(
        {
          sellerUser,
          orderId,
          orderItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific order item within an order.
   *
   * Update an existing order item belonging to a specific order. Authorized
   * users (guestUser, memberUser, sellerUser, adminUser) can modify order item
   * details such as quantity, price, and status.
   *
   * Security measures ensure only authorized roles can perform updates.
   *
   * The shopping_mall_order_items table is the source of truth, with updates
   * validated against existing order and product snapshot references.
   *
   * Validation includes ensuring no negative values for quantities and valid
   * statuses.
   *
   * Returns the updated order item information.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param orderItemId Unique identifier of the target order item
   * @param body Updated details of the order item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":orderItemId")
  public async update(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("orderItemId")
    orderItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderItem.IUpdate,
  ): Promise<IShoppingMallOrderItem> {
    try {
      return await put__shoppingMall_sellerUser_orders_$orderId_items_$orderItemId(
        {
          sellerUser,
          orderId,
          orderItemId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase a specific order item from an order.
   *
   * Delete a specific order item permanently from an order. This operation
   * removes the record completely from the database.
   *
   * Only authorized roles (guestUser, memberUser, sellerUser, adminUser) can
   * perform this action.
   *
   * The deletion affects the shopping_mall_order_items table as identified by
   * the parameters.
   *
   * No request body is required. On successful deletion, no response body is
   * returned.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param orderItemId Unique identifier of the order item to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":orderItemId")
  public async erase(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("orderItemId")
    orderItemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_sellerUser_orders_$orderId_items_$orderItemId(
        {
          sellerUser,
          orderId,
          orderItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
