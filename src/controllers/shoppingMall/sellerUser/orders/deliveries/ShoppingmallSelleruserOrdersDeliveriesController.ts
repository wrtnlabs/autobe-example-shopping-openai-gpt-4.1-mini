import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_sellerUser_orders_$orderId_deliveries } from "../../../../../providers/post__shoppingMall_sellerUser_orders_$orderId_deliveries";
import { SelleruserAuth } from "../../../../../decorators/SelleruserAuth";
import { SelleruserPayload } from "../../../../../decorators/payload/SelleruserPayload";
import { patch__shoppingMall_sellerUser_orders_$orderId_deliveries } from "../../../../../providers/patch__shoppingMall_sellerUser_orders_$orderId_deliveries";
import { get__shoppingMall_sellerUser_orders_$orderId_deliveries_$deliveryId } from "../../../../../providers/get__shoppingMall_sellerUser_orders_$orderId_deliveries_$deliveryId";
import { put__shoppingMall_sellerUser_orders_$orderId_deliveries_$deliveryId } from "../../../../../providers/put__shoppingMall_sellerUser_orders_$orderId_deliveries_$deliveryId";
import { delete__shoppingMall_sellerUser_orders_$orderId_deliveries_$deliveryId } from "../../../../../providers/delete__shoppingMall_sellerUser_orders_$orderId_deliveries_$deliveryId";

import { IShoppingMallDelivery } from "../../../../../api/structures/IShoppingMallDelivery";
import { IPageIShoppingMallDelivery } from "../../../../../api/structures/IPageIShoppingMallDelivery";

@Controller("/shoppingMall/sellerUser/orders/:orderId/deliveries")
export class ShoppingmallSelleruserOrdersDeliveriesController {
  /**
   * Create a delivery record for an order.
   *
   * Create a new delivery entry under a specified order. This is key for
   * tracking shipments and managing delivery stages, expected dates, and
   * related metadata.
   *
   * @param connection
   * @param orderId Unique ID of the order to add a delivery record for
   * @param body Delivery creation information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallDelivery.ICreate,
  ): Promise<IShoppingMallDelivery> {
    try {
      return await post__shoppingMall_sellerUser_orders_$orderId_deliveries({
        sellerUser,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve delivery records for a given order.
   *
   * Retrieve a filtered and paginated list of delivery records associated with
   * a specific order. The operation supports advanced filtering criteria,
   * sorting, and pagination to manage large numbers of shipments efficiently.
   *
   * Only users with appropriate access roles such as administrators and sellers
   * (involved with the order) may access this operation due to sensitive
   * shipment information.
   *
   * This operation bases its data on the shopping_mall_deliveries table and
   * provides insights into the shipping and delivery process states, helpful
   * for order fulfillment tracking and customer service.
   *
   * Response includes detailed delivery information including status, stage,
   * expected dates, and timestamps.
   *
   * @param connection
   * @param orderId Unique ID of the order to retrieve deliveries for
   * @param body Delivery search and filtering criteria
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallDelivery.IRequest,
  ): Promise<IPageIShoppingMallDelivery.ISummary> {
    try {
      return await patch__shoppingMall_sellerUser_orders_$orderId_deliveries({
        sellerUser,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get delivery detail by delivery ID.
   *
   * Retrieve detailed information about a specific delivery record linked to an
   * order. This supports shipment tracking with comprehensive delivery
   * lifecycle data and status.
   *
   * @param connection
   * @param orderId Unique ID of the order containing the delivery
   * @param deliveryId Unique ID of the delivery record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":deliveryId")
  public async at(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallDelivery> {
    try {
      return await get__shoppingMall_sellerUser_orders_$orderId_deliveries_$deliveryId(
        {
          sellerUser,
          orderId,
          deliveryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update delivery record for an order.
   *
   * Update a delivery record identified by its delivery ID within a specific
   * order. Supports changes to delivery lifecycle stage, status, and scheduling
   * information.
   *
   * @param connection
   * @param orderId Unique ID of the order containing the delivery to update
   * @param deliveryId Unique ID of the delivery record to update
   * @param body Delivery update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":deliveryId")
  public async update(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallDelivery.IUpdate,
  ): Promise<IShoppingMallDelivery> {
    try {
      return await put__shoppingMall_sellerUser_orders_$orderId_deliveries_$deliveryId(
        {
          sellerUser,
          orderId,
          deliveryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a delivery record from an order.
   *
   * Delete a delivery record by delivery ID under an order. This operation
   * permanently removes shipment tracking data from the system.
   *
   * @param connection
   * @param orderId Unique ID of the order containing the delivery to delete
   * @param deliveryId Unique ID of the delivery record to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":deliveryId")
  public async erase(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_sellerUser_orders_$orderId_deliveries_$deliveryId(
        {
          sellerUser,
          orderId,
          deliveryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
