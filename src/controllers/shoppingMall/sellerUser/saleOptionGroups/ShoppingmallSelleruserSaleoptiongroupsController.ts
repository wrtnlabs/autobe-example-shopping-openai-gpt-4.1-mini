import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_sellerUser_saleOptionGroups } from "../../../../providers/post__shoppingMall_sellerUser_saleOptionGroups";
import { SelleruserAuth } from "../../../../decorators/SelleruserAuth";
import { SelleruserPayload } from "../../../../decorators/payload/SelleruserPayload";
import { patch__shoppingMall_sellerUser_saleOptionGroups } from "../../../../providers/patch__shoppingMall_sellerUser_saleOptionGroups";
import { get__shoppingMall_sellerUser_saleOptionGroups_$saleOptionGroupId } from "../../../../providers/get__shoppingMall_sellerUser_saleOptionGroups_$saleOptionGroupId";
import { put__shoppingMall_sellerUser_saleOptionGroups_$saleOptionGroupId } from "../../../../providers/put__shoppingMall_sellerUser_saleOptionGroups_$saleOptionGroupId";
import { delete__shoppingMall_sellerUser_saleOptionGroups_$saleOptionGroupId } from "../../../../providers/delete__shoppingMall_sellerUser_saleOptionGroups_$saleOptionGroupId";

import { IShoppingMallSaleOptionGroup } from "../../../../api/structures/IShoppingMallSaleOptionGroup";
import { IPageIShoppingMallSaleOptionGroup } from "../../../../api/structures/IPageIShoppingMallSaleOptionGroup";

@Controller("/shoppingMall/sellerUser/saleOptionGroups")
export class ShoppingmallSelleruserSaleoptiongroupsController {
  /**
   * Create a new sale option group.
   *
   * Receives option group information and saves it to the database.
   *
   * Performs validation on input data including uniqueness of code.
   *
   * Returns the newly created option group for confirmation.
   *
   * Restricted to users with roles such as adminUser and sellerUser.
   *
   * Errors may include duplicate code or invalid input format.
   *
   * Ensures atomic creation and transactional integrity.
   *
   * @param connection
   * @param body New sale option group creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedBody()
    body: IShoppingMallSaleOptionGroup.ICreate,
  ): Promise<IShoppingMallSaleOptionGroup> {
    try {
      return await post__shoppingMall_sellerUser_saleOptionGroups({
        sellerUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve sale option groups list.
   *
   * Retrieve a filtered and paginated list of sale option groups.
   *
   * Supports search by code, name and status with pagination and sorting.
   *
   * Accessible by administrators and sellers for managing option groups.
   *
   * Returns summarized information about each option group for display in
   * listings.
   *
   * Useful for building UI components that allow selection or management of
   * sale option groups.
   *
   * Ensures efficient querying with appropriate indexes and filtering
   * capabilities.
   *
   * Supports empty or partial search parameters to return broad or targeted
   * results.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for sale option
   *   groups
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedBody()
    body: IShoppingMallSaleOptionGroup.IRequest,
  ): Promise<IPageIShoppingMallSaleOptionGroup.ISummary> {
    try {
      return await patch__shoppingMall_sellerUser_saleOptionGroups({
        sellerUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get sale option group detail by ID.
   *
   * Retrieve details of a specific sale option group by its ID.
   *
   * Includes all relevant metadata such as code, name, and timestamps.
   *
   * Required authorization ensures that only privileged users can access
   * detailed option group data.
   *
   * Useful for viewing or editing purposes in management interfaces.
   *
   * Errors will be returned if the specified option group ID does not exist.
   *
   * Security checks validate user permissions before data retrieval.
   *
   * @param connection
   * @param saleOptionGroupId Unique identifier of the sale option group to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":saleOptionGroupId")
  public async at(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("saleOptionGroupId")
    saleOptionGroupId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSaleOptionGroup> {
    try {
      return await get__shoppingMall_sellerUser_saleOptionGroups_$saleOptionGroupId(
        {
          sellerUser,
          saleOptionGroupId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update sale option group by ID.
   *
   * Update sale option group details by ID.
   *
   * Allows modification of option group name, code, and other attributes.
   *
   * Requires administrator or seller authorization.
   *
   * Validation ensures data integrity and uniqueness constraints.
   *
   * Returns the updated option group object upon success.
   *
   * Errors occur if the ID does not exist or validation fails.
   *
   * Useful for managing option group lifecycle in the platform.
   *
   * @param connection
   * @param saleOptionGroupId Unique identifier of the sale option group to
   *   update
   * @param body Updated sale option group data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":saleOptionGroupId")
  public async update(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("saleOptionGroupId")
    saleOptionGroupId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSaleOptionGroup.IUpdate,
  ): Promise<IShoppingMallSaleOptionGroup> {
    try {
      return await put__shoppingMall_sellerUser_saleOptionGroups_$saleOptionGroupId(
        {
          sellerUser,
          saleOptionGroupId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete sale option group by ID.
   *
   * Delete a sale option group permanently by ID.
   *
   * This hard deletion removes all related option group data.
   *
   * Requires administrative or seller-level authorization.
   *
   * Once deleted, the action cannot be undone.
   *
   * Errors are returned if the group ID is not found.
   *
   * Ensure that dependencies such as linked sale options are handled
   * appropriately.
   *
   * Security checks prevent unauthorized deletions.
   *
   * @param connection
   * @param saleOptionGroupId Unique identifier of the sale option group to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":saleOptionGroupId")
  public async erase(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("saleOptionGroupId")
    saleOptionGroupId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_sellerUser_saleOptionGroups_$saleOptionGroupId(
        {
          sellerUser,
          saleOptionGroupId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
