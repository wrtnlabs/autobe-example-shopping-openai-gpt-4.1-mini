import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_sellerUser_sellerResponses } from "../../../../providers/post__shoppingMall_sellerUser_sellerResponses";
import { SelleruserAuth } from "../../../../decorators/SelleruserAuth";
import { SelleruserPayload } from "../../../../decorators/payload/SelleruserPayload";
import { patch__shoppingMall_sellerUser_sellerResponses } from "../../../../providers/patch__shoppingMall_sellerUser_sellerResponses";
import { get__shoppingMall_sellerUser_sellerResponses_$id } from "../../../../providers/get__shoppingMall_sellerUser_sellerResponses_$id";
import { put__shoppingMall_sellerUser_sellerResponses_$id } from "../../../../providers/put__shoppingMall_sellerUser_sellerResponses_$id";
import { delete__shoppingMall_sellerUser_sellerResponses_$id } from "../../../../providers/delete__shoppingMall_sellerUser_sellerResponses_$id";

import { IShoppingMallSellerResponse } from "../../../../api/structures/IShoppingMallSellerResponse";
import { IPageIShoppingMallSellerResponse } from "../../../../api/structures/IPageIShoppingMallSellerResponse";

@Controller("/shoppingMall/sellerUser/sellerResponses")
export class ShoppingmallSelleruserSellerresponsesController {
  /**
   * Create new seller response.
   *
   * Create a new seller response entry.
   *
   * Request body includes response text, author user ID, privacy, and status.
   *
   * Only authorized users with seller or admin roles may create responses.
   *
   * Returns the created seller response record.
   *
   * @param connection
   * @param body New seller response data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedBody()
    body: IShoppingMallSellerResponse.ICreate,
  ): Promise<IShoppingMallSellerResponse> {
    try {
      return await post__shoppingMall_sellerUser_sellerResponses({
        sellerUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List seller responses with filtering options.
   *
   * Retrieve seller responses with pagination and filtering capabilities.
   *
   * Supports filtering by content, privacy, status, and author.
   *
   * Access restricted to members with proper seller or admin roles.
   *
   * Used to manage official seller communications to customers.
   *
   * @param connection
   * @param body Pagination and filter criteria for seller responses
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedBody()
    body: IShoppingMallSellerResponse.IRequest,
  ): Promise<IPageIShoppingMallSellerResponse> {
    try {
      return await patch__shoppingMall_sellerUser_sellerResponses({
        sellerUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific seller response.
   *
   * Retrieve detailed information of a seller response identified by id.
   *
   * Includes response content, author identification, privacy settings, status,
   * and metadata.
   *
   * Authorization required for seller or admin users.
   *
   * Supports management and audit of seller communications.
   *
   * @param connection
   * @param id Unique identifier of the seller response
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSellerResponse> {
    try {
      return await get__shoppingMall_sellerUser_sellerResponses_$id({
        sellerUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a seller response by ID.
   *
   * This operation updates a seller response record in the shopping mall
   * backend system. The seller response contains official replies from sellers
   * to customer inquiries or reviews, supporting private or public visibility
   * and status management.
   *
   * Users with sellerUser role authorization are permitted to update their
   * response content, privacy flags, and status to ensure accurate and timely
   * communication with customers.
   *
   * The operation modifies the shopping_mall_seller_responses table,
   * referencing the seller user and associated inquiry or review. It enforces
   * authorization checks, ensuring only legitimate sellers update their own
   * responses.
   *
   * Validation ensures all required fields comply with the schema constraints,
   * and updates are atomic to maintain data consistency.
   *
   * This API operation is critical for maintaining seller-customer interaction
   * quality and enhancing customer support responsiveness.
   *
   * @param connection
   * @param id Unique identifier of the seller response to update
   * @param body Updated content and status of the seller response
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateSellerResponse(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSellerResponse.IUpdate,
  ): Promise<IShoppingMallSellerResponse> {
    try {
      return await put__shoppingMall_sellerUser_sellerResponses_$id({
        sellerUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a seller response by ID.
   *
   * This operation permanently deletes a seller response from the database.
   *
   * The seller response is an official message from a seller to a customer
   * inquiry or review.
   *
   * Removal of seller responses is restricted to authorized sellers who own the
   * response.
   *
   * This deletion operation ensures complete removal without retention,
   * supporting clean data management and compliance.
   *
   * No response body is returned upon successful deletion.
   *
   * @param connection
   * @param id Unique identifier of the seller response to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseSellerResponse(
    @SelleruserAuth()
    sellerUser: SelleruserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_sellerUser_sellerResponses_$id({
        sellerUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
