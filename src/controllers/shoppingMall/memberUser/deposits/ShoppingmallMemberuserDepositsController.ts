import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_memberUser_deposits } from "../../../../providers/post__shoppingMall_memberUser_deposits";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { patch__shoppingMall_memberUser_deposits } from "../../../../providers/patch__shoppingMall_memberUser_deposits";
import { get__shoppingMall_memberUser_deposits_$depositId } from "../../../../providers/get__shoppingMall_memberUser_deposits_$depositId";
import { put__shoppingMall_memberUser_deposits_$depositId } from "../../../../providers/put__shoppingMall_memberUser_deposits_$depositId";
import { delete__shoppingMall_memberUser_deposits_$depositId } from "../../../../providers/delete__shoppingMall_memberUser_deposits_$depositId";

import { IShoppingMallDeposit } from "../../../../api/structures/IShoppingMallDeposit";
import { IPageIShoppingMallDeposit } from "../../../../api/structures/IPageIShoppingMallDeposit";

@Controller("/shoppingMall/memberUser/deposits")
export class ShoppingmallMemberuserDepositsController {
  /**
   * Create a new customer deposit record.
   *
   * Create a new deposit record for a customer account. Requires details
   * including deposit amount, usable balance, and validity periods.
   *
   * Only authenticated users with the 'memberUser' role can perform this
   * operation.
   *
   * Returns the newly created deposit record for confirmation.
   *
   * @param connection
   * @param body Deposit creation information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallDeposit.ICreate,
  ): Promise<IShoppingMallDeposit> {
    try {
      return await post__shoppingMall_memberUser_deposits({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of deposits.
   *
   * Retrieve a paginated and filtered list of customer deposits. Enables search
   * by user, deposit amount range, validity period, and status.
   *
   * Access limited to authenticated users with 'memberUser' role to protect
   * financial data.
   *
   * Results include deposit balances and timestamps for auditing and customer
   * service purposes.
   *
   * @param connection
   * @param body Deposit search criteria
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallDeposit.IRequest,
  ): Promise<IPageIShoppingMallDeposit.ISummary> {
    try {
      return await patch__shoppingMall_memberUser_deposits({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed deposit information by ID.
   *
   * Retrieve detailed information for a single deposit record identified by
   * depositId.
   *
   * Requires authenticated 'memberUser' role for access. Returns deposit
   * amount, usable balance, validity period, and timestamps.
   *
   * Supports customer service scenarios where detailed deposit info is
   * required.
   *
   * @param connection
   * @param depositId Unique identifier of the target deposit record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":depositId")
  public async at(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("depositId")
    depositId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallDeposit> {
    try {
      return await get__shoppingMall_memberUser_deposits_$depositId({
        memberUser,
        depositId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing deposit record with new deposit information. The deposit
   * entity is linked optionally to guest or member users, and stores both the
   * total deposit amount and the usable balance. The valid period of the
   * deposit can also be adjusted.
   *
   * Security considerations require that only authorized users can update
   * deposit information, with appropriate user context to ensure permissions
   * correspond to the owning user.
   *
   * This operation relates to the shopping_mall_deposits table, which maintains
   * deposit and balance records. Validation includes checking for valid deposit
   * amounts and date ranges.
   *
   * Errors can occur if the specified depositId does not exist or if data
   * validation fails. Proper error handling and status codes must be
   * implemented.
   *
   * @param connection
   * @param depositId Target deposit's unique identifier
   * @param body Updated deposit information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":depositId")
  public async updateDeposit(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("depositId")
    depositId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallDeposit.IUpdate,
  ): Promise<IShoppingMallDeposit> {
    try {
      return await put__shoppingMall_memberUser_deposits_$depositId({
        memberUser,
        depositId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an existing deposit record permanently from the database. This is a
   * hard delete and completely removes the data.
   *
   * Only authorized users may perform this operation. The depositId path
   * parameter uniquely identifies the deposit to delete.
   *
   * No request body is required. The response contains no content.
   *
   * This operation affects the shopping_mall_deposits table directly, removing
   * the record identified by depositId.
   *
   * @param connection
   * @param depositId Target deposit's unique identifier
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":depositId")
  public async eraseDeposit(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("depositId")
    depositId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_memberUser_deposits_$depositId({
        memberUser,
        depositId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
