import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_memberUser_depositCharges } from "../../../../providers/post__shoppingMall_memberUser_depositCharges";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { patch__shoppingMall_memberUser_depositCharges } from "../../../../providers/patch__shoppingMall_memberUser_depositCharges";
import { get__shoppingMall_memberUser_depositCharges_$depositChargeId } from "../../../../providers/get__shoppingMall_memberUser_depositCharges_$depositChargeId";
import { put__shoppingMall_memberUser_depositCharges_$depositChargeId } from "../../../../providers/put__shoppingMall_memberUser_depositCharges_$depositChargeId";
import { delete__shoppingMall_memberUser_depositCharges_$depositChargeId } from "../../../../providers/delete__shoppingMall_memberUser_depositCharges_$depositChargeId";

import { IShoppingMallDepositCharge } from "../../../../api/structures/IShoppingMallDepositCharge";
import { IPageIShoppingMallDepositCharge } from "../../../../api/structures/IPageIShoppingMallDepositCharge";

@Controller("/shoppingMall/memberUser/depositCharges")
export class ShoppingmallMemberuserDepositchargesController {
  /**
   * Create a new deposit charge application with required payment and user
   * details.
   *
   * The system records the charge request, initial status, and association with
   * the user.
   *
   * The operation returns the created deposit charge record for confirmation
   * and further processing.
   *
   * This creation aligns with the shopping_mall_deposit_charges schema,
   * ensuring all data consistency rules are followed.
   *
   * @param connection
   * @param body Creation information of the deposit charge application
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createDepositCharge(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallDepositCharge.ICreate,
  ): Promise<IShoppingMallDepositCharge> {
    try {
      return await post__shoppingMall_memberUser_depositCharges({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search deposit charge applications.
   *
   * Search and retrieve a list of deposit charge application records filtered
   * by various criteria including status, payment provider, user, and date
   * range.
   *
   * This operation supports pagination, sorting, and filtering to manage large
   * data sets effectively.
   *
   * It operates on the shopping_mall_deposit_charges table which records
   * deposit charging requests and their processing status.
   *
   * Authorized users can filter results to view their own or managed charge
   * applications.
   *
   * The result set includes payment details and status information relevant for
   * operational workflows and user queries.
   *
   * @param connection
   * @param body Filtering and pagination criteria for deposit charges
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchDepositCharges(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallDepositCharge.IRequest,
  ): Promise<IPageIShoppingMallDepositCharge> {
    try {
      return await patch__shoppingMall_memberUser_depositCharges({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve deposit charge application details.
   *
   * Retrieve detailed deposit charge information by depositChargeId. The
   * deposit charge record includes payment amount, status, provider, and
   * timestamps.
   *
   * Access is restricted to authorized users with rights to view the specified
   * deposit charge.
   *
   * The operation returns a single deposit charge entity from the
   * shopping_mall_deposit_charges table.
   *
   * @param connection
   * @param depositChargeId Target deposit charge's unique identifier
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":depositChargeId")
  public async atDepositCharge(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("depositChargeId")
    depositChargeId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallDepositCharge> {
    try {
      return await get__shoppingMall_memberUser_depositCharges_$depositChargeId(
        {
          memberUser,
          depositChargeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing deposit charge application with new information.
   *
   * Allows modification of payment status, amounts, provider details, and
   * charge status.
   *
   * Ensures proper validation and authorization for updating deposit charge
   * records.
   *
   * The operation returns the updated entity reflecting the latest state.
   *
   * @param connection
   * @param depositChargeId Target deposit charge's unique identifier
   * @param body Updated deposit charge information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":depositChargeId")
  public async updateDepositCharge(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("depositChargeId")
    depositChargeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallDepositCharge.IUpdate,
  ): Promise<IShoppingMallDepositCharge> {
    try {
      return await put__shoppingMall_memberUser_depositCharges_$depositChargeId(
        {
          memberUser,
          depositChargeId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an existing deposit charge application permanently from the
   * database.
   *
   * This is a hard deletion with no recovery. The depositChargeId path
   * parameter identifies the target to delete.
   *
   * Operation is restricted to authorized users.
   *
   * @param connection
   * @param depositChargeId Target deposit charge's unique identifier
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":depositChargeId")
  public async eraseDepositCharge(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("depositChargeId")
    depositChargeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_memberUser_depositCharges_$depositChargeId(
        {
          memberUser,
          depositChargeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
