import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMall_memberUser_snapshots } from "../../../../providers/patch__shoppingMall_memberUser_snapshots";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { get__shoppingMall_memberUser_snapshots_$id } from "../../../../providers/get__shoppingMall_memberUser_snapshots_$id";

import { IPageIShoppingMallSnapshot } from "../../../../api/structures/IPageIShoppingMallSnapshot";
import { IShoppingMallSnapshot } from "../../../../api/structures/IShoppingMallSnapshot";

@Controller("/shoppingMall/memberUser/snapshots")
export class ShoppingmallMemberuserSnapshotsController {
  /**
   * Search and retrieve a filtered, paginated list of snapshots.
   *
   * Retrieve a filtered and paginated list of snapshots recording immutable
   * states of various shopping mall entities. These snapshots preserve entity
   * status for audit trails and rollback.
   *
   * The search supports filters on entity type, entity ID, and snapshot
   * creation times, alongside pagination and sorting options.
   *
   * This operation is read-only and available to authenticated member users due
   * to the sensitive historical data.
   *
   * No creation, update, or deletion APIs are offered for snapshots since these
   * are automatically generated by system processes.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for snapshots
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexSnapshots(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallSnapshot.IRequest,
  ): Promise<IPageIShoppingMallSnapshot> {
    try {
      return await patch__shoppingMall_memberUser_snapshots({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a snapshot by its ID.
   *
   * Retrieve a single snapshot record by its unique identifier. Snapshots
   * record immutable entity states preserving audit and compliance evidence.
   *
   * The response includes all snapshot data including entity type, entity ID,
   * JSON snapshot content, and timestamps.
   *
   * Access is restricted to authenticated member users with appropriate
   * permissions.
   *
   * Errors are handled gracefully if the snapshot with specified ID does not
   * exist.
   *
   * @param connection
   * @param id Unique identifier of the snapshot record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atSnapshot(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSnapshot> {
    try {
      return await get__shoppingMall_memberUser_snapshots_$id({
        memberUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
