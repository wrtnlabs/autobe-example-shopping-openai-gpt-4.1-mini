import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_memberUser_attachments } from "../../../../providers/post__shoppingMall_memberUser_attachments";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { put__shoppingMall_memberUser_attachments_$id } from "../../../../providers/put__shoppingMall_memberUser_attachments_$id";
import { delete__shoppingMall_memberUser_attachments_$id } from "../../../../providers/delete__shoppingMall_memberUser_attachments_$id";

import { IShoppingMallAttachments } from "../../../../api/structures/IShoppingMallAttachments";

@Controller("/shoppingMall/memberUser/attachments")
export class ShoppingmallMemberuserAttachmentsController {
  /**
   * Create a new attachment metadata record.
   *
   * Create a new attachment record storing metadata for uploaded files such as
   * images and documents.
   *
   * User must be authenticated as a member to perform this operation.
   *
   * The request body must include file_name (e.g., "image.png"), unique
   * file_url (usually CDN path), media_type (MIME type like "image/jpeg"),
   * file_size (in bytes), and optionally upload_ip.
   *
   * Returns the full attachment record with its generated ID and timestamps
   * upon success.
   *
   * @param connection
   * @param body Metadata for the new attachment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallAttachments.ICreate,
  ): Promise<IShoppingMallAttachments> {
    try {
      return await post__shoppingMall_memberUser_attachments({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update metadata for an attachment file.
   *
   * Update metadata for an existing attachment record specified by its UUID.
   *
   * Only metadata fields such as file name, URL, media type, file size, and
   * upload IP can be updated.
   *
   * This action requires memberUser role authentication.
   *
   * Returns the updated attachment object.
   *
   * Path parameter 'id' must be a valid UUID identifying the attachment.
   *
   * Request body provides updated property values as per schema.
   *
   * @param connection
   * @param id UUID of the attachment to update
   * @param body Attachment metadata update payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAttachments.IUpdate,
  ): Promise<IShoppingMallAttachments> {
    try {
      return await put__shoppingMall_memberUser_attachments_$id({
        memberUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an attachment by ID.
   *
   * Delete an attachment record permanently by its UUID identifier.
   *
   * This action can only be performed by an authenticated memberUser.
   *
   * No request body is required.
   *
   * The operation returns no content on success.
   *
   * Parameter 'id' must be a valid UUID string.
   *
   * @param connection
   * @param id UUID of the attachment to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_memberUser_attachments_$id({
        memberUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
