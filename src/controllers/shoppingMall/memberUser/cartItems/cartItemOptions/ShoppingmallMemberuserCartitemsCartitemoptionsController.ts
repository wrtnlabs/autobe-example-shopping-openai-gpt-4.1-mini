import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions } from "../../../../../providers/post__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions";
import { MemberuserAuth } from "../../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../../decorators/payload/MemberuserPayload";
import { patch__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions } from "../../../../../providers/patch__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions";
import { get__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId } from "../../../../../providers/get__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId";
import { put__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId } from "../../../../../providers/put__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId";
import { delete__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId } from "../../../../../providers/delete__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId";

import { IShoppingMallCartItemOption } from "../../../../../api/structures/IShoppingMallCartItemOption";
import { IPageIShoppingMallCartItemOption } from "../../../../../api/structures/IPageIShoppingMallCartItemOption";

@Controller("/shoppingMall/memberUser/cartItems/:cartItemId/cartItemOptions")
export class ShoppingmallMemberuserCartitemsCartitemoptionsController {
  /**
   * Add a new option selection to a cart item. Request must specify option
   * group and sale option references.
   *
   * Users may customize cart items by selecting applicable options.
   *
   * Server validates option group and option existence.
   *
   * Errors include 400 Bad Request for invalid data and 404 if the cart item
   * does not exist.
   *
   * Operates on shopping_mall_cart_item_options entity.
   *
   * @param connection
   * @param cartItemId Unique identifier of the target cart item
   * @param body Cart item option creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItemOption.ICreate,
  ): Promise<IShoppingMallCartItemOption> {
    try {
      return await post__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions(
        {
          memberUser,
          cartItemId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List option selections for a specific cart item.
   *
   * Retrieve detailed option selections of a cart item specified by cartItemId.
   *
   * Supports filtering, searching, and pagination.
   *
   * Ensures users can manage and view option data associated with their cart
   * items.
   *
   * Errors include 404 if the cart item does not exist.
   *
   * Relates to shopping_mall_cart_item_options table and connected entities.
   * This operation requires authorization roles memberUser and adminUser.
   *
   * @param connection
   * @param cartItemId Unique identifier of the target cart item
   * @param body Search criteria and pagination for cart item options
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItemOption.IRequest,
  ): Promise<IPageIShoppingMallCartItemOption> {
    try {
      return await patch__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions(
        {
          memberUser,
          cartItemId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get specific cart item option info by ID.
   *
   * Get detailed information for a specific cart item option by ID under the
   * cart item identified by cartItemId.
   *
   * Accessible to authenticated users managing their carts or administrators.
   *
   * Errors include 404 if the cart item or option does not exist.
   *
   * Operates on shopping_mall_cart_item_options entity.
   *
   * @param connection
   * @param cartItemId Unique identifier of the target cart item
   * @param cartItemOptionId Unique identifier of the cart item option
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartItemOptionId")
  public async at(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
    @TypedParam("cartItemOptionId")
    cartItemOptionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCartItemOption> {
    try {
      return await get__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId(
        {
          memberUser,
          cartItemId,
          cartItemOptionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific cart item option by ID.
   *
   * Update the details of a cart item option identified by cartItemId and
   * cartItemOptionId. Cart item options represent selected product option
   * groups and sale options for items in a shopping cart. This update allows
   * modification of option group and option selections.
   *
   * This operation assures data consistency by enforcing valid UUID references
   * and proper linking to the shopping cart item and product option entities.
   *
   * Authorized roles include guestUser, memberUser, sellerUser, and adminUser
   * indicating authenticated access with varying permissions.
   *
   * @param connection
   * @param cartItemId Unique identifier of the cart item
   * @param cartItemOptionId Unique identifier of the cart item option
   * @param body Data needed to update a cart item option
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cartItemOptionId")
  public async updateCartItemOption(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
    @TypedParam("cartItemOptionId")
    cartItemOptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItemOption.IUpdate,
  ): Promise<IShoppingMallCartItemOption> {
    try {
      return await put__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId(
        {
          memberUser,
          cartItemId,
          cartItemOptionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a specific cart item option.
   *
   * Soft delete the cart item option specified by cartItemId and
   * cartItemOptionId. This action marks the record as deleted without
   * physically removing it from the database, enabling audit and recovery.
   *
   * This operation requires authorization as guestUser, memberUser, sellerUser,
   * or adminUser, reflecting system access control policies.
   *
   * No response body is returned on success. Invalid IDs or unauthorized
   * attempts result in errors.
   *
   * @param connection
   * @param cartItemId Unique identifier of the cart item
   * @param cartItemOptionId Unique identifier of the cart item option
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cartItemOptionId")
  public async eraseCartItemOption(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
    @TypedParam("cartItemOptionId")
    cartItemOptionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_memberUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId(
        {
          memberUser,
          cartItemId,
          cartItemOptionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
