import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_memberUser_orders_$orderId_payments } from "../../../../../providers/post__shoppingMall_memberUser_orders_$orderId_payments";
import { MemberuserAuth } from "../../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../../decorators/payload/MemberuserPayload";
import { patch__shoppingMall_memberUser_orders_$orderId_payments } from "../../../../../providers/patch__shoppingMall_memberUser_orders_$orderId_payments";
import { get__shoppingMall_memberUser_orders_$orderId_payments_$paymentId } from "../../../../../providers/get__shoppingMall_memberUser_orders_$orderId_payments_$paymentId";
import { put__shoppingMall_memberUser_orders_$orderId_payments_$paymentId } from "../../../../../providers/put__shoppingMall_memberUser_orders_$orderId_payments_$paymentId";

import { IShoppingMallPayment } from "../../../../../api/structures/IShoppingMallPayment";
import { IPageIShoppingMallPayment } from "../../../../../api/structures/IPageIShoppingMallPayment";

@Controller("/shoppingMall/memberUser/orders/:orderId/payments")
export class ShoppingmallMemberuserOrdersPaymentsController {
  /**
   * Create a new payment for an order.
   *
   * Add a payment application to a specific order. Authorized users can submit
   * payment information for the order.
   *
   * Supports multiple payment methods and amount validation.
   *
   * References the shopping_mall_payments table for insert operations.
   *
   * Returns the full payment application information on success.
   *
   * @param connection
   * @param orderId Unique identifier of the order
   * @param body Payment details for creation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallPayment.ICreate,
  ): Promise<IShoppingMallPayment> {
    try {
      return await post__shoppingMall_memberUser_orders_$orderId_payments({
        memberUser,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List payment applications related to a specific order.
   *
   * Retrieve list of payment applications for an order with filtering and
   * pagination. This operation returns summarized payment information to
   * authorized users.
   *
   * Links to the shopping_mall_payments database table filtered by order ID.
   *
   * Supports pagination, sorting, and status filtering.
   *
   * Only accessible to authorized roles.
   *
   * Returns paginated payment summaries.
   *
   * @param connection
   * @param orderId Unique identifier of the target order
   * @param body Search criteria and pagination parameters for payments
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallPayment.IRequest,
  ): Promise<IPageIShoppingMallPayment.ISummary> {
    try {
      return await patch__shoppingMall_memberUser_orders_$orderId_payments({
        memberUser,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get specific payment application details by orderId and paymentId.
   *
   * Get detailed payment application information by order ID and payment ID.
   * Authorized users can retrieve specific payment records associated with an
   * order.
   *
   * References the shopping_mall_payments database table.
   *
   * Validates existence of the payment under the given order.
   *
   * Returns full payment details.
   *
   * @param connection
   * @param orderId Unique identifier of the order
   * @param paymentId Unique identifier of the payment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":paymentId")
  public async at(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallPayment> {
    try {
      return await get__shoppingMall_memberUser_orders_$orderId_payments_$paymentId(
        {
          memberUser,
          orderId,
          paymentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing payment for an order.
   *
   * Update an existing payment application for an order. Authorized users
   * (guestUser, memberUser, sellerUser, adminUser) can modify payment details
   * such as status, amount, and method.
   *
   * Security ensures only authorized roles perform updates.
   *
   * Validation confirms allowed status transitions and method correctness.
   *
   * Returns the updated payment information.
   *
   * @param connection
   * @param orderId Unique identifier of the order
   * @param paymentId Unique identifier of the payment
   * @param body Updated payment details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":paymentId")
  public async update(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallPayment.IUpdate,
  ): Promise<IShoppingMallPayment> {
    try {
      return await put__shoppingMall_memberUser_orders_$orderId_payments_$paymentId(
        {
          memberUser,
          orderId,
          paymentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
