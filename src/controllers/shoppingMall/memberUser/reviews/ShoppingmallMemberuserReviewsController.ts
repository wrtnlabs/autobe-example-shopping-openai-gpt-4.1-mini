import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_memberUser_reviews } from "../../../../providers/post__shoppingMall_memberUser_reviews";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { patch__shoppingMall_memberUser_reviews } from "../../../../providers/patch__shoppingMall_memberUser_reviews";
import { get__shoppingMall_memberUser_reviews_$id } from "../../../../providers/get__shoppingMall_memberUser_reviews_$id";
import { put__shoppingMall_memberUser_reviews_$id } from "../../../../providers/put__shoppingMall_memberUser_reviews_$id";
import { delete__shoppingMall_memberUser_reviews_$id } from "../../../../providers/delete__shoppingMall_memberUser_reviews_$id";

import { IShoppingMallReview } from "../../../../api/structures/IShoppingMallReview";
import { IPageIShoppingMallReview } from "../../../../api/structures/IPageIShoppingMallReview";

@Controller("/shoppingMall/memberUser/reviews")
export class ShoppingmallMemberuserReviewsController {
  /**
   * Create a new product review.
   *
   * Submit a new product review.
   *
   * Includes rating, title, body, privacy.
   *
   * Validates purchase and permissions.
   *
   * Returns created review details.
   *
   * @param connection
   * @param body Content for creating a new review
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createReview(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallReview.ICreate,
  ): Promise<IShoppingMallReview> {
    try {
      return await post__shoppingMall_memberUser_reviews({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve product reviews with filtering and pagination.
   *
   * Retrieve a paginated list of product reviews filtered by search criteria.
   *
   * Supports sorting and filtering on rating, date, or product.
   *
   * Returns summaries optimized for listing.
   *
   * Authorized for member users only.
   *
   * @param connection
   * @param body Search and pagination criteria for reviews
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexReview(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallReview.IRequest,
  ): Promise<IPageIShoppingMallReview.ISummary> {
    try {
      return await patch__shoppingMall_memberUser_reviews({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information about a product review.
   *
   * Get detailed information about a single product review by ID.
   *
   * Includes rating, content, privacy, user info.
   *
   * Enforces authorization.
   *
   * Accessible to authenticated member users.
   *
   * @param connection
   * @param id Target review's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atReview(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallReview> {
    try {
      return await get__shoppingMall_memberUser_reviews_$id({
        memberUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a product review by ID.
   *
   * Allows rating and content modifications.
   *
   * Requires authorization.
   *
   * Returns updated review info.
   *
   * @param connection
   * @param id Target review's ID
   * @param body Updated review data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateReview(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReview.IUpdate,
  ): Promise<IShoppingMallReview> {
    try {
      return await put__shoppingMall_memberUser_reviews_$id({
        memberUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a product review by ID.
   *
   * Hard delete operation.
   *
   * Authorization enforced.
   *
   * No response body.
   *
   * @param connection
   * @param id Target review's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseReview(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_memberUser_reviews_$id({
        memberUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
