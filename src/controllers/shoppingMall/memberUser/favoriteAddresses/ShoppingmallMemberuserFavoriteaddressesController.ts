import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_memberUser_favoriteAddresses } from "../../../../providers/post__shoppingMall_memberUser_favoriteAddresses";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { patch__shoppingMall_memberUser_favoriteAddresses } from "../../../../providers/patch__shoppingMall_memberUser_favoriteAddresses";
import { get__shoppingMall_memberUser_favoriteAddresses_$favoriteAddressId } from "../../../../providers/get__shoppingMall_memberUser_favoriteAddresses_$favoriteAddressId";
import { put__shoppingMall_memberUser_favoriteAddresses_$favoriteAddressId } from "../../../../providers/put__shoppingMall_memberUser_favoriteAddresses_$favoriteAddressId";
import { delete__shoppingMall_memberUser_favoriteAddresses_$favoriteAddressId } from "../../../../providers/delete__shoppingMall_memberUser_favoriteAddresses_$favoriteAddressId";

import { IShoppingMallFavoriteAddress } from "../../../../api/structures/IShoppingMallFavoriteAddress";
import { IPageIShoppingMallFavoriteAddress } from "../../../../api/structures/IPageIShoppingMallFavoriteAddress";

@Controller("/shoppingMall/memberUser/favoriteAddresses")
export class ShoppingmallMemberuserFavoriteaddressesController {
  /**
   * Create a new favorite address.
   *
   * Add a new favorite address record linking a member user to an address
   * snapshot.
   *
   * Input validation checks valid user and snapshot UUIDs.
   *
   * Timestamps for creation and last update are recorded.
   *
   * Authorization restricts operation to authenticated users only.
   *
   * Supports personalized address favorite management.
   *
   * @param connection
   * @param body Favorite address creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallFavoriteAddress.ICreate,
  ): Promise<IShoppingMallFavoriteAddress> {
    try {
      return await post__shoppingMall_memberUser_favoriteAddresses({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search favorite addresses with pagination and filters.
   *
   * Search and retrieve a filtered, paginated list of favorite addresses for a
   * member user. Supports customized filtering, sorting, and pagination
   * options.
   *
   * Favorites contain snapshots for historical accuracy and auditing.
   *
   * Users are authorized to see only their own favorite addresses.
   *
   * Response includes paginated address favorite summaries.
   *
   * This operation relates to the shopping_mall_favorite_addresses table.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for favorite
   *   addresses
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallFavoriteAddress.IRequest,
  ): Promise<IPageIShoppingMallFavoriteAddress.ISummary> {
    try {
      return await patch__shoppingMall_memberUser_favoriteAddresses({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific favorite address by ID.
   *
   * Get a favorite address by its unique identifier, providing detailed
   * information about the saved address and associated snapshot.
   *
   * Authorization ensures secure access limited to the owning member user.
   *
   * This operation returns comprehensive favorite address data for user
   * management purposes.
   *
   * It uses the shopping_mall_favorite_addresses table as the data source.
   *
   * @param connection
   * @param favoriteAddressId Unique identifier of the target favorite address
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":favoriteAddressId")
  public async at(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("favoriteAddressId")
    favoriteAddressId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallFavoriteAddress> {
    try {
      return await get__shoppingMall_memberUser_favoriteAddresses_$favoriteAddressId(
        {
          memberUser,
          favoriteAddressId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update favorite address by ID. Modify address snapshot references and other
   * editable fields.
   *
   * Authorization ensures user ownership and validation prevents duplicates.
   *
   * The updated record's timestamps will also refresh.
   *
   * This operation maintains personalized management of favorite addresses.
   *
   * @param connection
   * @param favoriteAddressId Unique identifier of the target favorite address
   *   to update
   * @param body Favorite address update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":favoriteAddressId")
  public async update(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("favoriteAddressId")
    favoriteAddressId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallFavoriteAddress.IUpdate,
  ): Promise<IShoppingMallFavoriteAddress> {
    try {
      return await put__shoppingMall_memberUser_favoriteAddresses_$favoriteAddressId(
        {
          memberUser,
          favoriteAddressId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific favorite address by its ID.
   *
   * This operation permanently deletes a shopping mall favorite address record.
   * It targets a specific favorite address identified by its unique ID path
   * parameter.
   *
   * The favorite address is linked to a member user and an address snapshot
   * representing the address state at favoriting time.
   *
   * Access to this API requires the user to be authenticated as a member user.
   *
   * If the record does not exist, a suitable error is returned. There is no
   * request body as deletion is solely path-parameter based.
   *
   * This operation enforces hard deletion, permanently removing the record from
   * the database.
   *
   * @param connection
   * @param favoriteAddressId The unique identifier of the favorite address to
   *   be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":favoriteAddressId")
  public async eraseFavoriteAddress(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("favoriteAddressId")
    favoriteAddressId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_memberUser_favoriteAddresses_$favoriteAddressId(
        {
          memberUser,
          favoriteAddressId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
