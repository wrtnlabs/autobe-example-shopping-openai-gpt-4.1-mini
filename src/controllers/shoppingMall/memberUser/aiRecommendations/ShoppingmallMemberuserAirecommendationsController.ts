import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMall_memberUser_aiRecommendations } from "../../../../providers/patch__shoppingMall_memberUser_aiRecommendations";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { get__shoppingMall_memberUser_aiRecommendations_$aiRecommendationId } from "../../../../providers/get__shoppingMall_memberUser_aiRecommendations_$aiRecommendationId";

import { IPageIShoppingMallAiRecommendation } from "../../../../api/structures/IPageIShoppingMallAiRecommendation";
import { IShoppingMallAiRecommendation } from "../../../../api/structures/IShoppingMallAiRecommendation";

@Controller("/shoppingMall/memberUser/aiRecommendations")
export class ShoppingmallMemberuserAirecommendationsController {
  /**
   * Search AI-powered personalized product recommendations.
   *
   * Search and retrieve AI-generated personalized product recommendations with
   * pagination and filtering.
   *
   * Users can specify filter criteria to find relevant recommendations
   * generated by different AI algorithms.
   *
   * Returned data include recommendations status, type, payload, and
   * timestamps.
   *
   * Access requires authentication.
   *
   * Errors occur if query parameters are invalid or unauthorized requests are
   * made.
   *
   * @param connection
   * @param body Filter and pagination parameters for AI recommendations
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallAiRecommendation.IRequest,
  ): Promise<IPageIShoppingMallAiRecommendation> {
    try {
      return await patch__shoppingMall_memberUser_aiRecommendations({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve AI recommendation by ID.
   *
   * Retrieve AI-powered personalized recommendation details by unique ID.
   *
   * Access is restricted to owner authenticated users.
   *
   * Returns complete recommendation information including payload and
   * timestamps.
   *
   * Errors if the recommendation does not exist or the user lacks permission.
   *
   * @param connection
   * @param aiRecommendationId Unique identifier of the AI recommendation record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":aiRecommendationId")
  public async at(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("aiRecommendationId")
    aiRecommendationId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiRecommendation> {
    try {
      return await get__shoppingMall_memberUser_aiRecommendations_$aiRecommendationId(
        {
          memberUser,
          aiRecommendationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
