import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_memberUser_favoriteProducts } from "../../../../providers/post__shoppingMall_memberUser_favoriteProducts";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { patch__shoppingMall_memberUser_favoriteProducts } from "../../../../providers/patch__shoppingMall_memberUser_favoriteProducts";
import { get__shoppingMall_memberUser_favoriteProducts_$favoriteProductId } from "../../../../providers/get__shoppingMall_memberUser_favoriteProducts_$favoriteProductId";
import { put__shoppingMall_memberUser_favoriteProducts_$favoriteProductId } from "../../../../providers/put__shoppingMall_memberUser_favoriteProducts_$favoriteProductId";
import { delete__shoppingMall_memberUser_favoriteProducts_$favoriteProductId } from "../../../../providers/delete__shoppingMall_memberUser_favoriteProducts_$favoriteProductId";

import { IShoppingMallFavoriteProduct } from "../../../../api/structures/IShoppingMallFavoriteProduct";
import { IPageIShoppingMallFavoriteProduct } from "../../../../api/structures/IPageIShoppingMallFavoriteProduct";

@Controller("/shoppingMall/memberUser/favoriteProducts")
export class ShoppingmallMemberuserFavoriteproductsController {
  /**
   * Add a new favorite product.
   *
   * Create a new favorite product for the authenticated member user.
   *
   * This operation stores the favorite product referencing the product snapshot
   * at the time of favoriting.
   *
   * It supports user personalization and historical data preservation.
   *
   * Only authenticated memberUsers can create favorite products.
   *
   * The response returns the created favorite product entity.
   *
   * @param connection
   * @param body Favorite product creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createFavoriteProduct(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallFavoriteProduct.ICreate,
  ): Promise<IShoppingMallFavoriteProduct> {
    try {
      return await post__shoppingMall_memberUser_favoriteProducts({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of favorite products.
   *
   * Retrieve a filtered and paginated list of favorite products for a member
   * user in the shopping mall system.
   *
   * This operation enables users to manage and view their product favorites
   * with support for search and sort functionality.
   *
   * The favorites reference product snapshots to preserve historical state.
   *
   * Security is enforced by requiring the user to be authenticated as a
   * memberUser.
   *
   * The response contains a paginated list of favorite product summaries
   * optimized for list display.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for favorite product
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexFavoriteProducts(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallFavoriteProduct.IRequest,
  ): Promise<IPageIShoppingMallFavoriteProduct.ISummary> {
    try {
      return await patch__shoppingMall_memberUser_favoriteProducts({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed favorite product by ID.
   *
   * Retrieve detailed favorite product information by favorite product ID for
   * authenticated member users.
   *
   * This operation supports favorites management and provides full details of a
   * favorited product, including historical snapshot data.
   *
   * Access is restricted to the memberUser owning the favorite.
   *
   * The response returns the full favorite product entity reflecting all stored
   * attributes in the shopping_mall_favorite_products table.
   *
   * @param connection
   * @param favoriteProductId Unique identifier of the favorite product
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":favoriteProductId")
  public async atFavoriteProduct(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallFavoriteProduct> {
    try {
      return await get__shoppingMall_memberUser_favoriteProducts_$favoriteProductId(
        {
          memberUser,
          favoriteProductId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing favorite product by ID.
   *
   * Update existing favorite product information by favorite product ID.
   *
   * This operation allows modification of stored attributes relevant to the
   * favorite product.
   *
   * Access control restricts updates to the owning memberUser.
   *
   * Returns the updated favorite product entity reflecting the latest changes.
   *
   * @param connection
   * @param favoriteProductId Unique identifier of the favorite product to
   *   update
   * @param body Data to update favorite product
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":favoriteProductId")
  public async updateFavoriteProduct(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallFavoriteProduct.IUpdate,
  ): Promise<IShoppingMallFavoriteProduct> {
    try {
      return await put__shoppingMall_memberUser_favoriteProducts_$favoriteProductId(
        {
          memberUser,
          favoriteProductId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a favorite product by ID.
   *
   * This preserves the record with a deletion timestamp to maintain audit
   * integrity.
   *
   * Only the authenticated memberUser owning the favorite can perform the
   * deletion.
   *
   * No response body is returned on successful deletion.
   *
   * @param connection
   * @param favoriteProductId Unique identifier of the favorite product to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":favoriteProductId")
  public async eraseFavoriteProduct(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_memberUser_favoriteProducts_$favoriteProductId(
        {
          memberUser,
          favoriteProductId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
