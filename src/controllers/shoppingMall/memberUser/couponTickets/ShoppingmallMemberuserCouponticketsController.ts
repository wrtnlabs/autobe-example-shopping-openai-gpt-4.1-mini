import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_memberUser_couponTickets } from "../../../../providers/post__shoppingMall_memberUser_couponTickets";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { patch__shoppingMall_memberUser_couponTickets } from "../../../../providers/patch__shoppingMall_memberUser_couponTickets";
import { get__shoppingMall_memberUser_couponTickets_$couponTicketId } from "../../../../providers/get__shoppingMall_memberUser_couponTickets_$couponTicketId";
import { put__shoppingMall_memberUser_couponTickets_$couponTicketId } from "../../../../providers/put__shoppingMall_memberUser_couponTickets_$couponTicketId";
import { delete__shoppingMall_memberUser_couponTickets_$couponTicketId } from "../../../../providers/delete__shoppingMall_memberUser_couponTickets_$couponTicketId";

import { IShoppingMallCouponTicket } from "../../../../api/structures/IShoppingMallCouponTicket";
import { IPageIShoppingMallCouponTicket } from "../../../../api/structures/IPageIShoppingMallCouponTicket";

@Controller("/shoppingMall/memberUser/couponTickets")
export class ShoppingmallMemberuserCouponticketsController {
  /**
   * Create a new coupon ticket record representing issuance of a coupon to a
   * customer. The request body must include details like coupon association,
   * owner type, validity period, and initial usage status.
   *
   * This operation is exclusively available to authenticated users with the
   * 'memberUser' role, ensuring secure and controlled coupon management.
   *
   * It performs data validation and returns the created coupon ticket including
   * all relevant metadata for client verification and further processing.
   *
   * @param connection
   * @param body Creation info of the coupon ticket
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallCouponTicket.ICreate,
  ): Promise<IShoppingMallCouponTicket> {
    try {
      return await post__shoppingMall_memberUser_couponTickets({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of coupon tickets.
   *
   * Retrieve a filtered and paginated list of coupon tickets available in the
   * shopping mall system. The operation provides clients the ability to search
   * coupons by status, validity period, owner type (guestUser, memberUser,
   * sellerUser, adminUser), and other related conditions.
   *
   * This operation supports pagination, sorting, and advanced filtering to
   * enable efficient management of coupon ticket data, usable for analytics,
   * customer service, and campaign monitoring.
   *
   * Security measures ensure only authorized users with the role 'memberUser'
   * (authenticated users) can access the coupon ticket list, preserving data
   * privacy and security.
   *
   * Data returned includes ticket codes, validity windows, usage status, and
   * timestamps for creation and last update, enabling clients to present timely
   * and accurate coupon information.
   *
   * @param connection
   * @param body Coupon ticket search criteria with filtering and pagination
   *   parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallCouponTicket.IRequest,
  ): Promise<IPageIShoppingMallCouponTicket.ISummary> {
    try {
      return await patch__shoppingMall_memberUser_couponTickets({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed coupon ticket information.
   *
   * Retrieve detailed information of a single coupon ticket by its UUID. The
   * operation requires the `couponTicketId` as a path parameter and returns
   * comprehensive data including ticket usage status, validity dates, ownership
   * relationships, and timestamps.
   *
   * Security checks restrict access to authenticated users with the
   * 'memberUser' role. This operation is critical for customer service and
   * coupon management interfaces where specific coupon ticket details are
   * needed.
   *
   * The operation is linked to the `shopping_mall_coupon_tickets` table and
   * follows best practices for secure and consistent data retrieval.
   *
   * @param connection
   * @param couponTicketId Unique identifier of the target coupon ticket
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":couponTicketId")
  public async at(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("couponTicketId")
    couponTicketId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCouponTicket> {
    try {
      return await get__shoppingMall_memberUser_couponTickets_$couponTicketId({
        memberUser,
        couponTicketId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update coupon ticket details.
   *
   * Update an existing coupon ticket by its unique ID. Allows modification of
   * properties such as associated coupon, usage status, validity dates, and
   * ownership.
   *
   * This operation requires authentication for the 'memberUser' role and
   * ensures data integrity through validation.
   *
   * The updated coupon ticket is returned upon successful modification.
   *
   * @param connection
   * @param couponTicketId Unique identifier of the target coupon ticket
   * @param body Update info for the coupon ticket
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":couponTicketId")
  public async update(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("couponTicketId")
    couponTicketId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCouponTicket.IUpdate,
  ): Promise<IShoppingMallCouponTicket> {
    try {
      return await put__shoppingMall_memberUser_couponTickets_$couponTicketId({
        memberUser,
        couponTicketId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete coupon ticket permanently.
   *
   * Delete a coupon ticket record from the system permanently by its unique ID.
   * This hard deletion removes all associated data without recovery.
   *
   * Only authenticated users with role 'memberUser' may perform this operation,
   * ensuring security controls.
   *
   * No content is returned upon successful deletion.
   *
   * @param connection
   * @param couponTicketId Unique identifier of the target coupon ticket
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":couponTicketId")
  public async erase(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("couponTicketId")
    couponTicketId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_memberUser_couponTickets_$couponTicketId(
        {
          memberUser,
          couponTicketId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
