import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_memberUser_carts } from "../../../../providers/post__shoppingMall_memberUser_carts";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { patch__shoppingMall_memberUser_carts } from "../../../../providers/patch__shoppingMall_memberUser_carts";
import { get__shoppingMall_memberUser_carts_$cartId } from "../../../../providers/get__shoppingMall_memberUser_carts_$cartId";
import { put__shoppingMall_memberUser_carts_$cartId } from "../../../../providers/put__shoppingMall_memberUser_carts_$cartId";
import { delete__shoppingMall_memberUser_carts_$cartId } from "../../../../providers/delete__shoppingMall_memberUser_carts_$cartId";

import { IShoppingMallCarts } from "../../../../api/structures/IShoppingMallCarts";
import { IPageIShoppingMallCarts } from "../../../../api/structures/IPageIShoppingMallCarts";

@Controller("/shoppingMall/memberUser/carts")
export class ShoppingmallMemberuserCartsController {
  /**
   * Create a new shopping cart.
   *
   * This API operation allows authenticated users to create a new shopping
   * cart. The creation can be linked either to a guest user or a member user
   * based on provided identifiers.
   *
   * The request payload specifies the user linkage and initial cart properties,
   * following the schema for cart creation.
   *
   * Upon successful creation, the system returns the full cart record including
   * generated IDs and timestamps.
   *
   * Security enforcement restricts this operation to authenticated users only.
   *
   * Validation ensures no duplicate carts conflict with user ownership
   * constraints.
   *
   * @param connection
   * @param body Creation info for the new shopping cart
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createCart(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallCarts.ICreate,
  ): Promise<IShoppingMallCarts> {
    try {
      return await post__shoppingMall_memberUser_carts({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of shopping carts.
   *
   * This operation provides customers or authorized users with the ability to
   * search and retrieve their shopping carts. The search supports filtering by
   * status, owner type (guest or member), creation date, and other relevant
   * fields.
   *
   * The request body includes criteria for pagination, sorting, and filters
   * enhancing efficient retrieval of large cart datasets.
   *
   * Security requires that only authenticated users with 'memberUser' role
   * access can use this API to protect privacy.
   *
   * The response returns a paginated list of cart summary information aligned
   * with the 'shopping_mall_carts' schema.
   *
   * Proper validation is enforced to avoid overload and erroneous filters.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for cart filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchCarts(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallCarts.IRequest,
  ): Promise<IPageIShoppingMallCarts.ISummary> {
    try {
      return await patch__shoppingMall_memberUser_carts({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information about a specific shopping cart.
   *
   * This API operation enables users with appropriate permissions to retrieve
   * full details of a specific shopping cart by its unique identifier. The
   * system validates the cart ID and returns the corresponding cart record if
   * found.
   *
   * Access restrictions ensure users view only carts they own or have rights to
   * access.
   *
   * The response provides all fields of the cart including ownership (guest or
   * member), current status, creation, update, and deletion timestamps if
   * applicable.
   *
   * Errors are returned if the cart does not exist or access is denied.
   *
   * @param connection
   * @param cartId Unique identifier of the shopping cart
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartId")
  public async getCart(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCarts> {
    try {
      return await get__shoppingMall_memberUser_carts_$cartId({
        memberUser,
        cartId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing shopping cart.
   *
   * This API operation allows authorized users to update an existing shopping
   * cart by providing partial or full changes to cart properties. The 'cartId'
   * in the path identifies the cart to update.
   *
   * Common updates include changing the cart status, associating different user
   * ids, or modifying metadata.
   *
   * The operation enforces business rules to prevent unauthorized changes and
   * validate data consistency.
   *
   * Successful updates return the full updated cart record.
   *
   * Errors include not found, validation failures, and access denials.
   *
   * @param connection
   * @param cartId Unique identifier of the shopping cart
   * @param body Update data for the shopping cart
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cartId")
  public async updateCart(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCarts.IUpdate,
  ): Promise<IShoppingMallCarts> {
    try {
      return await put__shoppingMall_memberUser_carts_$cartId({
        memberUser,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a shopping cart permanently.
   *
   * This API operation allows authorized users to permanently remove a shopping
   * cart by specifying its unique identifier in the path.
   *
   * The deletion is irreversible and removes all traces of the cart including
   * its items.
   *
   * Only authorized users with ownership or administrative permissions may
   * perform this action.
   *
   * Errors include access denial and not found cart IDs.
   *
   * This operation does not return a response body.
   *
   * @param connection
   * @param cartId Unique identifier of the shopping cart
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cartId")
  public async eraseCart(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_memberUser_carts_$cartId({
        memberUser,
        cartId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
