import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_memberUser_inquiries } from "../../../../providers/post__shoppingMall_memberUser_inquiries";
import { MemberuserAuth } from "../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../decorators/payload/MemberuserPayload";
import { put__shoppingMall_memberUser_inquiries_$id } from "../../../../providers/put__shoppingMall_memberUser_inquiries_$id";
import { delete__shoppingMall_memberUser_inquiries_$id } from "../../../../providers/delete__shoppingMall_memberUser_inquiries_$id";

import { IShoppingMallInquiry } from "../../../../api/structures/IShoppingMallInquiry";

@Controller("/shoppingMall/memberUser/inquiries")
export class ShoppingmallMemberuserInquiriesController {
  /**
   * Create new product inquiry.
   *
   * Create a new product inquiry record in the system. The inquiry records a
   * customer question or comment regarding a product. It includes properties
   * such as title, body, privacy settings, status, and associations with
   * channels, sections, categories, and users.
   *
   * The operation validates incoming data for correctness and authorization.
   *
   * Returns the newly created inquiry with full details including assigned ID
   * and timestamps.
   *
   * Access control applies to member users and appropriate roles.
   *
   * @param connection
   * @param body Information needed to create a new inquiry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedBody()
    body: IShoppingMallInquiry.ICreate,
  ): Promise<IShoppingMallInquiry> {
    try {
      return await post__shoppingMall_memberUser_inquiries({
        memberUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update product inquiry by ID.
   *
   * Update a product inquiry record by ID. This allows modifying inquiry
   * content, privacy, and status information.
   *
   * Only authorized users including the inquiry owner or administrators can
   * perform this operation.
   *
   * Returns the updated inquiry details to confirm changes.
   *
   * No request body is null; all changes must be provided explicitly.
   *
   * @param connection
   * @param id Unique identifier of the inquiry to update
   * @param body Updated inquiry information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallInquiry.IUpdate,
  ): Promise<IShoppingMallInquiry> {
    try {
      return await put__shoppingMall_memberUser_inquiries_$id({
        memberUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete product inquiry by ID.
   *
   * Delete a product inquiry by ID, permanently removing it from the system.
   *
   * The inquiry is a customer question or comment linked to a product. Deletion
   * is only allowed to authorized personnel.
   *
   * This operation performs a hard deletion, removing the entry completely from
   * the shopping_mall_inquiries table.
   *
   * No request body is needed.
   *
   * Ensure proper authorization before executing.
   *
   * No response body is returned.
   *
   * @param connection
   * @param id Unique identifier of the inquiry to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_memberUser_inquiries_$id({
        memberUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
