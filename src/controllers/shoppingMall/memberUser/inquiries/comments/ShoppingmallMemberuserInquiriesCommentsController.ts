import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_memberUser_inquiries_$inquiryId_comments } from "../../../../../providers/post__shoppingMall_memberUser_inquiries_$inquiryId_comments";
import { MemberuserAuth } from "../../../../../decorators/MemberuserAuth";
import { MemberuserPayload } from "../../../../../decorators/payload/MemberuserPayload";
import { put__shoppingMall_memberUser_inquiries_$inquiryId_comments_$commentId } from "../../../../../providers/put__shoppingMall_memberUser_inquiries_$inquiryId_comments_$commentId";
import { delete__shoppingMall_memberUser_inquiries_$inquiryId_comments_$commentId } from "../../../../../providers/delete__shoppingMall_memberUser_inquiries_$inquiryId_comments_$commentId";

import { IShoppingMallComment } from "../../../../../api/structures/IShoppingMallComment";

@Controller("/shoppingMall/memberUser/inquiries/:inquiryId/comments")
export class ShoppingmallMemberuserInquiriesCommentsController {
  /**
   * Create a comment under a specific inquiry.
   *
   * Create a new comment under a specific inquiry identified by inquiryId. The
   * comment record includes content, privacy flag, and status fields stored in
   * shopping_mall_comments. User authorization and linkage to member, guest, or
   * seller is enforced.
   *
   * This supports dynamic customer-seller interaction threads enhancing product
   * inquiry management.
   *
   * Errors returned if inquiry does not exist or unauthorized access is
   * attempted.
   *
   * @param connection
   * @param inquiryId Target inquiry's ID
   * @param body Content and metadata for new comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createComment(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallComment.ICreate,
  ): Promise<IShoppingMallComment> {
    try {
      return await post__shoppingMall_memberUser_inquiries_$inquiryId_comments({
        memberUser,
        inquiryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a comment under a specific inquiry by commentId. Allows editing of
   * comment content, privacy, and status.
   *
   * Ensures linkage integrity and user authorization.
   *
   * Timestamps updated accordingly for auditing.
   *
   * @param connection
   * @param inquiryId Target inquiry's ID
   * @param commentId Target comment's ID
   * @param body Updated content and metadata for the comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async updateComment(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallComment.IUpdate,
  ): Promise<IShoppingMallComment> {
    try {
      return await put__shoppingMall_memberUser_inquiries_$inquiryId_comments_$commentId(
        {
          memberUser,
          inquiryId,
          commentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a comment under a specific inquiry by commentId. This is a hard
   * delete operation permanently removing the comment record.
   *
   * Authorization is strictly enforced.
   *
   * Deleted comments cannot be recovered.
   *
   * @param connection
   * @param inquiryId Target inquiry's ID
   * @param commentId Target comment's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async eraseComment(
    @MemberuserAuth()
    memberUser: MemberuserPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_memberUser_inquiries_$inquiryId_comments_$commentId(
        {
          memberUser,
          inquiryId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
