import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMall_adminUser_adminUsers } from "../../../../providers/patch__shoppingMall_adminUser_adminUsers";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__shoppingMall_adminUser_adminUsers_$id } from "../../../../providers/get__shoppingMall_adminUser_adminUsers_$id";
import { put__shoppingMall_adminUser_adminUsers_$id } from "../../../../providers/put__shoppingMall_adminUser_adminUsers_$id";
import { delete__shoppingMall_adminUser_adminUsers_$id } from "../../../../providers/delete__shoppingMall_adminUser_adminUsers_$id";

import { IPageIShoppingMallAdminuser } from "../../../../api/structures/IPageIShoppingMallAdminuser";
import { IShoppingMallAdminUser } from "../../../../api/structures/IShoppingMallAdminUser";

@Controller("/shoppingMall/adminUser/adminUsers")
export class ShoppingmallAdminuserAdminusersController {
  /**
   * Search and retrieve a filtered, paginated list of administrator users.
   *
   * Retrieve a filtered and paginated list of administrator users from the
   * shopping mall platform.
   *
   * This operation provides comprehensive search capabilities by email,
   * nickname, full name, and account status.
   *
   * Administrator accounts have elevated access privileges and manage critical
   * system functions.
   *
   * Therefore, the endpoint restricts access solely to users with the
   * 'adminUser' role.
   *
   * Returned results are paginated to handle large user bases efficiently and
   * include essential administrator profile and status information.
   *
   * Proper validation and error handling ensure robust, secure handling of
   * requests.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for administrator
   *   user filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallAdminUser.IRequest,
  ): Promise<IPageIShoppingMallAdminuser> {
    try {
      return await patch__shoppingMall_adminUser_adminUsers({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get administrator user details by ID.
   *
   * Get detailed information about a particular administrator user identified
   * by ID.
   *
   * Access is granted only to users with the 'adminUser' role to ensure
   * confidentiality of sensitive account credentials.
   *
   * The administrator entity schema defined in Prisma is strictly followed.
   *
   * Standard error handling applies for invalid or missing resources.
   *
   * @param connection
   * @param id Unique identifier of the administrator user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAdminUser> {
    try {
      return await get__shoppingMall_adminUser_adminUsers_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an administrator user's information.
   *
   * Modify the details of a specific administrator user specified by unique
   * identifier.
   *
   * This operation permits updating email, nickname, full name, and status
   * fields.
   *
   * Only users with the 'adminUser' role are authorized for this action.
   *
   * The administrator user schema ensures data integrity.
   *
   * Errors result from invalid data or authentication failures.
   *
   * @param connection
   * @param id Unique identifier of the administrator user
   * @param body Update data for administrator user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAdminUser.IUpdate,
  ): Promise<IShoppingMallAdminUser> {
    try {
      return await put__shoppingMall_adminUser_adminUsers_$id({
        adminUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an administrator user by ID.
   *
   * Remove an administrator user permanently by ID.
   *
   * This operation deletes the administrator user record and cannot be undone.
   *
   * Only users with the 'adminUser' role are authorized to perform this action.
   *
   * Errors occur on invalid IDs, non-existent records, or insufficient
   * permissions.
   *
   * Ensure confirmation controls to prevent accidental deletion.
   *
   * @param connection
   * @param id Unique identifier of the administrator user to remove
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_adminUsers_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
