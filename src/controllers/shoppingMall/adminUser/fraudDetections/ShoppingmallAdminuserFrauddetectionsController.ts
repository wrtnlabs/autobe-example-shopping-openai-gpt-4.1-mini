import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_fraudDetections } from "../../../../providers/post__shoppingMall_adminUser_fraudDetections";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_fraudDetections } from "../../../../providers/patch__shoppingMall_adminUser_fraudDetections";
import { get__shoppingMall_adminUser_fraudDetections_$fraudDetectionId } from "../../../../providers/get__shoppingMall_adminUser_fraudDetections_$fraudDetectionId";
import { put__shoppingMall_adminUser_fraudDetections_$fraudDetectionId } from "../../../../providers/put__shoppingMall_adminUser_fraudDetections_$fraudDetectionId";
import { delete__shoppingMall_adminUser_fraudDetections_$fraudDetectionId } from "../../../../providers/delete__shoppingMall_adminUser_fraudDetections_$fraudDetectionId";

import { IShoppingMallFraudDetection } from "../../../../api/structures/IShoppingMallFraudDetection";
import { IPageIShoppingMallFraudDetection } from "../../../../api/structures/IPageIShoppingMallFraudDetection";

@Controller("/shoppingMall/adminUser/fraudDetections")
export class ShoppingmallAdminuserFrauddetectionsController {
  /**
   * Create a new fraud detection record.
   *
   * Add a new fraud detection record capturing suspicious activity details
   * flagged by AI. Requires administrator privileges for access and validation.
   * All input fields must comply with schema constraints to correctly store the
   * detection event.
   *
   * Security is critical to prevent unauthorized creation.
   *
   * Successful creation returns the newly created object with full details.
   *
   * @param connection
   * @param body Information required to create a fraud detection record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallFraudDetection.ICreate,
  ): Promise<IShoppingMallFraudDetection> {
    try {
      return await post__shoppingMall_adminUser_fraudDetections({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of fraud detections.
   *
   * Retrieve a filtered, pageable, and searchable list of fraud detection
   * records generated by AI systems in the shopping mall backend. The retrieved
   * data includes references to the member user flagged for potential fraud,
   * detected order if applicable, fraud detection classification, confidence
   * scores assigned by AI models, current resolution status of the fraud case,
   * and relevant timestamps.
   *
   * Security considerations include limiting access to authorized personnel
   * such as administrators and security analysts to protect sensitive detection
   * data. The response provides a paginated summary view optimized for analysis
   * and triage work.
   *
   * This operation maps directly to the shopping_mall_fraud_detections table as
   * defined in the Prisma schema, including all relevant fields to enable
   * detailed investigations. Filtering, sorting, and pagination capabilities
   * are integral to the request.
   *
   * Error cases include handling invalid filter parameters or query overload
   * with appropriate responses.
   *
   * @param connection
   * @param body Search criteria, filter, and pagination parameters for fraud
   *   detection records
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallFraudDetection.IRequest,
  ): Promise<IPageIShoppingMallFraudDetection.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_fraudDetections({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed fraud detection information.
   *
   * Fetch the detailed record of a fraud detection event by fraudDetectionId.
   * This includes all stored attributes such as the user flagged, detection
   * type, confidence score, status, resolution, and timeline data.
   *
   * Access is restricted to roles with administrative privileges due to the
   * sensitive nature of fraud data.
   *
   * The operation delivers a full resource view for use in detailed audits and
   * case management.
   *
   * @param connection
   * @param fraudDetectionId Unique identifier of the fraud detection record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":fraudDetectionId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("fraudDetectionId")
    fraudDetectionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallFraudDetection> {
    try {
      return await get__shoppingMall_adminUser_fraudDetections_$fraudDetectionId(
        {
          adminUser,
          fraudDetectionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing fraud detection information.
   *
   * Modify an existing fraud detection record by its UUID. Requires
   * administrative access. The update can change detection classification,
   * confidence metrics, resolution progress, and additional data for ongoing
   * case management.
   *
   * Errors occur if the record does not exist or input data violates integrity
   * constraints.
   *
   * Returns the updated fraud detection entity upon success.
   *
   * @param connection
   * @param fraudDetectionId Unique identifier of the fraud detection record to
   *   update
   * @param body Data to update fraud detection record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":fraudDetectionId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("fraudDetectionId")
    fraudDetectionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallFraudDetection.IUpdate,
  ): Promise<IShoppingMallFraudDetection> {
    try {
      return await put__shoppingMall_adminUser_fraudDetections_$fraudDetectionId(
        {
          adminUser,
          fraudDetectionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete fraud detection record permanently.
   *
   * Permanently remove a fraud detection record by its UUID. Only
   * administrators may perform this action due to the sensitive nature of fraud
   * data.
   *
   * The deletion is a hard delete, completely removing the record and
   * preventing recovery. Client applications should confirm this irreversible
   * nature.
   *
   * Appropriate errors are returned if the record is not found.
   *
   * @param connection
   * @param fraudDetectionId Unique identifier of the fraud detection record to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":fraudDetectionId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("fraudDetectionId")
    fraudDetectionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_fraudDetections_$fraudDetectionId(
        {
          adminUser,
          fraudDetectionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
