import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_categories } from "../../../../providers/post__shoppingMall_adminUser_categories";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_categories } from "../../../../providers/patch__shoppingMall_adminUser_categories";
import { get__shoppingMall_adminUser_categories_$categoryId } from "../../../../providers/get__shoppingMall_adminUser_categories_$categoryId";
import { put__shoppingMall_adminUser_categories_$categoryId } from "../../../../providers/put__shoppingMall_adminUser_categories_$categoryId";
import { delete__shoppingMall_adminUser_categories_$categoryId } from "../../../../providers/delete__shoppingMall_adminUser_categories_$categoryId";

import { IShoppingMallCategory } from "../../../../api/structures/IShoppingMallCategory";
import { IPageIShoppingMallCategory } from "../../../../api/structures/IPageIShoppingMallCategory";

@Controller("/shoppingMall/adminUser/categories")
export class ShoppingmallAdminuserCategoriesController {
  /**
   * Create product category.
   *
   * Create a new product category with specified details.
   *
   * AdminUser authorization required.
   *
   * Returns the created product category record.
   *
   * Validates uniqueness and required fields.
   *
   * @param connection
   * @param body Category creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallCategory.ICreate,
  ): Promise<IShoppingMallCategory> {
    try {
      return await post__shoppingMall_adminUser_categories({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search product categories with filters and pagination.
   *
   * Search and retrieve paginated product category list filtered by search
   * criteria.
   *
   * This operation supports adminUser role for category management tasks.
   *
   * Search parameters can include name filters, status and sorting options.
   *
   * Response includes paginated category summaries with essential fields.
   *
   * Invalid filter criteria should be handled gracefully.
   *
   * @param connection
   * @param body Category search filters and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallCategory.IRequest,
  ): Promise<IPageIShoppingMallCategory.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_categories({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve product category by ID.
   *
   * Retrieve detailed product category by ID.
   *
   * This operation requires adminUser authorization.
   *
   * Response contains full category record data if found.
   *
   * Handles errors for missing or deleted entries appropriately.
   *
   * @param connection
   * @param categoryId Unique identifier of the target product category
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":categoryId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCategory> {
    try {
      return await get__shoppingMall_adminUser_categories_$categoryId({
        adminUser,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update product category by ID with new values.
   *
   * AdminUser role authorized.
   *
   * Returns updated category record.
   *
   * Handles validation and existence checks.
   *
   * @param connection
   * @param categoryId Unique identifier of the product category to update
   * @param body Category update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":categoryId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCategory.IUpdate,
  ): Promise<IShoppingMallCategory> {
    try {
      return await put__shoppingMall_adminUser_categories_$categoryId({
        adminUser,
        categoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a product category by UUID from the shopping mall system.
   *
   * This API operation permanently removes a product category from the shopping
   * mall system, identified by the unique UUID categoryId.
   *
   * It targets the shopping_mall_categories table in the Prisma schema, which
   * stores category codes, names, status, description, and timestamps.
   *
   * Security considerations require that only users with appropriate
   * administrative or management roles can execute this deletion to prevent
   * unauthorized data loss.
   *
   * Any associated relationships, such as category relations or channel
   * mappings, must be handled appropriately by database cascade or business
   * logic.
   *
   * This operation does not return a response body and deletes the record
   * irreversibly.
   *
   * Errors may occur if the categoryId does not exist or if deletion violates
   * relational integrity.
   *
   * @param connection
   * @param categoryId Unique identifier of the target category to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":categoryId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_categories_$categoryId({
        adminUser,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
