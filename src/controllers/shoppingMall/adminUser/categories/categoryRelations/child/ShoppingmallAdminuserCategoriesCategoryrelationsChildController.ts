import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child } from "../../../../../../providers/post__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child";
import { AdminuserAuth } from "../../../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child } from "../../../../../../providers/patch__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child";
import { get__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child_$relationId } from "../../../../../../providers/get__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child_$relationId";
import { put__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child_$relationId } from "../../../../../../providers/put__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child_$relationId";
import { delete__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child_$relationId } from "../../../../../../providers/delete__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child_$relationId";

import { IShoppingMallCategoryRelations } from "../../../../../../api/structures/IShoppingMallCategoryRelations";
import { IPageIShoppingMallCategoryRelations } from "../../../../../../api/structures/IPageIShoppingMallCategoryRelations";

@Controller(
  "/shoppingMall/adminUser/categories/:categoryId/categoryRelations/child",
)
export class ShoppingmallAdminuserCategoriesCategoryrelationsChildController {
  /**
   * Create a child category relation under a specific parent category.
   *
   * This API operation allows authorized users to create a new child
   * relationship under the specified parent category. The parent category is
   * identified by its unique ID provided in the URL path. By adding a child
   * relation, administrators can build hierarchical category trees necessary
   * for organizing products effectively within the shopping mall channels.
   *
   * Security considerations include restricting access to administrative users
   * who have permission to manage category structures. Validation rules require
   * that the child category ID provided in the request body corresponds to an
   * existing category and that the new relation does not duplicate existing
   * ones.
   *
   * The Prisma schema defines the 'shopping_mall_category_relations' table
   * where each record represents a parent-child linkage between categories,
   * with soft delete support via the 'deleted_at' timestamp.
   *
   * On successful creation, the API returns the newly created relation with all
   * relevant fields. Errors will be returned if the parent category ID in the
   * path or child category ID in the body are invalid or if relation
   * constraints are violated.
   *
   * @param connection
   * @param categoryId Unique identifier of the parent category
   * @param body Information for creating a new child category relation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createChildCategoryRelation(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCategoryRelations.ICreate,
  ): Promise<IShoppingMallCategoryRelations> {
    try {
      return await post__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child(
        {
          adminUser,
          categoryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List child category relations for a parent category with filters and
   * pagination.
   *
   * Retrieve a filtered and paginated list of child category relations for a
   * specified parent category.
   *
   * Filters, sorts, and pagination parameters can be included to efficiently
   * navigate the hierarchical structure.
   *
   * Operation affects the shopping_mall_category_relations table with a focus
   * on child relations where the parent ID is the categoryId.
   *
   * Only accessible to admin users.
   *
   * Returns summarized data of each child relation.
   *
   * Error handling includes invalid category ID and authorization failures.
   *
   * @param connection
   * @param categoryId Unique identifier of the parent category
   * @param body Filter, sort, and pagination parameters for child category
   *   relations
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexChild(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCategoryRelations.IRequest,
  ): Promise<IPageIShoppingMallCategoryRelations.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child(
        {
          adminUser,
          categoryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get specific child category relation detail by relation ID.
   *
   * Get detailed information about a specific child category relation by
   * relationId where the category identified by categoryId is the parent.
   *
   * Only admin users can access this endpoint.
   *
   * Returns the full relation object.
   *
   * Errors if relation ID does not exist or user is unauthorized.
   *
   * @param connection
   * @param categoryId Unique identifier of the parent category
   * @param relationId Unique identifier of the child category relation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":relationId")
  public async atChild(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedParam("relationId")
    relationId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCategoryRelations> {
    try {
      return await get__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child_$relationId(
        {
          adminUser,
          categoryId,
          relationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a child category relation under a specific parent category.
   *
   * This API operation permits authorized administrative users to update the
   * child category linkage of an existing parent-child category relation. The
   * relation to update is identified by its unique 'relationId' and the parent
   * category by 'categoryId' passed in the URL path.
   *
   * The request body must specify the new child category ID to set for this
   * relation. Access is restricted to users with proper administrative
   * privileges.
   *
   * The underlying database entity is the 'shopping_mall_category_relations'
   * table, which tracks parent-child category relationships with a soft delete
   * mechanism. The update must ensure that the new child category exists and
   * that the updated relation does not violate uniqueness constraints.
   *
   * Upon success, the updated relation record is returned. Error cases include
   * invalid IDs or violations of relational constraints.
   *
   * @param connection
   * @param categoryId Unique identifier of the parent category
   * @param relationId Unique identifier of the child category relation
   * @param body Updates to apply to the child category relation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":relationId")
  public async updateChildCategoryRelation(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedParam("relationId")
    relationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCategoryRelations.IUpdate,
  ): Promise<IShoppingMallCategoryRelations> {
    try {
      return await put__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child_$relationId(
        {
          adminUser,
          categoryId,
          relationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a child category relation under a specific parent category.
   *
   * This API operation allows authorized administrators to delete an existing
   * child category relation from a parent category. The parent category and the
   * relation are identified via 'categoryId' and 'relationId' path parameters
   * respectively.
   *
   * Deleting this relation impacts the category hierarchy and product
   * organization, so proper authorization and validation are required.
   *
   * The underlying table is 'shopping_mall_category_relations' which records
   * parent-child relations among categories. The operation permanently removes
   * the record, ensuring no residual links remain.
   *
   * Error handling includes checks against invalid or non-existent IDs and
   * ensuring referential integrity is maintained system-wide.
   *
   * @param connection
   * @param categoryId Unique identifier of the parent category
   * @param relationId Unique identifier of the child category relation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":relationId")
  public async eraseChildCategoryRelation(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedParam("relationId")
    relationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_categories_$categoryId_categoryRelations_child_$relationId(
        {
          adminUser,
          categoryId,
          relationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
