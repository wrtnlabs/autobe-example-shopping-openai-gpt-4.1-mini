import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent } from "../../../../../../providers/post__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent";
import { AdminuserAuth } from "../../../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent } from "../../../../../../providers/patch__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent";
import { get__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent_$relationId } from "../../../../../../providers/get__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent_$relationId";
import { put__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent_$relationId } from "../../../../../../providers/put__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent_$relationId";
import { delete__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent_$relationId } from "../../../../../../providers/delete__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent_$relationId";

import { IShoppingMallCategoryRelations } from "../../../../../../api/structures/IShoppingMallCategoryRelations";
import { IPageIShoppingMallCategoryRelations } from "../../../../../../api/structures/IPageIShoppingMallCategoryRelations";

@Controller(
  "/shoppingMall/adminUser/categories/:categoryId/categoryRelations/parent",
)
export class ShoppingmallAdminuserCategoriesCategoryrelationsParentController {
  /**
   * Create a new parent category relation for a category.
   *
   * Create a new parent category relation for the category identified by
   * categoryId.
   *
   * This inserts a new record into the shopping_mall_category_relations table
   * linking parent and child categories.
   *
   * Request body must supply all necessary attributes to define this relation.
   *
   * Only admin users can perform this operation.
   *
   * The created entity with full detail will be returned.
   *
   * Errors may arise upon invalid data or existing relation conflicts.
   *
   * @param connection
   * @param categoryId Unique identifier of the child category
   * @param body Information required to create a parent category relation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCategoryRelations.ICreate,
  ): Promise<IShoppingMallCategoryRelations> {
    try {
      return await post__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent(
        {
          adminUser,
          categoryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List parent category relations for a given category with filters and
   * pagination.
   *
   * Retrieve a filtered, paginated list of parent category relations for a
   * specific category, identified by categoryId.
   *
   * This relates to the shopping_mall_category_relations table, specifically
   * retrieving relations where the target category is the child, and the
   * parents are listed.
   *
   * Support advanced search filters, sorting, and pagination to enable
   * efficient navigation of category hierarchies.
   *
   * Access is restricted to authorized administrative users to maintain data
   * integrity.
   *
   * The response provides summarized information about each parent-child
   * relationship, including timestamps and relational context.
   *
   * Errors occur on invalid categoryId or unauthorized access.
   *
   * @param connection
   * @param categoryId Unique identifier of the category for which to retrieve
   *   parent relations
   * @param body Filter, search, and pagination parameters for parent category
   *   relation retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCategoryRelations.IRequest,
  ): Promise<IPageIShoppingMallCategoryRelations.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent(
        {
          adminUser,
          categoryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get specific parent category relation details by relation ID.
   *
   * Retrieve detailed information for a specific parent category relation
   * identified by relationId belonging to categoryId.
   *
   * This corresponds to a single record in the shopping_mall_category_relations
   * table, representing the hierarchical link between parent and child
   * categories.
   *
   * Only users with admin role can access this data.
   *
   * The response contains all relation properties with timestamps for audit and
   * management.
   *
   * Errors may occur if parameters are invalid or relation does not exist.
   *
   * @param connection
   * @param categoryId Unique identifier of the child category
   * @param relationId Unique identifier of the parent category relation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":relationId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedParam("relationId")
    relationId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCategoryRelations> {
    try {
      return await get__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent_$relationId(
        {
          adminUser,
          categoryId,
          relationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a parent category relation by relation ID.
   *
   * Update an existing parent category relation identified by relationId for
   * category categoryId.
   *
   * This updates fields in the shopping_mall_category_relations record.
   *
   * Admin role is required for authorization.
   *
   * Returns the updated relation object including timestamps.
   *
   * Validation errors or missing entity result in error responses.
   *
   * @param connection
   * @param categoryId Unique identifier of the child category
   * @param relationId Unique identifier of the parent category relation
   * @param body Fields for updating a parent category relation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":relationId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedParam("relationId")
    relationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCategoryRelations.IUpdate,
  ): Promise<IShoppingMallCategoryRelations> {
    try {
      return await put__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent_$relationId(
        {
          adminUser,
          categoryId,
          relationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a parent category relation by relation ID.
   *
   * Delete a specific parent category relation by relationId for the given
   * categoryId.
   *
   * Operates on the shopping_mall_category_relations table to remove
   * hierarchical links.
   *
   * Requires admin authorization.
   *
   * No content returned upon successful deletion.
   *
   * Errors on invalid IDs or access violations.
   *
   * @param connection
   * @param categoryId Unique identifier of the child category
   * @param relationId Unique identifier of the parent category relation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":relationId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedParam("relationId")
    relationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_categories_$categoryId_categoryRelations_parent_$relationId(
        {
          adminUser,
          categoryId,
          relationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
