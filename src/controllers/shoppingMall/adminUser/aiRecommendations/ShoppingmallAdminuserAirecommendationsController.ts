import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_aiRecommendations } from "../../../../providers/post__shoppingMall_adminUser_aiRecommendations";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { put__shoppingMall_adminUser_aiRecommendations_$aiRecommendationId } from "../../../../providers/put__shoppingMall_adminUser_aiRecommendations_$aiRecommendationId";
import { delete__shoppingMall_adminUser_aiRecommendations_$aiRecommendationId } from "../../../../providers/delete__shoppingMall_adminUser_aiRecommendations_$aiRecommendationId";

import { IShoppingMallAiRecommendation } from "../../../../api/structures/IShoppingMallAiRecommendation";

@Controller("/shoppingMall/adminUser/aiRecommendations")
export class ShoppingmallAdminuserAirecommendationsController {
  /**
   * Create a new AI recommendation record based on user or system data.
   *
   * Only authorized system processes or admins may create records.
   *
   * Validates input data including user reference, recommendation type,
   * algorithm version, and payload.
   *
   * Errors occur with invalid input or insufficient permissions.
   *
   * @param connection
   * @param body AI recommendation creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallAiRecommendation.ICreate,
  ): Promise<IShoppingMallAiRecommendation> {
    try {
      return await post__shoppingMall_adminUser_aiRecommendations({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update AI recommendation record by ID.
   *
   * Update an existing AI-powered recommendation record by its ID.
   *
   * AdminUser-only access to enforce AI data consistency.
   *
   * Input is validated against creation/update schemas.
   *
   * Errors for missing or invalid IDs, or insufficient permissions.
   *
   * @param connection
   * @param aiRecommendationId ID of the AI recommendation to update
   * @param body AI recommendation updated field values
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":aiRecommendationId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("aiRecommendationId")
    aiRecommendationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiRecommendation.IUpdate,
  ): Promise<IShoppingMallAiRecommendation> {
    try {
      return await put__shoppingMall_adminUser_aiRecommendations_$aiRecommendationId(
        {
          adminUser,
          aiRecommendationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete AI recommendation record by ID.
   *
   * Delete an AI recommendation record permanently by its ID.
   *
   * This operation performs a hard delete without soft deletion.
   *
   * AdminUser authorization is mandatory for this critical operation.
   *
   * No response body is returned upon success.
   *
   * @param connection
   * @param aiRecommendationId ID of the AI recommendation to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":aiRecommendationId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("aiRecommendationId")
    aiRecommendationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_aiRecommendations_$aiRecommendationId(
        {
          adminUser,
          aiRecommendationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
