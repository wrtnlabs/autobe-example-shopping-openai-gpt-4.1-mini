import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_channelCategories } from "../../../../providers/post__shoppingMall_adminUser_channelCategories";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_channelCategories } from "../../../../providers/patch__shoppingMall_adminUser_channelCategories";
import { get__shoppingMall_adminUser_channelCategories_$id } from "../../../../providers/get__shoppingMall_adminUser_channelCategories_$id";
import { put__shoppingMall_adminUser_channelCategories_$id } from "../../../../providers/put__shoppingMall_adminUser_channelCategories_$id";
import { delete__shoppingMall_adminUser_channelCategories_$id } from "../../../../providers/delete__shoppingMall_adminUser_channelCategories_$id";

import { IShoppingMallChannelCategory } from "../../../../api/structures/IShoppingMallChannelCategory";
import { IPageIShoppingMallChannelCategory } from "../../../../api/structures/IPageIShoppingMallChannelCategory";

@Controller("/shoppingMall/adminUser/channelCategories")
export class ShoppingmallAdminuserChannelcategoriesController {
  /**
   * Create a new channel category mapping.
   *
   * Creates a new channel-category association in the shopping mall system.
   *
   * This mapping defines which product categories belong to which sales
   * channels to support multi-channel category configurations.
   *
   * The API expects validated request data and enforces uniqueness of
   * channel-category pairs.
   *
   * Access control restricts creation to administrative roles with appropriate
   * permissions.
   *
   * On success, the newly created mapping's details are returned.
   *
   * @param connection
   * @param body Creation data for new channel-category mapping
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createChannelCategory(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallChannelCategory.ICreate,
  ): Promise<IShoppingMallChannelCategory> {
    try {
      return await post__shoppingMall_adminUser_channelCategories({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve channel category mappings.
   *
   * Retrieves a list of shopping mall channel-category mappings with support
   * for filtering, sorting, and pagination. Channel categories enable
   * configuration of hierarchical product classifications per channel.
   *
   * The operation processes search criteria to narrow down results and returns
   * a paginated view of the matched mappings.
   *
   * Security and role-based filtering restrict access to authorized
   * administrators to manage channel category assignments and system
   * configurations.
   *
   * @param connection
   * @param body Search and filter parameters for channel-category mappings
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexChannelCategory(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallChannelCategory.IRequest,
  ): Promise<IPageIShoppingMallChannelCategory.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_channelCategories({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific channel category mapping by ID.
   *
   * Retrieves detailed information of a channel-category mapping specified by
   * its unique ID.
   *
   * This mapping represents the link between a sales channel and a product
   * category within the shopping mall system, enabling tailored product
   * classification structures per channel.
   *
   * Access is restricted to authorized administrative users to maintain system
   * integrity and configuration consistency.
   *
   * Potential errors include invalid IDs or unauthorized access handling.
   *
   * @param connection
   * @param id Unique identifier of the target channel category mapping
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atChannelCategory(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallChannelCategory> {
    try {
      return await get__shoppingMall_adminUser_channelCategories_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific channel category mapping by ID.
   *
   * Updates channel-category mapping details identified by its unique ID.
   *
   * This allows modification of which product category is linked to which sales
   * channel.
   *
   * Access is restricted to authorized administrative roles.
   *
   * The operation requires validation of the input data and enforces uniqueness
   * constraints.
   *
   * Errors due to invalid identifiers or data conflicts are properly managed.
   *
   * @param connection
   * @param id Unique identifier of the target channel category
   * @param body Update data for the channel-category mapping
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateChannelCategory(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallChannelCategory.IUpdate,
  ): Promise<IShoppingMallChannelCategory> {
    try {
      return await put__shoppingMall_adminUser_channelCategories_$id({
        adminUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a channel category mapping permanently by ID.
   *
   * Deletes a specific channel-category mapping identified by ID.
   *
   * This removes the product category association from the specified sales
   * channel.
   *
   * Authorization is limited to administrators. The deletion is irreversible.
   *
   * No response body is returned on success.
   *
   * Errors for invalid IDs or permission issues are handled accordingly.
   *
   * @param connection
   * @param id Unique identifier of the target channel category
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseChannelCategory(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_channelCategories_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
