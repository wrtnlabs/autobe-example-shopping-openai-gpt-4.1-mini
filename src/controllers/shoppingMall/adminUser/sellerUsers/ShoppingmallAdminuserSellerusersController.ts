import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMall_adminUser_sellerUsers } from "../../../../providers/patch__shoppingMall_adminUser_sellerUsers";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__shoppingMall_adminUser_sellerUsers_$id } from "../../../../providers/get__shoppingMall_adminUser_sellerUsers_$id";
import { put__shoppingMall_adminUser_sellerUsers_$id } from "../../../../providers/put__shoppingMall_adminUser_sellerUsers_$id";
import { delete__shoppingMall_adminUser_sellerUsers_$id } from "../../../../providers/delete__shoppingMall_adminUser_sellerUsers_$id";

import { IPageIShoppingMallSellerUser } from "../../../../api/structures/IPageIShoppingMallSellerUser";
import { IShoppingMallSellerUser } from "../../../../api/structures/IShoppingMallSellerUser";

@Controller("/shoppingMall/adminUser/sellerUsers")
export class ShoppingmallAdminuserSellerusersController {
  /**
   * Search and retrieve a filtered, paginated list of shopping mall seller
   * users.
   *
   * Retrieve a filtered and paginated list of shopping mall seller users.
   * Enables administrative or reporting features to manage sellers
   * effectively.
   *
   * Security restrictions apply to protect seller privacy and sensitive
   * business information.
   *
   * This operates on shopping_mall_sellerusers table with its indexed fields
   * for performance.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for seller user
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallSellerUser.IRequest,
  ): Promise<IPageIShoppingMallSellerUser.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_sellerUsers({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a shopping mall seller user by ID.
   *
   * Retrieve detailed information for a specific shopping mall seller user by
   * ID. Intended for administrative use and detailed profile management.
   *
   * Access is limited to authorized roles to safeguard sensitive business data.
   *
   * The response excludes secure authentication hashes but provides all
   * essential seller details.
   *
   * Useful for seller management and verification workflows.
   *
   * @param connection
   * @param id Unique identifier of the target seller user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSellerUser> {
    try {
      return await get__shoppingMall_adminUser_sellerUsers_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing shopping mall seller user by ID.
   *
   * Update specific information of a shopping mall seller user by ID. This
   * operation ensures authorized users can modify seller profiles safely
   * without exposing sensitive authentication credentials.
   *
   * The update request is validated against the schema's allowable update
   * fields.
   *
   * Returns the updated seller user record upon success.
   *
   * @param connection
   * @param id Unique identifier of the target seller user
   * @param body Update data for the seller user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSellerUser.IUpdate,
  ): Promise<IShoppingMallSellerUser> {
    try {
      return await put__shoppingMall_adminUser_sellerUsers_$id({
        adminUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a shopping mall seller user by ID.
   *
   * Soft delete a shopping mall seller user specified by ID. The operation
   * performs a logical deletion to retain audit trails while hiding the seller
   * from active queries.
   *
   * Administrator role required for sensitive data manipulation.
   *
   * Soft deletion ensures compliance with data retention policies.
   *
   * Deleted sellers will be excluded from general listings.
   *
   * @param connection
   * @param id Unique identifier of the target seller user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_sellerUsers_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
