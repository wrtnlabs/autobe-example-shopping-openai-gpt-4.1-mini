import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_reviews_$reviewId_comments } from "../../../../../providers/post__shoppingMall_adminUser_reviews_$reviewId_comments";
import { AdminuserAuth } from "../../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_reviews_$reviewId_comments } from "../../../../../providers/patch__shoppingMall_adminUser_reviews_$reviewId_comments";
import { get__shoppingMall_adminUser_reviews_$reviewId_comments_$commentId } from "../../../../../providers/get__shoppingMall_adminUser_reviews_$reviewId_comments_$commentId";
import { put__shoppingMall_adminUser_reviews_$reviewId_comments_$commentId } from "../../../../../providers/put__shoppingMall_adminUser_reviews_$reviewId_comments_$commentId";
import { delete__shoppingMall_adminUser_reviews_$reviewId_comments_$commentId } from "../../../../../providers/delete__shoppingMall_adminUser_reviews_$reviewId_comments_$commentId";

import { IShoppingMallComment } from "../../../../../api/structures/IShoppingMallComment";
import { IPageIShoppingMallComment } from "../../../../../api/structures/IPageIShoppingMallComment";

@Controller("/shoppingMall/adminUser/reviews/:reviewId/comments")
export class ShoppingmallAdminuserReviewsCommentsController {
  /**
   * Add a new comment to a product review.
   *
   * Create a new comment for a specific product review given by reviewId.
   *
   * The request body includes comment content, author identification, privacy
   * flag, and status.
   *
   * Only authorized users (memberUser, sellerUser, adminUser) may create
   * comments.
   *
   * Returns information about the created comment.
   *
   * @param connection
   * @param reviewId Unique identifier of the target product review
   * @param body Review comment creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallComment.ICreate,
  ): Promise<IShoppingMallComment> {
    try {
      return await post__shoppingMall_adminUser_reviews_$reviewId_comments({
        adminUser,
        reviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated comments list for a product review.
   *
   * Retrieve a filtered and paginated list of comments for a given product
   * review specified by reviewId.
   *
   * This operation returns detailed information including comment content,
   * privacy settings, author type (member, guest, seller), timestamps, and
   * status. It supports an interface for users and administrators to browse
   * comments effectively.
   *
   * Security and privacy rules apply to ensure only authorized users may see or
   * interact with private comments. The functionality supports enhanced product
   * review interactions within the shopping mall platform.
   *
   * This operation uses the shopping_mall_comments entity and related relations
   * as specified in the Prisma DB schema.
   *
   * @param connection
   * @param reviewId Unique identifier of the target product review
   * @param body Search and pagination criteria for filtering review comments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallComment.IRequest,
  ): Promise<IPageIShoppingMallComment> {
    try {
      return await patch__shoppingMall_adminUser_reviews_$reviewId_comments({
        adminUser,
        reviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a specific review comment.
   *
   * Retrieve detailed information of a comment for a given product review by
   * commentId and reviewId.
   *
   * Returns all comment fields including content, privacy flag, author member
   * or guest or seller, status, and timestamps.
   *
   * Access control restrictions apply to protect private comments according to
   * user roles.
   *
   * @param connection
   * @param reviewId Unique identifier of the target product review
   * @param commentId Unique identifier of the comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallComment> {
    try {
      return await get__shoppingMall_adminUser_reviews_$reviewId_comments_$commentId(
        {
          adminUser,
          reviewId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Modify a product review comment.
   *
   * Update a comment on a product review identified by reviewId and commentId.
   *
   * The updated content, privacy setting, and status are in the request body.
   *
   * Access control restricts updates to authorized users.
   *
   * Returns the updated comment details.
   *
   * @param connection
   * @param reviewId Unique identifier of the target product review
   * @param commentId Unique identifier of the comment
   * @param body Review comment update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallComment.IUpdate,
  ): Promise<IShoppingMallComment> {
    try {
      return await put__shoppingMall_adminUser_reviews_$reviewId_comments_$commentId(
        {
          adminUser,
          reviewId,
          commentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a comment from a product review permanently.
   *
   * Permanently delete a comment within a product review.
   *
   * Deletion removes the comment record identified by commentId under the
   * review specified by reviewId.
   *
   * Only authorized users may delete comments.
   *
   * This is a hard delete operation without recovery.
   *
   * @param connection
   * @param reviewId Unique identifier of the target product review
   * @param commentId Unique identifier of the comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_reviews_$reviewId_comments_$commentId(
        {
          adminUser,
          reviewId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
