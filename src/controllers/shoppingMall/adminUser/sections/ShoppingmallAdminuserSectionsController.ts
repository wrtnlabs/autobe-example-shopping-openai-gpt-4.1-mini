import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_sections } from "../../../../providers/post__shoppingMall_adminUser_sections";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_sections } from "../../../../providers/patch__shoppingMall_adminUser_sections";
import { get__shoppingMall_adminUser_sections_$id } from "../../../../providers/get__shoppingMall_adminUser_sections_$id";
import { put__shoppingMall_adminUser_sections_$id } from "../../../../providers/put__shoppingMall_adminUser_sections_$id";
import { delete__shoppingMall_adminUser_sections_$id } from "../../../../providers/delete__shoppingMall_adminUser_sections_$id";

import { IShoppingMallSection } from "../../../../api/structures/IShoppingMallSection";
import { IPageIShoppingMallSection } from "../../../../api/structures/IPageIShoppingMallSection";

@Controller("/shoppingMall/adminUser/sections")
export class ShoppingmallAdminuserSectionsController {
  /**
   * Create a new shopping mall spatial section.
   *
   * Create a new spatial section in the shopping mall system.
   *
   * The section groups products and orders spatially and supports
   * administrative configuration.
   *
   * Validation enforces unique codes and valid input data.
   *
   * Operation is restricted to adminUser.
   *
   * Returns the created section data.
   *
   * @param connection
   * @param body Data required to create a new shopping mall section
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallSection.ICreate,
  ): Promise<IShoppingMallSection> {
    try {
      return await post__shoppingMall_adminUser_sections({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated list of shopping mall spatial sections.
   *
   * The operation supports filters on status, section name or code, with
   * pagination and sorting capabilities.
   *
   * Access is restricted to adminUser.
   *
   * Errors returned on invalid parameters or authorization failures.
   *
   * Response includes section summaries optimized for list display.
   *
   * @param connection
   * @param body Request parameters to filter, search, and paginate sections
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallSection.IRequest,
  ): Promise<IPageIShoppingMallSection.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_sections({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a shopping mall section by ID.
   *
   * Get detailed information of a specific shopping mall section by its ID.
   *
   * Only adminUser can perform this operation.
   *
   * Validation ensures ID is a valid UUID and the section exists.
   *
   * Returns full section details.
   *
   * @param connection
   * @param id Unique identifier of the target shopping mall section
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSection> {
    try {
      return await get__shoppingMall_adminUser_sections_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific product section by ID.
   *
   * This API endpoint allows authorized users to update detailed information of
   * a section, which is used to spatially organize products within the shopping
   * mall's multi-channel sales environment. The operation modifies section
   * properties such as the unique code, display name, optional description, and
   * current operational status.
   *
   * Section updates are subject to validation against the Prisma schema
   * shopping_mall_sections, ensuring data consistency and integrity. The
   * endpoint accepts the section identifier as a path parameter and the updated
   * content in the request body.
   *
   * Security controls enforce role-based permissions restricting this operation
   * to appropriate system users such as administrators or channel managers.
   * Errors in updating due to invalid identifiers or data violations are
   * handled with detailed responses.
   *
   * This operation supports maintenance of the product classification structure
   * and helps keep the mall's sections synchronized with business needs.
   *
   * @param connection
   * @param id Unique identifier of the target section
   * @param body Update data for the section entity
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateSection(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSection.IUpdate,
  ): Promise<IShoppingMallSection> {
    try {
      return await put__shoppingMall_adminUser_sections_$id({
        adminUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a product section permanently by ID.
   *
   * Deletes a product section identified by its unique ID. Sections organize
   * products spatially within channels in the shopping mall system.
   *
   * This operation removes the section record entirely from the database and
   * cannot be undone. It requires administrative authorization to ensure proper
   * controls.
   *
   * Upon successful deletion, no content is returned to confirm removal.
   *
   * Errors such as nonexistent IDs or database constraints violations are
   * reported in standard error responses.
   *
   * @param connection
   * @param id Unique identifier of the target section
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseSection(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_sections_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
