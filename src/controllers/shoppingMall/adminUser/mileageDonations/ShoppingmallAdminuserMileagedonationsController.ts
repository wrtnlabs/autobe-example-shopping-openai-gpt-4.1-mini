import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_mileageDonations } from "../../../../providers/post__shoppingMall_adminUser_mileageDonations";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_mileageDonations } from "../../../../providers/patch__shoppingMall_adminUser_mileageDonations";
import { get__shoppingMall_adminUser_mileageDonations_$mileageDonationId } from "../../../../providers/get__shoppingMall_adminUser_mileageDonations_$mileageDonationId";
import { put__shoppingMall_adminUser_mileageDonations_$mileageDonationId } from "../../../../providers/put__shoppingMall_adminUser_mileageDonations_$mileageDonationId";
import { delete__shoppingMall_adminUser_mileageDonations_$mileageDonationId } from "../../../../providers/delete__shoppingMall_adminUser_mileageDonations_$mileageDonationId";

import { IShoppingMallMileageDonation } from "../../../../api/structures/IShoppingMallMileageDonation";
import { IPageIShoppingMallMileageDonation } from "../../../../api/structures/IPageIShoppingMallMileageDonation";

@Controller("/shoppingMall/adminUser/mileageDonations")
export class ShoppingmallAdminuserMileagedonationsController {
  /**
   * Create a new mileage donation record.
   *
   * Allows admin users to record a new mileage donation to a member user for
   * promotions or compensation.
   *
   * Requires donation amount, admin donor ID, member recipient ID, reason, and
   * date.
   *
   * Ensures integrity with validation of IDs as UUID and positive donation
   * amounts.
   *
   * Admin authorization required.
   *
   * @param connection
   * @param body Mileage donation creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallMileageDonation.ICreate,
  ): Promise<IShoppingMallMileageDonation> {
    try {
      return await post__shoppingMall_adminUser_mileageDonations({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list mileage donations with filtering and pagination.
   *
   * Retrieve a paginated list of mileage donations with filtering options for
   * admin users to monitor and audit donation history.
   *
   * Supports pagination, sorting, and filtering to refine search results based
   * on donation date ranges, admin, or member filters.
   *
   * Data reflects donation reason, amount, dates, and associated user
   * references.
   *
   * Requires admin role authorization.
   *
   * @param connection
   * @param body Search filters and pagination parameters for mileage donations
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallMileageDonation.IRequest,
  ): Promise<IPageIShoppingMallMileageDonation> {
    try {
      return await patch__shoppingMall_adminUser_mileageDonations({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed mileage donation record information.
   *
   * Fetch detailed information about a particular mileage donation identified
   * by 'mileageDonationId'.
   *
   * Details include donor admin user, recipient member user, donation reason
   * and amount, and audit timestamps.
   *
   * Authorized admin users only.
   *
   * @param connection
   * @param mileageDonationId The unique identifier for the mileage donation
   *   record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":mileageDonationId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("mileageDonationId")
    mileageDonationId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallMileageDonation> {
    try {
      return await get__shoppingMall_adminUser_mileageDonations_$mileageDonationId(
        {
          adminUser,
          mileageDonationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a mileage donation record.
   *
   * Allows updating details of an existing mileage donation record.
   *
   * Admin-only access.
   *
   * Validates donationId existence, UUID formats, and positive donation
   * amounts.
   *
   * Supports update of donation reason, amount, and donation date.
   *
   * Returns updated record details.
   *
   * @param connection
   * @param mileageDonationId Unique identifier of the mileage donation to
   *   update
   * @param body Mileage donation update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":mileageDonationId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("mileageDonationId")
    mileageDonationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallMileageDonation.IUpdate,
  ): Promise<IShoppingMallMileageDonation> {
    try {
      return await put__shoppingMall_adminUser_mileageDonations_$mileageDonationId(
        {
          adminUser,
          mileageDonationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete mileage donation by ID.
   *
   * Delete a mileage donation record from the system by its unique identifier.
   * This operation permanently removes the mileage donation entry representing
   * mileage points donated by administrators to members. The deleted record
   * cannot be recovered later.
   *
   * Access to this operation should be restricted to admins with the necessary
   * permissions to manage mileage donations.
   *
   * This operation directly impacts business reporting related to customer
   * mileage donations and requires careful authorization control. Any
   * dependencies on existing donation records for reporting or analytics should
   * be handled prior to deletion.
   *
   * No request body is necessary for this operation.
   *
   * Successful execution results in complete removal of the mileage donation
   * record from the shopping_mall_mileage_donations table, without residual
   * traces in the system.
   *
   * @param connection
   * @param mileageDonationId Unique identifier of the mileage donation to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":mileageDonationId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("mileageDonationId")
    mileageDonationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_mileageDonations_$mileageDonationId(
        {
          adminUser,
          mileageDonationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
