import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMall_adminUser_orderStatusHistories } from "../../../../providers/patch__shoppingMall_adminUser_orderStatusHistories";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__shoppingMall_adminUser_orderStatusHistories_$id } from "../../../../providers/get__shoppingMall_adminUser_orderStatusHistories_$id";

import { IPageIShoppingMallOrderStatusHistory } from "../../../../api/structures/IPageIShoppingMallOrderStatusHistory";
import { IShoppingMallOrderStatusHistory } from "../../../../api/structures/IShoppingMallOrderStatusHistory";

@Controller("/shoppingMall/adminUser/orderStatusHistories")
export class ShoppingmallAdminuserOrderstatushistoriesController {
  /**
   * Search and retrieve paginated order status history records with filtering
   * options. This includes old and new status values, change timestamps, and
   * related order references.
   *
   * Only allowed for adminUser roles due to the sensitive nature of order audit
   * data.
   *
   * Supports pagination parameters to handle large datasets efficiently,
   * enabling administrators to review order lifecycle changes.
   *
   * Errors occur when invalid filters are applied or parameters exceed allowed
   * range.
   *
   * @param connection
   * @param body Order status history search criteria and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallOrderStatusHistory.IRequest,
  ): Promise<IPageIShoppingMallOrderStatusHistory> {
    try {
      return await patch__shoppingMall_adminUser_orderStatusHistories({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve order status history by ID.
   *
   * Retrieve a detailed order status history record by its unique ID. This
   * record traces the exact change in order status over time.
   *
   * Restricted access to adminUser roles ensures audit data integrity.
   *
   * Errors are returned if the record does not exist or the user lacks
   * permission.
   *
   * @param connection
   * @param id The unique ID of the target order status history record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderStatusHistory> {
    try {
      return await get__shoppingMall_adminUser_orderStatusHistories_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
