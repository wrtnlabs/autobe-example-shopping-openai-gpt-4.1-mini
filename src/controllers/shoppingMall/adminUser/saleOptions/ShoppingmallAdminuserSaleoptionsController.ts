import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_saleOptions } from "../../../../providers/post__shoppingMall_adminUser_saleOptions";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_saleOptions } from "../../../../providers/patch__shoppingMall_adminUser_saleOptions";
import { get__shoppingMall_adminUser_saleOptions_$saleOptionId } from "../../../../providers/get__shoppingMall_adminUser_saleOptions_$saleOptionId";
import { put__shoppingMall_adminUser_saleOptions_$saleOptionId } from "../../../../providers/put__shoppingMall_adminUser_saleOptions_$saleOptionId";
import { delete__shoppingMall_adminUser_saleOptions_$saleOptionId } from "../../../../providers/delete__shoppingMall_adminUser_saleOptions_$saleOptionId";

import { IShoppingMallSaleOption } from "../../../../api/structures/IShoppingMallSaleOption";
import { IPageIShoppingMallSaleOption } from "../../../../api/structures/IPageIShoppingMallSaleOption";

@Controller("/shoppingMall/adminUser/saleOptions")
export class ShoppingmallAdminuserSaleoptionsController {
  /**
   * Create a new sale option master record with group, code, name, and type.
   *
   * SellerUser and adminUser only.
   *
   * Supports the expansion of product option sets in the sales system.
   *
   * @param connection
   * @param body Creation data for a new sale option
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallSaleOption.ICreate,
  ): Promise<IShoppingMallSaleOption> {
    try {
      return await post__shoppingMall_adminUser_saleOptions({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list sale options.
   *
   * Search and retrieve sale options with filters for option groups, names, and
   * types.
   *
   * This endpoint is accessible only to sellerUser and administrator users.
   *
   * Useful for managing the catalog of options applicable to products.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for sale options
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallSaleOption.IRequest,
  ): Promise<IPageIShoppingMallSaleOption.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_saleOptions({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed sale option information.
   *
   * Retrieve detailed information for a specific sale option, including its
   * group, code, name, and type.
   *
   * Roles sellerUser and adminUser are required for access.
   *
   * This operation is key for editing and reviewing option master data.
   *
   * @param connection
   * @param saleOptionId Unique identifier of the target sale option
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":saleOptionId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("saleOptionId")
    saleOptionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSaleOption> {
    try {
      return await get__shoppingMall_adminUser_saleOptions_$saleOptionId({
        adminUser,
        saleOptionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a sale option by ID.
   *
   * Update details of an existing sale option in the shopping mall backend
   * system.
   *
   * This operation allows authorized users to modify sale option attributes
   * including code, name, type, and associated option group. The saleOptionId
   * path parameter identifies the target sale option uniquely.
   *
   * Users with appropriate roles can perform this operation ensuring that
   * product option configurations remain current and accurate. Input validation
   * ensures the updated data fully conforms to schema constraints.
   *
   * The updated sale option record is returned as confirmation of success.
   *
   * Security considerations include verifying the identity and permissions of
   * the user making updates, and validation of the input to prevent invalid or
   * malicious data.
   *
   * Typically used in tandem with listing and creation endpoints for sale
   * options.
   *
   * @param connection
   * @param saleOptionId Unique identifier of the sale option to update
   * @param body Updated sale option data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":saleOptionId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("saleOptionId")
    saleOptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSaleOption.IUpdate,
  ): Promise<IShoppingMallSaleOption> {
    try {
      return await put__shoppingMall_adminUser_saleOptions_$saleOptionId({
        adminUser,
        saleOptionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a sale option by ID.
   *
   * Permanently removes a sale option from the database by its unique
   * identifier.
   *
   * This operation requires privileged access to prevent unauthorized
   * deletions.
   *
   * Successful completion results in the hard deletion of the sale option
   * record and its immediate unavailability.
   *
   * This operation is irreversible and will remove all associated option
   * configurations.
   *
   * Use with caution and ensure proper user authorization.
   *
   * Errors may occur if the specified sale option ID does not exist.
   *
   * Security checks prevent unauthorized deletions.
   *
   * @param connection
   * @param saleOptionId Unique identifier of the sale option to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":saleOptionId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("saleOptionId")
    saleOptionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_saleOptions_$saleOptionId({
        adminUser,
        saleOptionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
