import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMall_adminUser_sales_$saleId_snapshots } from "../../../../../providers/patch__shoppingMall_adminUser_sales_$saleId_snapshots";
import { AdminuserAuth } from "../../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../../decorators/payload/AdminuserPayload";
import { get__shoppingMall_adminUser_sales_$saleId_snapshots_$snapshotId } from "../../../../../providers/get__shoppingMall_adminUser_sales_$saleId_snapshots_$snapshotId";

import { IPageIShoppingMallSaleSnapshot } from "../../../../../api/structures/IPageIShoppingMallSaleSnapshot";
import { IShoppingMallSaleSnapshot } from "../../../../../api/structures/IShoppingMallSaleSnapshot";

@Controller("/shoppingMall/adminUser/sales/:saleId/snapshots")
export class ShoppingmallAdminuserSalesSnapshotsController {
  /**
   * List paginated snapshots of a shopping mall sale product.
   *
   * Retrieve a paginated list of snapshots for a specified shopping mall sale
   * product. Snapshots preserve historical versions of the product data when
   * changes were made, enabling auditability and rollback capabilities.
   *
   * Security considerations include ensuring the requester has appropriate
   * viewing permissions, typically for authenticated sellerUsers or adminUsers
   * responsible for product data management.
   *
   * The operation supports complex query parameters such as date range
   * filtering and sorting to navigate snapshot history. The response delivers
   * summary snapshot information with metadata optimized for display in history
   * logs or version comparison tools.
   *
   * @param connection
   * @param saleId Unique identifier of the target sale product
   * @param body Search criteria and pagination parameters for sale snapshots
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSaleSnapshot.IRequest,
  ): Promise<IPageIShoppingMallSaleSnapshot.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_sales_$saleId_snapshots({
        adminUser,
        saleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific sale snapshot.
   *
   * Retrieve detailed information about a specific snapshot of a shopping mall
   * sale product by saleId and snapshotId. Snapshots represent immutable
   * historical data of product state at certain times.
   *
   * This operation checks that the requester has sellerUser or adminUser
   * privileges to access historical product data. The response returns all
   * snapshot fields for review, audit, or comparison purposes.
   *
   * Error handling includes managing invalid snapshot references or
   * unauthorized access. This endpoint is crucial for managing product change
   * histories and ensuring data integrity.
   *
   * @param connection
   * @param saleId Unique identifier of the target sale product
   * @param snapshotId Unique identifier of the sale snapshot
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":snapshotId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedParam("snapshotId")
    snapshotId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSaleSnapshot> {
    try {
      return await get__shoppingMall_adminUser_sales_$saleId_snapshots_$snapshotId(
        {
          adminUser,
          saleId,
          snapshotId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
