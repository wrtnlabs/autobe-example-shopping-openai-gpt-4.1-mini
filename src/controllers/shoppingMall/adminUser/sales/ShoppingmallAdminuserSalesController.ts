import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMall_adminUser_sales } from "../../../../providers/patch__shoppingMall_adminUser_sales";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__shoppingMall_adminUser_sales_$saleId } from "../../../../providers/get__shoppingMall_adminUser_sales_$saleId";
import { put__shoppingMall_adminUser_sales_$saleId } from "../../../../providers/put__shoppingMall_adminUser_sales_$saleId";
import { delete__shoppingMall_adminUser_sales_$saleId } from "../../../../providers/delete__shoppingMall_adminUser_sales_$saleId";

import { IPageIShoppingMallSale } from "../../../../api/structures/IPageIShoppingMallSale";
import { IShoppingMallSale } from "../../../../api/structures/IShoppingMallSale";

@Controller("/shoppingMall/adminUser/sales")
export class ShoppingmallAdminuserSalesController {
  /**
   * Search and list shopping mall sales products.
   *
   * Get a filtered and paginated list of sales products in the shopping mall.
   *
   * This endpoint supports multiple filters like product name, seller, channel,
   * and status.
   *
   * Search results include active and archived products with audit and status
   * tracking.
   *
   * Access is restricted to users with 'adminUser' or 'sellerUser' roles.
   *
   * Validation of paging and filters is implemented.
   *
   * @param connection
   * @param body Search criteria and pagination for sales products
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallSale.IRequest,
  ): Promise<IPageIShoppingMallSale.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_sales({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed sales product by ID.
   *
   * Get a sales product's full information by saleId.
   *
   * Access is restricted to authorized users with roles 'adminUser' or
   * 'sellerUser'.
   *
   * Returns comprehensive product details including audit timestamps.
   *
   * Handles errors for invalid or missing product IDs.
   *
   * @param connection
   * @param saleId Unique identifier of the sales product
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":saleId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSale> {
    try {
      return await get__shoppingMall_adminUser_sales_$saleId({
        adminUser,
        saleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a sales product's information.
   *
   * Modify details of a sales product identified by saleId.
   *
   * Authorization is required for 'adminUser' and 'sellerUser' roles.
   *
   * Update payload can modify channel, section, seller id, status, name,
   * description, and price.
   *
   * Validates inputs strictly.
   *
   * Returns updated product info or errors.
   *
   * @param connection
   * @param saleId Unique identifier of the sales product to update
   * @param body Update data for sales product
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":saleId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSale.IUpdate,
  ): Promise<IShoppingMallSale> {
    try {
      return await put__shoppingMall_adminUser_sales_$saleId({
        adminUser,
        saleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a shopping mall sale product by its ID.
   *
   * This API endpoint allows a sellerUser or adminUser to permanently delete a
   * product sale record identified by its unique saleId. The operation directly
   * removes the sale entry from the shopping_mall_sales table. Cascade deletion
   * ensures that associated sale snapshots, sale units, and inventory items are
   * removed to prevent orphaned records.
   *
   * Only users with 'sellerUser' or 'adminUser' roles have the authority to
   * perform this deletion due to the irreversible nature of the operation and
   * its impact on product catalogs and order consistency. Attempts by
   * unauthorized roles will be rejected.
   *
   * Upon successful deletion, no response body is returned, but appropriate
   * HTTP status codes communicate the result. Error handling covers cases such
   * as non-existent saleId or insufficient permissions. This operation removes
   * product data permanently and is not reversible through application logic.
   *
   * @param connection
   * @param saleId Unique identifier of the target sale product
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":saleId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_sales_$saleId({
        adminUser,
        saleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
