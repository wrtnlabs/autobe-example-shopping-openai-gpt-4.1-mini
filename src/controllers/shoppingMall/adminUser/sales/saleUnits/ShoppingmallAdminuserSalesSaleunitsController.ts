import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_sales_$saleId_saleUnits } from "../../../../../providers/post__shoppingMall_adminUser_sales_$saleId_saleUnits";
import { AdminuserAuth } from "../../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_sales_$saleId_saleUnits } from "../../../../../providers/patch__shoppingMall_adminUser_sales_$saleId_saleUnits";
import { get__shoppingMall_adminUser_sales_$saleId_saleUnits_$saleUnitId } from "../../../../../providers/get__shoppingMall_adminUser_sales_$saleId_saleUnits_$saleUnitId";
import { put__shoppingMall_adminUser_sales_$saleId_saleUnits_$saleUnitId } from "../../../../../providers/put__shoppingMall_adminUser_sales_$saleId_saleUnits_$saleUnitId";
import { delete__shoppingMall_adminUser_sales_$saleId_saleUnits_$saleUnitId } from "../../../../../providers/delete__shoppingMall_adminUser_sales_$saleId_saleUnits_$saleUnitId";

import { IShoppingMallSaleUnit } from "../../../../../api/structures/IShoppingMallSaleUnit";
import { IPageIShoppingMallSaleUnit } from "../../../../../api/structures/IPageIShoppingMallSaleUnit";

@Controller("/shoppingMall/adminUser/sales/:saleId/saleUnits")
export class ShoppingmallAdminuserSalesSaleunitsController {
  /**
   * Create a new sale unit for a sale product.
   *
   * Create a new sale unit within a specified shopping mall sale product. This
   * operation allows sellerUsers or adminUsers to add granular components or
   * sub-parts of a sale product.
   *
   * The creation request must provide unique code, name, and optional
   * description for the unit. The system generates timestamps upon creation.
   * Access control enforces sellerUser or adminUser role requirements to
   * prevent unauthorized data modification.
   *
   * Upon success, the newly created sale unit is returned with detailed
   * information as confirmation and for subsequent operations.
   *
   * @param connection
   * @param saleId Unique identifier of the target sale product
   * @param body Creation details of the sale unit
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSaleUnit.ICreate,
  ): Promise<IShoppingMallSaleUnit> {
    try {
      return await post__shoppingMall_adminUser_sales_$saleId_saleUnits({
        adminUser,
        saleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List sale units for a specific sale product.
   *
   * Retrieve a filtered and paginated list of sales units associated with a
   * specific shopping mall sale product. Sale units define components or parts
   * of a product and are essential for managing complex product configurations
   * and inventory.
   *
   * This operation supports pagination and filtering to efficiently query
   * relevant units. Access is restricted to sellerUsers and adminUsers to
   * maintain data privacy and control.
   *
   * Returned data includes summary information for each sale unit optimized for
   * display in product management interfaces or reports.
   *
   * @param connection
   * @param saleId Unique identifier of the target sale product
   * @param body Search criteria and pagination for sale units
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSaleUnit.IRequest,
  ): Promise<IPageIShoppingMallSaleUnit.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_sales_$saleId_saleUnits({
        adminUser,
        saleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific sale unit.
   *
   * Retrieve detailed information about a single sale unit of a shopping mall
   * sale product. Sale units represent components or sub-elements of a product
   * used for inventory and configuration.
   *
   * This operation checks that the requester has sellerUser or adminUser roles
   * to access product unit details. The response includes all properties of the
   * sale unit entity as defined in the underlying schema.
   *
   * Error handling accounts for invalid unit identifiers or unauthorized
   * requests. This endpoint supports complex product management scenarios
   * requiring component level details.
   *
   * @param connection
   * @param saleId Unique identifier of the target sale product
   * @param saleUnitId Unique identifier of the sale unit
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":saleUnitId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedParam("saleUnitId")
    saleUnitId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSaleUnit> {
    try {
      return await get__shoppingMall_adminUser_sales_$saleId_saleUnits_$saleUnitId(
        {
          adminUser,
          saleId,
          saleUnitId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a sale unit of a sale product.
   *
   * Update data of a specific sale unit belonging to a shopping mall sale
   * product. This operation enables sellerUsers or adminUsers to modify details
   * such as code, name, and description of product components.
   *
   * The update request must specify valid fields to modify and respects
   * validation rules such as uniqueness and non-null constraints. Timestamps
   * are updated accordingly.
   *
   * Error handling covers cases of invalid sale unit identifiers and permission
   * enforcement ensuring only authorized roles can make changes.
   *
   * Upon success, the updated sale unit details are returned delivering
   * confirmation and further data access.
   *
   * @param connection
   * @param saleId Unique identifier of the target sale product
   * @param saleUnitId Unique identifier of the sale unit
   * @param body Update data for the sale unit
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":saleUnitId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedParam("saleUnitId")
    saleUnitId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSaleUnit.IUpdate,
  ): Promise<IShoppingMallSaleUnit> {
    try {
      return await put__shoppingMall_adminUser_sales_$saleId_saleUnits_$saleUnitId(
        {
          adminUser,
          saleId,
          saleUnitId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a sale unit from a sale product.
   *
   * Delete a specific sale unit from a shopping mall sale product. This
   * operation permanently removes the component from the system including its
   * relations such as options. The operation enforces strict role-based access
   * control requiring sellerUser or adminUser privileges.
   *
   * Proper error handling ensures that invalid sale units or unauthorized
   * attempts are managed gracefully. This delete operation is irreversible and
   * removes the unit record entirely.
   *
   * Business validation ensures that dependent data or business rules are
   * respected before deletion.
   *
   * No response body is provided but HTTP status codes communicate success or
   * failure.
   *
   * @param connection
   * @param saleId Unique identifier of the target sale product
   * @param saleUnitId Unique identifier of the sale unit
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":saleUnitId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("saleId")
    saleId: string & tags.Format<"uuid">,
    @TypedParam("saleUnitId")
    saleUnitId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_sales_$saleId_saleUnits_$saleUnitId(
        {
          adminUser,
          saleId,
          saleUnitId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
