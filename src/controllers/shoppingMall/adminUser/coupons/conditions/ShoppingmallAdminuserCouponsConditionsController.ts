import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_coupons_$couponId_conditions } from "../../../../../providers/post__shoppingMall_adminUser_coupons_$couponId_conditions";
import { AdminuserAuth } from "../../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_coupons_$couponId_conditions } from "../../../../../providers/patch__shoppingMall_adminUser_coupons_$couponId_conditions";
import { get__shoppingMall_adminUser_coupons_$couponId_conditions_$conditionId } from "../../../../../providers/get__shoppingMall_adminUser_coupons_$couponId_conditions_$conditionId";
import { put__shoppingMall_adminUser_coupons_$couponId_conditions_$conditionId } from "../../../../../providers/put__shoppingMall_adminUser_coupons_$couponId_conditions_$conditionId";
import { delete__shoppingMall_adminUser_coupons_$couponId_conditions_$conditionId } from "../../../../../providers/delete__shoppingMall_adminUser_coupons_$couponId_conditions_$conditionId";

import { IShoppingMallCouponCondition } from "../../../../../api/structures/IShoppingMallCouponCondition";
import { IPageIShoppingMallCouponCondition } from "../../../../../api/structures/IPageIShoppingMallCouponCondition";

@Controller("/shoppingMall/adminUser/coupons/:couponId/conditions")
export class ShoppingmallAdminuserCouponsConditionsController {
  /**
   * Create coupon condition record.
   *
   * Create a new coupon condition record associated with a specific coupon.
   * Defines inclusion/exclusion rules for products, sections, or categories for
   * promotion application.
   *
   * The operation is restricted to 'adminUser' for promotional integrity.
   *
   * Returns the newly created coupon condition object conforming to the schema.
   *
   * @param connection
   * @param couponId Target coupon's UUID identifier
   * @param body Payload for coupon condition creation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createCouponCondition(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCouponCondition.ICreate,
  ): Promise<IShoppingMallCouponCondition> {
    try {
      return await post__shoppingMall_adminUser_coupons_$couponId_conditions({
        adminUser,
        couponId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search coupon conditions by couponId.
   *
   * Search for coupon conditions associated with a coupon specified by
   * couponId. Supports detailed filter, search, and pagination parameters in
   * request body for fine-grained query of conditions affecting promotion
   * logic.
   *
   * Endpoint is accessible only by users with the 'adminUser' role to maintain
   * control over promotional system configurations.
   *
   * Response includes paginated lists of coupon condition summaries matching
   * criteria.
   *
   * @param connection
   * @param couponId Target coupon's UUID identifier
   * @param body Filter and paginate coupon conditions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchCouponConditions(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCouponCondition.IRequest,
  ): Promise<IPageIShoppingMallCouponCondition.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_coupons_$couponId_conditions({
        adminUser,
        couponId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve coupon condition details.
   *
   * Retrieve detailed information for a specific coupon condition identified by
   * couponId and conditionId. Allows examination of promotion applicability
   * rules for individual coupons.
   *
   * Access restricted to 'adminUser' role users for security.
   *
   * Returns full coupon condition data structure matching the Prisma schema.
   *
   * @param connection
   * @param couponId Target coupon's UUID identifier
   * @param conditionId Target coupon condition's UUID identifier
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":conditionId")
  public async atCouponCondition(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("conditionId")
    conditionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCouponCondition> {
    try {
      return await get__shoppingMall_adminUser_coupons_$couponId_conditions_$conditionId(
        {
          adminUser,
          couponId,
          conditionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update coupon condition record.
   *
   * Update existing coupon condition details given couponId and conditionId.
   * Supports modifications to condition attributes and applicability
   * parameters.
   *
   * Restricted to 'adminUser' role for maintaining promotional system security.
   *
   * Returns updated coupon condition entity after successful modification.
   *
   * @param connection
   * @param couponId Target coupon's UUID identifier
   * @param conditionId Target coupon condition's UUID identifier
   * @param body Payload for coupon condition update
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":conditionId")
  public async updateCouponCondition(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("conditionId")
    conditionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCouponCondition.IUpdate,
  ): Promise<IShoppingMallCouponCondition> {
    try {
      return await put__shoppingMall_adminUser_coupons_$couponId_conditions_$conditionId(
        {
          adminUser,
          couponId,
          conditionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete coupon condition record.
   *
   * Delete an existing coupon condition record by couponId and conditionId.
   * This hard delete removes the condition permanently from the system.
   *
   * Accessible only to 'adminUser' to secure promo logic stability.
   *
   * No return body is provided upon successful deletion.
   *
   * @param connection
   * @param couponId Target coupon's UUID identifier
   * @param conditionId Target coupon condition's UUID identifier
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":conditionId")
  public async eraseCouponCondition(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("conditionId")
    conditionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_coupons_$couponId_conditions_$conditionId(
        {
          adminUser,
          couponId,
          conditionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
