import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_coupons } from "../../../../providers/post__shoppingMall_adminUser_coupons";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_coupons } from "../../../../providers/patch__shoppingMall_adminUser_coupons";
import { get__shoppingMall_adminUser_coupons_$couponId } from "../../../../providers/get__shoppingMall_adminUser_coupons_$couponId";
import { put__shoppingMall_adminUser_coupons_$couponId } from "../../../../providers/put__shoppingMall_adminUser_coupons_$couponId";
import { delete__shoppingMall_adminUser_coupons_$couponId } from "../../../../providers/delete__shoppingMall_adminUser_coupons_$couponId";

import { IShoppingMallCoupon } from "../../../../api/structures/IShoppingMallCoupon";
import { IPageIShoppingMallCoupon } from "../../../../api/structures/IPageIShoppingMallCoupon";

@Controller("/shoppingMall/adminUser/coupons")
export class ShoppingmallAdminuserCouponsController {
  /**
   * Create a new coupon promotion with details such as channel association,
   * coupon code, discount specifics, validity period, usage limits, and status.
   * This operation delivers controlled creation for marketing campaigns in the
   * shopping mall platform.
   *
   * The coupon entity corresponds to the shopping_mall_coupons table in the
   * Prisma schema. Only users with adminUser role can execute this operation to
   * maintain promotional integrity.
   *
   * The created coupon entity is returned for confirmation and future
   * operations.
   *
   * @param connection
   * @param body Payload structure for new coupon creation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createCoupon(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallCoupon.ICreate,
  ): Promise<IShoppingMallCoupon> {
    try {
      return await post__shoppingMall_adminUser_coupons({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list discount coupons.
   *
   * Search and retrieve discount coupons with advanced filtering and pagination
   * capabilities.
   *
   * This endpoint allows administrators, sellers, and members to access
   * available coupons subject to their permissions.
   *
   * Coupons support amount and percentage discounts with conditions and
   * expiration dates.
   *
   * The underlying data originates from the shopping_mall_coupons table
   * managing coupon metadata, conditions, and usage logs.
   *
   * @param connection
   * @param body Coupon search criteria
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallCoupon.IRequest,
  ): Promise<IPageIShoppingMallCoupon.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_coupons({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve coupon detail by ID.
   *
   * Get detailed coupon information by coupon ID.
   *
   * Accessible by administrators, sellers, and members.
   *
   * Provides complete coupon properties, status, and usage rules.
   *
   * @param connection
   * @param couponId Unique ID of the coupon
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":couponId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCoupon> {
    try {
      return await get__shoppingMall_adminUser_coupons_$couponId({
        adminUser,
        couponId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update coupon by ID.
   *
   * Update the details of an existing coupon by its ID provided in the path
   * parameter. This supports modification of discount amounts, usage limits,
   * validity dates, and descriptive fields within business rules.
   *
   * Only 'adminUser' role allowed to perform updates to protect the promotion
   * workflow. The operation returns the updated coupon entity on success.
   *
   * @param connection
   * @param couponId Target coupon's UUID identifier
   * @param body Payload structure for updating a coupon
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":couponId")
  public async updateCoupon(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCoupon.IUpdate,
  ): Promise<IShoppingMallCoupon> {
    try {
      return await put__shoppingMall_adminUser_coupons_$couponId({
        adminUser,
        couponId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete coupon by ID.
   *
   * Remove a coupon permanently from the database based on the given couponId.
   * This operation affects active promotions critically; only authorized
   * 'adminUser' can perform this deletion. There is no response content on
   * success.
   *
   * @param connection
   * @param couponId Target coupon's UUID identifier
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":couponId")
  public async eraseCoupon(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_coupons_$couponId({
        adminUser,
        couponId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
