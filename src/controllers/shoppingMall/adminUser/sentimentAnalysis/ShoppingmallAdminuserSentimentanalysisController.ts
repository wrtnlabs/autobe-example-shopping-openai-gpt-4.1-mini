import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_sentimentAnalysis } from "../../../../providers/post__shoppingMall_adminUser_sentimentAnalysis";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_sentimentAnalysis } from "../../../../providers/patch__shoppingMall_adminUser_sentimentAnalysis";
import { get__shoppingMall_adminUser_sentimentAnalysis_$sentimentAnalysisId } from "../../../../providers/get__shoppingMall_adminUser_sentimentAnalysis_$sentimentAnalysisId";
import { put__shoppingMall_adminUser_sentimentAnalysis_$sentimentAnalysisId } from "../../../../providers/put__shoppingMall_adminUser_sentimentAnalysis_$sentimentAnalysisId";
import { delete__shoppingMall_adminUser_sentimentAnalysis_$sentimentAnalysisId } from "../../../../providers/delete__shoppingMall_adminUser_sentimentAnalysis_$sentimentAnalysisId";

import { IShoppingMallSentimentAnalysis } from "../../../../api/structures/IShoppingMallSentimentAnalysis";
import { IPageIShoppingMallSentimentAnalysis } from "../../../../api/structures/IPageIShoppingMallSentimentAnalysis";

@Controller("/shoppingMall/adminUser/sentimentAnalysis")
export class ShoppingmallAdminuserSentimentanalysisController {
  /**
   * Create a new customer sentiment analysis record.
   *
   * Create a new sentiment analysis record storing AI-generated customer
   * sentiment data. This API accepts detailed sentiment scoring and text input
   * linked to users and products.
   *
   * Access control requires administrative privileges. Validation enforces data
   * completeness and consistency.
   *
   * Use this operation to add fresh AI analysis results for business insights
   * and machine learning feedback.
   *
   * Errors include invalid data, missing foreign keys, or unauthorized access.
   *
   * @param connection
   * @param body Information needed to create a sentiment analysis record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallSentimentAnalysis.ICreate,
  ): Promise<IShoppingMallSentimentAnalysis> {
    try {
      return await post__shoppingMall_adminUser_sentimentAnalysis({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated, filtered list of shopping mall customer sentiment
   * analyses.
   *
   * Retrieve a paginated and filtered list of customer sentiment analyses
   * generated by AI models. This API supports querying records based on
   * sentiment categories, score ranges, product IDs, dates, and user filters.
   *
   * Security rules limit access to users with appropriate roles.
   *
   * The shopping_mall_sentiment_analysis table contains AI-derived sentiment
   * data linked to product and customer. This supports decision making in
   * marketing and product management.
   *
   * Typical use case includes analytics dashboards or reports extracting
   * sentiment trends and distributions.
   *
   * Errors may occur if filters are invalid or unauthorized access is detected.
   *
   * @param connection
   * @param body Filter and pagination parameters for customer sentiment queries
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallSentimentAnalysis.IRequest,
  ): Promise<IPageIShoppingMallSentimentAnalysis.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_sentimentAnalysis({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific customer sentiment analysis record by ID.
   *
   * Get detailed information for a single customer sentiment analysis record by
   * its unique identifier.
   *
   * View includes sentiment score, category, original text analyzed, and
   * contextual metadata.
   *
   * Operation is restricted to authorized roles ensuring data confidentiality.
   *
   * This supports detailed analytics and troubleshooting of AI sentiment model
   * outputs.
   *
   * Errors handled include invalid ID format, missing records, or access
   * violations.
   *
   * @param connection
   * @param sentimentAnalysisId Unique ID of the sentiment analysis record to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sentimentAnalysisId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("sentimentAnalysisId")
    sentimentAnalysisId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSentimentAnalysis> {
    try {
      return await get__shoppingMall_adminUser_sentimentAnalysis_$sentimentAnalysisId(
        {
          adminUser,
          sentimentAnalysisId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing sentiment analysis record.
   *
   * Update a sentiment analysis record identified by its unique ID. Modify
   * fields such as sentiment score, sentiment category, source text, and
   * analysis date.
   *
   * Restricted to adminUser users for security.
   *
   * Supports correction or enhancement of previously stored sentiment results.
   *
   * Errors handled include invalid parameters, permissions, or record absence.
   *
   * @param connection
   * @param sentimentAnalysisId Unique ID of the sentiment analysis record to
   *   update
   * @param body Updated data for sentiment analysis record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sentimentAnalysisId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("sentimentAnalysisId")
    sentimentAnalysisId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSentimentAnalysis.IUpdate,
  ): Promise<IShoppingMallSentimentAnalysis> {
    try {
      return await put__shoppingMall_adminUser_sentimentAnalysis_$sentimentAnalysisId(
        {
          adminUser,
          sentimentAnalysisId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific sentiment analysis record from the shopping mall system.
   *
   * Permanently delete a specific sentiment analysis record identified by ID
   * from the shopping mall system.
   *
   * This is a hard delete action removing the record completely.
   *
   * Authorized only for adminUser roles to prevent data loss.
   *
   * Ensure this operation is used cautiously when cleaning up obsolete or
   * incorrect data.
   *
   * @param connection
   * @param sentimentAnalysisId Unique ID of the sentiment analysis record to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sentimentAnalysisId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("sentimentAnalysisId")
    sentimentAnalysisId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_sentimentAnalysis_$sentimentAnalysisId(
        {
          adminUser,
          sentimentAnalysisId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
