import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_sellerResponses } from "../../../../providers/post__shoppingMall_adminUser_sellerResponses";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_sellerResponses } from "../../../../providers/patch__shoppingMall_adminUser_sellerResponses";
import { get__shoppingMall_adminUser_sellerResponses_$id } from "../../../../providers/get__shoppingMall_adminUser_sellerResponses_$id";

import { IShoppingMallSellerResponse } from "../../../../api/structures/IShoppingMallSellerResponse";
import { IPageIShoppingMallSellerResponse } from "../../../../api/structures/IPageIShoppingMallSellerResponse";

@Controller("/shoppingMall/adminUser/sellerResponses")
export class ShoppingmallAdminuserSellerresponsesController {
  /**
   * Create new seller response.
   *
   * Create a new seller response entry.
   *
   * Request body includes response text, author user ID, privacy, and status.
   *
   * Only authorized users with seller or admin roles may create responses.
   *
   * Returns the created seller response record.
   *
   * @param connection
   * @param body New seller response data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallSellerResponse.ICreate,
  ): Promise<IShoppingMallSellerResponse> {
    try {
      return await post__shoppingMall_adminUser_sellerResponses({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List seller responses with filtering options.
   *
   * Retrieve seller responses with pagination and filtering capabilities.
   *
   * Supports filtering by content, privacy, status, and author.
   *
   * Access restricted to members with proper seller or admin roles.
   *
   * Used to manage official seller communications to customers.
   *
   * @param connection
   * @param body Pagination and filter criteria for seller responses
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallSellerResponse.IRequest,
  ): Promise<IPageIShoppingMallSellerResponse> {
    try {
      return await patch__shoppingMall_adminUser_sellerResponses({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific seller response.
   *
   * Retrieve detailed information of a seller response identified by id.
   *
   * Includes response content, author identification, privacy settings, status,
   * and metadata.
   *
   * Authorization required for seller or admin users.
   *
   * Supports management and audit of seller communications.
   *
   * @param connection
   * @param id Unique identifier of the seller response
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSellerResponse> {
    try {
      return await get__shoppingMall_adminUser_sellerResponses_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
