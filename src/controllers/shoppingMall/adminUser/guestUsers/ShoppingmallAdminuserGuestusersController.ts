import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMall_adminUser_guestUsers } from "../../../../providers/patch__shoppingMall_adminUser_guestUsers";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__shoppingMall_adminUser_guestUsers_$id } from "../../../../providers/get__shoppingMall_adminUser_guestUsers_$id";
import { put__shoppingMall_adminUser_guestUsers_$id } from "../../../../providers/put__shoppingMall_adminUser_guestUsers_$id";
import { delete__shoppingMall_adminUser_guestUsers_$id } from "../../../../providers/delete__shoppingMall_adminUser_guestUsers_$id";

import { IPageIShoppingMallGuestUsers } from "../../../../api/structures/IPageIShoppingMallGuestUsers";
import { IShoppingMallGuestUsers } from "../../../../api/structures/IShoppingMallGuestUsers";

@Controller("/shoppingMall/adminUser/guestUsers")
export class ShoppingmallAdminuserGuestusersController {
  /**
   * Search guest user sessions with filters and pagination.
   *
   * Search and retrieve paginated list of guest user sessions connected to the
   * system. Supports filtering by various parameters such as IP address, user
   * agent, session start/end, and status.
   *
   * Only accessible by users with adminUser role.
   *
   * Request body contains filter criteria and pagination details.
   *
   * Response is a paginated collection of guest user summaries matching the
   * criteria.
   *
   * Useful for system audit and analytics.
   *
   * @param connection
   * @param body Guest user search filters and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallGuestUsers.IRequest,
  ): Promise<IPageIShoppingMallGuestUsers.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_guestUsers({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get guest user session details by ID.
   *
   * Get detailed information of a guest user session identified by UUID.
   *
   * AdminUser role required for access.
   *
   * Returns full guest user record including session details, access metadata,
   * and status.
   *
   * If not found, returns 404 error.
   *
   * @param connection
   * @param id UUID of the guest user session to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallGuestUsers> {
    try {
      return await get__shoppingMall_adminUser_guestUsers_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update guest user session metadata.
   *
   * Update session and connection metadata for a guest user session identified
   * by UUID.
   *
   * AdminUser role required.
   *
   * Request body provides fields to update such as access_url, referrer,
   * user_agent, session_end_at, and status.
   *
   * Returns the updated guest user session record upon success.
   *
   * @param connection
   * @param id UUID of the guest user session to update
   * @param body Guest user update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallGuestUsers.IUpdate,
  ): Promise<IShoppingMallGuestUsers> {
    try {
      return await put__shoppingMall_adminUser_guestUsers_$id({
        adminUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete guest user session permanently by ID.
   *
   * Permanently delete a guest user session record by its UUID.
   *
   * AdminUser role required to perform this operation.
   *
   * No request body is needed.
   *
   * Successful deletion removes the record entirely.
   *
   * Parameter "id" is a UUID identifying the guest session to delete.
   *
   * @param connection
   * @param id UUID of guest user session to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_guestUsers_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
