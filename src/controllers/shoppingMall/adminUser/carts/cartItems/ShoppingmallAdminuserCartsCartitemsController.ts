import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_carts_$cartId_cartItems } from "../../../../../providers/post__shoppingMall_adminUser_carts_$cartId_cartItems";
import { AdminuserAuth } from "../../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_carts_$cartId_cartItems } from "../../../../../providers/patch__shoppingMall_adminUser_carts_$cartId_cartItems";
import { get__shoppingMall_adminUser_carts_$cartId_cartItems_$cartItemId } from "../../../../../providers/get__shoppingMall_adminUser_carts_$cartId_cartItems_$cartItemId";
import { put__shoppingMall_adminUser_carts_$cartId_cartItems_$cartItemId } from "../../../../../providers/put__shoppingMall_adminUser_carts_$cartId_cartItems_$cartItemId";
import { delete__shoppingMall_adminUser_carts_$cartId_cartItems_$cartItemId } from "../../../../../providers/delete__shoppingMall_adminUser_carts_$cartId_cartItems_$cartItemId";

import { IShoppingMallCartItem } from "../../../../../api/structures/IShoppingMallCartItem";
import { IPageIShoppingMallCartItem } from "../../../../../api/structures/IPageIShoppingMallCartItem";

@Controller("/shoppingMall/adminUser/carts/:cartId/cartItems")
export class ShoppingmallAdminuserCartsCartitemsController {
  /**
   * Add a new item to the cart.
   *
   * Create a new item in the specified shopping cart. The request body must
   * include product snapshot reference, quantity, unit price, and initial
   * status.
   *
   * This allows authenticated users to add products to their carts.
   *
   * Server validates product snapshot existence and inventory.
   *
   * Errors include 400 Bad Request for invalid input and 404 if the cart does
   * not exist.
   *
   * This operation manages shopping_mall_cart_items table records and requires
   * authorization roles memberUser and adminUser.
   *
   * @param connection
   * @param cartId Unique identifier of the target cart
   * @param body Cart item creation information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItem.ICreate,
  ): Promise<IShoppingMallCartItem> {
    try {
      return await post__shoppingMall_adminUser_carts_$cartId_cartItems({
        adminUser,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List cart items of a specific cart with filtering and pagination.
   *
   * Retrieve a filtered and paginated list of cart items belonging to the
   * specified cart identified by cartId. The cart items link to product
   * snapshots preserving the product state at addition time.
   *
   * The operation is intended for authenticated users and administrators
   * managing their shopping carts. It validates the existence of the cart and
   * accesses the associated cart items.
   *
   * Filtering may include status or product details via the product snapshot.
   * Pagination and sorting parameters help manage large carts.
   *
   * Errors include 404 if the cart does not exist.
   *
   * This operation manipulates the shopping_mall_cart_items entity and requires
   * authorization roles memberUser and adminUser.
   *
   * @param connection
   * @param cartId Unique identifier of the target cart
   * @param body Search criteria and pagination parameters for cart item
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItem.IRequest,
  ): Promise<IPageIShoppingMallCartItem> {
    try {
      return await patch__shoppingMall_adminUser_carts_$cartId_cartItems({
        adminUser,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific cart item by ID within a cart.
   *
   * Retrieve detailed information about a specific cart item identified by
   * cartItemId in the specified cart identified by cartId. The item details
   * include quantity, unit price, product snapshot reference, and status.
   *
   * This operation supports individual cart item view for authenticated users
   * managing their carts and administrators.
   *
   * Proper authorization is required to ensure users can access only their own
   * cart items.
   *
   * Errors include 404 Not Found if the cart or cart item does not exist or
   * does not belong to the given cart.
   *
   * This endpoint works with the shopping_mall_cart_items entity and its
   * relations.
   *
   * @param connection
   * @param cartId Unique identifier of the target cart
   * @param cartItemId Unique identifier of the cart item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartItemId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCartItem> {
    try {
      return await get__shoppingMall_adminUser_carts_$cartId_cartItems_$cartItemId(
        {
          adminUser,
          cartId,
          cartItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update cart item by ID within a cart.
   *
   * Update an existing cart item within the specified cart. Request body
   * includes updatable fields such as quantity, unit price, and status. Product
   * snapshot reference cannot be updated here to preserve product state.
   *
   * Authentication and authorization are required to ensure the user owns the
   * cart and item.
   *
   * Errors include 404 if cart or item not found, 400 for validation errors.
   *
   * This endpoint updates shopping_mall_cart_items entity records.
   *
   * @param connection
   * @param cartId Unique identifier of the target cart
   * @param cartItemId Unique identifier of the cart item
   * @param body Cart item update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cartItemId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItem.IUpdate,
  ): Promise<IShoppingMallCartItem> {
    try {
      return await put__shoppingMall_adminUser_carts_$cartId_cartItems_$cartItemId(
        {
          adminUser,
          cartId,
          cartItemId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a cart item by ID within a cart.
   *
   * Remove a specific cart item identified by cartItemId from the specified
   * cart. Performs a hard delete removing the record permanently.
   *
   * Accessible to authenticated users managing their carts or administrators.
   *
   * Errors include 404 if cart or cart item not found.
   *
   * Operates on shopping_mall_cart_items table.
   *
   * @param connection
   * @param cartId Unique identifier of the target cart
   * @param cartItemId Unique identifier of the cart item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cartItemId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_carts_$cartId_cartItems_$cartItemId(
        {
          adminUser,
          cartId,
          cartItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
