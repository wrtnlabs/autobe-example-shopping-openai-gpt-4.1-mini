import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { get__shoppingMall_adminUser_mileages_$mileageId } from "../../../../providers/get__shoppingMall_adminUser_mileages_$mileageId";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { put__shoppingMall_adminUser_mileages_$mileageId } from "../../../../providers/put__shoppingMall_adminUser_mileages_$mileageId";
import { delete__shoppingMall_adminUser_mileages_$mileageId } from "../../../../providers/delete__shoppingMall_adminUser_mileages_$mileageId";
import { post__shoppingMall_adminUser_mileages } from "../../../../providers/post__shoppingMall_adminUser_mileages";

import { IShoppingMallMileage } from "../../../../api/structures/IShoppingMallMileage";

@Controller("/shoppingMall/adminUser/mileages")
export class ShoppingmallAdminuserMileagesController {
  /**
   * Manage customer mileage records with full CRUD operations.
   *
   * This set of API operations manages customer mileage records in the shopping
   * mall backend system. The GET operation retrieves detailed mileage
   * information for a specific mileage record identified by 'mileageId',
   * including balances and accrued points. The POST operation allows creation
   * of a new mileage record for a user with initial values and timestamps. The
   * PUT operation updates an existing mileage record's balances and
   * income/outcome history, ensuring the record remains consistent with
   * business rules. The DELETE operation permanently removes a mileage record
   * from the database, ensuring no residual data remains.
   *
   * Security Considerations: These operations require authenticated access
   * typically by administrative roles, ensuring only authorized users can
   * create, update or delete mileage records. Data privacy and integrity are
   * enforced by restricting mutation operations.
   *
   * Database Relationships: Each mileage record is linked optionally to a guest
   * user or member user, and changes reflect in the corresponding user's
   * mileage accounts.
   *
   * Validation Rules:
   *
   * - Mileage IDs and user IDs must be valid UUIDs.
   * - Decimal fields (balances and income/outcome) must be non-negative where
   *   appropriate.
   * - Deleted records cannot be accessed or modified.
   *
   * Error Handling: Errors will be returned if invalid IDs are provided or if
   * updates violate business constraints. Attempts to delete non-existent
   * records will result in appropriate error responses.
   *
   * @param connection
   * @param mileageId Unique identifier of the mileage record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":mileageId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("mileageId")
    mileageId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallMileage> {
    try {
      return await get__shoppingMall_adminUser_mileages_$mileageId({
        adminUser,
        mileageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing mileage record.
   *
   * This API operation updates details of an existing mileage record, including
   * current balances, accumulated income/outcome, and expired mileage points.
   * It is designed for use by administrators to keep mileage data accurate and
   * consistent with transactional changes.
   *
   * The update operation requires specifying the mileage record by 'mileageId'
   * path parameter and provides an update payload conforming to business rules
   * and data types.
   *
   * Authorization requires admin privileges to prevent unauthorized
   * modifications.
   *
   * Error cases include invalid mileage IDs, attempts to update deleted
   * records, or invalid field values.
   *
   * @param connection
   * @param mileageId Unique identifier of the mileage record
   * @param body Mileage record update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":mileageId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("mileageId")
    mileageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallMileage.IUpdate,
  ): Promise<IShoppingMallMileage> {
    try {
      return await put__shoppingMall_adminUser_mileages_$mileageId({
        adminUser,
        mileageId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a mileage record permanently.
   *
   * Deletes the specified mileage record identified by 'mileageId' permanently
   * from the database, releasing all associated mileage points and history.
   *
   * Requires admin authorization.
   *
   * Records once deleted cannot be recovered.
   *
   * Error responses ensue if the mileageId does not exist or invalid.
   *
   * This is a hard delete operation removing the database entry without any
   * soft-delete marking.
   *
   * @param connection
   * @param mileageId Unique identifier of the mileage record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":mileageId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("mileageId")
    mileageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_mileages_$mileageId({
        adminUser,
        mileageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new mileage record for a customer.
   *
   * This API operation creates a new mileage record linked to a member or guest
   * customer. Intended for administrative control, it initializes the mileage
   * balance and history for each customer. It also sets audit timestamps to
   * ensure proper tracking of the record lifespan.
   *
   * Security is restricted to admin roles to prevent unauthorized mileage
   * manipulation.
   *
   * The mileage record includes current balance, cumulative income and outcome
   * points, expired points, and references to the user for future reward
   * calculations.
   *
   * Potential errors include duplicate records for the same user, invalid
   * UUIDs, and out-of-range values for mileage points.
   *
   * @param connection
   * @param body Mileage record creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallMileage.ICreate,
  ): Promise<IShoppingMallMileage> {
    try {
      return await post__shoppingMall_adminUser_mileages({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
