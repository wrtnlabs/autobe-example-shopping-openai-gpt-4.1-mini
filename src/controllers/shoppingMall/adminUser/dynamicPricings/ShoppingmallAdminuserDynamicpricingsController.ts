import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_dynamicPricings } from "../../../../providers/post__shoppingMall_adminUser_dynamicPricings";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_dynamicPricings } from "../../../../providers/patch__shoppingMall_adminUser_dynamicPricings";
import { get__shoppingMall_adminUser_dynamicPricings_$dynamicPricingId } from "../../../../providers/get__shoppingMall_adminUser_dynamicPricings_$dynamicPricingId";
import { put__shoppingMall_adminUser_dynamicPricings_$dynamicPricingId } from "../../../../providers/put__shoppingMall_adminUser_dynamicPricings_$dynamicPricingId";
import { delete__shoppingMall_adminUser_dynamicPricings_$dynamicPricingId } from "../../../../providers/delete__shoppingMall_adminUser_dynamicPricings_$dynamicPricingId";

import { IShoppingMallDynamicPricing } from "../../../../api/structures/IShoppingMallDynamicPricing";
import { IPageIShoppingMallDynamicPricing } from "../../../../api/structures/IPageIShoppingMallDynamicPricing";

@Controller("/shoppingMall/adminUser/dynamicPricings")
export class ShoppingmallAdminuserDynamicpricingsController {
  /**
   * Create a new dynamic pricing record.
   *
   * Add a new dynamic pricing record with details about product price
   * adjustments controlled by AI models. Requires administrative access to
   * create.
   *
   * Input must comply with schema definitions, particularly valid datetime
   * ranges and pricing values.
   *
   * Returns the created record with full details for confirmation.
   *
   * @param connection
   * @param body Data required to create a new dynamic pricing record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallDynamicPricing.ICreate,
  ): Promise<IShoppingMallDynamicPricing> {
    try {
      return await post__shoppingMall_adminUser_dynamicPricings({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve dynamic pricing records.
   *
   * Search and retrieve a paginated list of dynamic pricing adjustments applied
   * to products in the shopping mall system. Includes current pricing rule,
   * adjusted price, algorithm version, status, and effective dates.
   *
   * Restricted to authorized administrative users to prevent unauthorized price
   * changes. Supports filtering and sorting in request payload.
   *
   * Returns summary lists optimized for display and further actions.
   *
   * @param connection
   * @param body Filtering and pagination parameters for dynamic pricing search
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallDynamicPricing.IRequest,
  ): Promise<IPageIShoppingMallDynamicPricing.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_dynamicPricings({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed dynamic pricing information.
   *
   * Fetch detailed dynamic price adjustment information for a given ID.
   * Supports administrative review and audit of AI-powered pricing strategies.
   *
   * Authorization is required as this data impacts product pricing and business
   * strategies.
   *
   * Response returns the entire dynamic pricing record.
   *
   * @param connection
   * @param dynamicPricingId Unique identifier of the dynamic pricing record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":dynamicPricingId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("dynamicPricingId")
    dynamicPricingId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallDynamicPricing> {
    try {
      return await get__shoppingMall_adminUser_dynamicPricings_$dynamicPricingId(
        {
          adminUser,
          dynamicPricingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing dynamic pricing record in the shopping mall system.
   *
   * Update an existing AI-driven dynamic pricing record for a specific product.
   * This API enables authorized users to modify details related to pricing
   * adjustments calculated by AI algorithms, including the pricing rule
   * applied, adjusted price, algorithm version, status, and effective date
   * range.
   *
   * Security considerations include role-based access control to prevent
   * unauthorized modifications that could disrupt pricing integrity.
   *
   * This operation relates directly to the shopping_mall_dynamic_pricing table
   * which tracks dynamic pricing strategies for products. Validation ensures
   * the adjusted price remains realistic and consistent with business
   * policies.
   *
   * Typical usage involves administrators or pricing managers updating pricing
   * rules or algorithm versions reflecting marketing campaigns or seasonal
   * sales.
   *
   * Errors returned may include validation failures if dates or prices are
   * inconsistent or unauthorized access attempts.
   *
   * @param connection
   * @param dynamicPricingId Unique identifier of the dynamic pricing record to
   *   update
   * @param body Update payload for dynamic pricing record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":dynamicPricingId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("dynamicPricingId")
    dynamicPricingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallDynamicPricing.IUpdate,
  ): Promise<IShoppingMallDynamicPricing> {
    try {
      return await put__shoppingMall_adminUser_dynamicPricings_$dynamicPricingId(
        {
          adminUser,
          dynamicPricingId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific dynamic pricing record from the shopping mall system.
   *
   * Permanently delete a specific dynamic pricing record by its unique
   * identifier. This operation irreversibly removes the entry from the
   * database.
   *
   * Security is enforced by admin role restriction to prevent unauthorized
   * deletion.
   *
   * All related references must be managed prior to executing this deletion to
   * preserve data integrity.
   *
   * Deleting dynamic pricing records disables dynamic pricing adjustments for
   * associated products.
   *
   * @param connection
   * @param dynamicPricingId Unique identifier of the dynamic pricing record to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":dynamicPricingId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("dynamicPricingId")
    dynamicPricingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_dynamicPricings_$dynamicPricingId(
        {
          adminUser,
          dynamicPricingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
