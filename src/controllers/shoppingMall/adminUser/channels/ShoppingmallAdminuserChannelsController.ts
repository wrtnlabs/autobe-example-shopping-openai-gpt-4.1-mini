import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_channels } from "../../../../providers/post__shoppingMall_adminUser_channels";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_channels } from "../../../../providers/patch__shoppingMall_adminUser_channels";
import { get__shoppingMall_adminUser_channels_$id } from "../../../../providers/get__shoppingMall_adminUser_channels_$id";
import { put__shoppingMall_adminUser_channels_$id } from "../../../../providers/put__shoppingMall_adminUser_channels_$id";
import { delete__shoppingMall_adminUser_channels_$id } from "../../../../providers/delete__shoppingMall_adminUser_channels_$id";

import { IShoppingMallChannel } from "../../../../api/structures/IShoppingMallChannel";
import { IPageIShoppingMallChannel } from "../../../../api/structures/IPageIShoppingMallChannel";

@Controller("/shoppingMall/adminUser/channels")
export class ShoppingmallAdminuserChannelsController {
  /**
   * Create a new shopping mall sales channel.
   *
   * Create a new sales channel in the shopping mall backend.
   *
   * Required data includes unique code, name, optional description, and current
   * status.
   *
   * Only adminUser may perform this operation.
   *
   * Validation ensures all required fields are present and code uniqueness is
   * enforced.
   *
   * Successfully created channel data is returned.
   *
   * @param connection
   * @param body New channel data to be created
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallChannel.ICreate,
  ): Promise<IShoppingMallChannel> {
    try {
      return await post__shoppingMall_adminUser_channels({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a list of shopping mall sales channels with filtering and
   * pagination.
   *
   * Retrieve a paginated list of shopping mall sales channels.
   *
   * This operation supports filtering by various criteria such as status, name,
   * and creation date, allowing administrators to efficiently browse large
   * numbers of channels. The response provides concise channel summaries with
   * essential attributes.
   *
   * Only users with adminUser role are authorized to access this data.
   *
   * Validation ensures correct pagination and filter criteria format to prevent
   * abuse or errors.
   *
   * @param connection
   * @param body Request parameters for filtering, sorting, and pagination of
   *   channels
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallChannel.IRequest,
  ): Promise<IPageIShoppingMallChannel.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_channels({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a sales channel by ID.
   *
   * Retrieve detailed information for a specific sales channel by its unique ID
   * (UUID).
   *
   * Access to this operation is restricted to adminUser.
   *
   * It fetches all fields from the shopping_mall_channels entity and returns
   * them in full detail.
   *
   * Request validation includes ensuring the ID is in proper UUID format.
   *
   * @param connection
   * @param id Unique identifier of the target shopping mall sales channel
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallChannel> {
    try {
      return await get__shoppingMall_adminUser_channels_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing shopping mall sales channel.
   *
   * Update details of an existing sales channel using its UUID.
   *
   * AdminUser are authorized to perform this operation.
   *
   * Validation ensures the channel exists, the code remains unique, and updated
   * status values are valid.
   *
   * Returns the updated channel information on success.
   *
   * @param connection
   * @param id Unique identifier of the sales channel to update
   * @param body Updated data for the sales channel
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallChannel.IUpdate,
  ): Promise<IShoppingMallChannel> {
    try {
      return await put__shoppingMall_adminUser_channels_$id({
        adminUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a shopping mall sales channel by ID (soft delete).
   *
   * Delete a sales channel from the shopping mall platform identified by its
   * UUID.
   *
   * This operation marks the channel as deleted by setting the deleted_at
   * timestamp (soft delete).
   *
   * Only adminUser are authorized to execute this operation.
   *
   * Validation checks ensure the provided ID is a valid UUID and the channel
   * exists.
   *
   * No response content is returned upon successful deletion.
   *
   * @param connection
   * @param id Unique identifier of the sales channel to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_channels_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
