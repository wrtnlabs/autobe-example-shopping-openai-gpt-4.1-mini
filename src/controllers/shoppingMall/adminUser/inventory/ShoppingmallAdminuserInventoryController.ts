import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_inventory } from "../../../../providers/post__shoppingMall_adminUser_inventory";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_inventory } from "../../../../providers/patch__shoppingMall_adminUser_inventory";
import { get__shoppingMall_adminUser_inventory_$inventoryId } from "../../../../providers/get__shoppingMall_adminUser_inventory_$inventoryId";
import { put__shoppingMall_adminUser_inventory_$inventoryId } from "../../../../providers/put__shoppingMall_adminUser_inventory_$inventoryId";
import { delete__shoppingMall_adminUser_inventory_$inventoryId } from "../../../../providers/delete__shoppingMall_adminUser_inventory_$inventoryId";

import { IShoppingMallInventory } from "../../../../api/structures/IShoppingMallInventory";
import { IPageIShoppingMallInventory } from "../../../../api/structures/IPageIShoppingMallInventory";

@Controller("/shoppingMall/adminUser/inventory")
export class ShoppingmallAdminuserInventoryController {
  /**
   * Create inventory record.
   *
   * Create a new inventory record to track stock quantities for a specific sale
   * product option combination.
   *
   * The operation requires sale product ID, option combination code string, and
   * stock quantity in the request body.
   *
   * Authorization is limited to adminUser and sellerUser roles for security.
   * The response returns the created inventory entity with persisted
   * timestamps.
   *
   * @param connection
   * @param body Inventory creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallInventory.ICreate,
  ): Promise<IShoppingMallInventory> {
    try {
      return await post__shoppingMall_adminUser_inventory({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated inventory list.
   *
   * Search and retrieve a paginated list of inventory items.
   *
   * Supports filtering by sale ID, option code combinations, and stock quantity
   * range.
   *
   * Includes pagination for large result sets.
   *
   * Accessible by authorized users such as adminUser and sellers for inventory
   * oversight.
   *
   * Returns summarized inventory data suitable for display in management
   * consoles.
   *
   * Enables quick identification of low stock or replenishment needs.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for inventory
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallInventory.IRequest,
  ): Promise<IPageIShoppingMallInventory.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_inventory({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve inventory record by ID.
   *
   * Retrieve detailed inventory record for a specified inventory ID. The
   * inventory represents stock of a particular sale product option
   * combination.
   *
   * This operation accesses the shopping_mall_inventory table, returning the
   * inventory stock quantity and associated sale product ID. It ensures that
   * only authorized users can view this sensitive data to prevent leak of
   * inventory levels.
   *
   * The inventory ID must be a valid UUID corresponding to an existing
   * inventory record.
   *
   * The operation returns the inventory details including option combination
   * code and current stock quantity. If the record is not found or deleted, an
   * appropriate error should be handled by the server.
   *
   * @param connection
   * @param inventoryId Unique identifier of the target inventory record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":inventoryId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("inventoryId")
    inventoryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallInventory> {
    try {
      return await get__shoppingMall_adminUser_inventory_$inventoryId({
        adminUser,
        inventoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update inventory record by ID.
   *
   * Update specific inventory record with new stock quantity or option
   * combination code.
   *
   * The operation requires inventory ID path parameter and request body
   * containing updated inventory details.
   *
   * Authorized roles are adminUser and sellerUser. The response returns the
   * updated inventory record.
   *
   * @param connection
   * @param inventoryId Unique identifier of the inventory record to update
   * @param body Inventory update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":inventoryId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("inventoryId")
    inventoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallInventory.IUpdate,
  ): Promise<IShoppingMallInventory> {
    try {
      return await put__shoppingMall_adminUser_inventory_$inventoryId({
        adminUser,
        inventoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete inventory record by ID.
   *
   * Delete inventory record permanently by ID. This operation removes the
   * inventory record completely from the database.
   *
   * Only adminUser and sellerUser roles can delete inventory records.
   *
   * No response body is returned.
   *
   * @param connection
   * @param inventoryId Unique identifier of the inventory record to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":inventoryId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("inventoryId")
    inventoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_inventory_$inventoryId({
        adminUser,
        inventoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
