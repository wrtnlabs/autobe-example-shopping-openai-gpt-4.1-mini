import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMall_adminUser_inquiries } from "../../../../providers/patch__shoppingMall_adminUser_inquiries";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__shoppingMall_adminUser_inquiries_$id } from "../../../../providers/get__shoppingMall_adminUser_inquiries_$id";

import { IPageIShoppingMallInquiry } from "../../../../api/structures/IPageIShoppingMallInquiry";
import { IShoppingMallInquiry } from "../../../../api/structures/IShoppingMallInquiry";

@Controller("/shoppingMall/adminUser/inquiries")
export class ShoppingmallAdminuserInquiriesController {
  /**
   * Search and retrieve filtered list of product inquiries.
   *
   * Retrieve a paginated list of customer product inquiries with advanced
   * filtering capabilities. This operation accesses the shopping_mall_inquiries
   * table representing user inquiries related to products, capturing details
   * such as title, body, privacy settings, status, and associations with
   * channels, sections, categories, and users.
   *
   * Filtering options include channel ID, section ID, category ID, member user
   * ID, guest user ID, status, and inquiry privacy. Pagination control
   * parameters allow clients to fetch paged results efficiently.
   *
   * Security considerations enforce visibility of private inquiries only to
   * authorized roles. Results include all relevant inquiry summary information
   * for display in lists.
   *
   * This operation facilitates customer service management and oversight of
   * product inquiries within the shopping platform.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering
   *   inquiries
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallInquiry.IRequest,
  ): Promise<IPageIShoppingMallInquiry.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_inquiries({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get product inquiry by ID.
   *
   * Retrieve detailed information of a single product inquiry by its ID. This
   * includes all inquiry properties such as title, body, privacy, status, and
   * relationship to channel, section, category, and associated users.
   *
   * Security enforces access control to private inquiries, ensuring data is
   * visible only to authorized roles including the inquiry owner and platform
   * administrators.
   *
   * This retrieval supports customer service case handling and inquiry response
   * generation.
   *
   * No request body is needed.
   *
   * @param connection
   * @param id Unique identifier of the target inquiry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallInquiry> {
    try {
      return await get__shoppingMall_adminUser_inquiries_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
