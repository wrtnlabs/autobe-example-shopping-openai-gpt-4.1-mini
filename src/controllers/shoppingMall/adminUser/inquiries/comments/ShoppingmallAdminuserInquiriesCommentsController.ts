import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMall_adminUser_inquiries_$inquiryId_comments } from "../../../../../providers/patch__shoppingMall_adminUser_inquiries_$inquiryId_comments";
import { AdminuserAuth } from "../../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../../decorators/payload/AdminuserPayload";
import { get__shoppingMall_adminUser_inquiries_$inquiryId_comments_$commentId } from "../../../../../providers/get__shoppingMall_adminUser_inquiries_$inquiryId_comments_$commentId";

import { IPageIShoppingMallComment } from "../../../../../api/structures/IPageIShoppingMallComment";
import { IShoppingMallComment } from "../../../../../api/structures/IShoppingMallComment";

@Controller("/shoppingMall/adminUser/inquiries/:inquiryId/comments")
export class ShoppingmallAdminuserInquiriesCommentsController {
  /**
   * Search comments by inquiry ID with pagination.
   *
   * Retrieve paginated comments for a specific product inquiry.
   *
   * Includes member, guest, and seller comments, structured with support for
   * nested replies and privacy controls.
   *
   * Allows status and privacy filtering as well as pagination.
   *
   * Results include comment summaries optimized for list display.
   *
   * Access control ensures private comments are only visible to authorized
   * users.
   *
   * This supports customer service and communication workflows.
   *
   * @param connection
   * @param inquiryId Unique identifier of the parent inquiry
   * @param body Search parameters and pagination info for comments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallComment.IRequest,
  ): Promise<IPageIShoppingMallComment.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_inquiries_$inquiryId_comments({
        adminUser,
        inquiryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get comment detail by inquiry ID and comment ID.
   *
   * Get detailed information of a specific comment by its ID and parent inquiry
   * ID.
   *
   * Information includes content, author type, privacy, status, and
   * hierarchical relationships.
   *
   * Access is limited to authorized users respecting privacy.
   *
   * Supports customer communication management.
   *
   * No request body is required.
   *
   * @param connection
   * @param inquiryId Unique identifier of the parent inquiry
   * @param commentId Unique identifier of the comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallComment> {
    try {
      return await get__shoppingMall_adminUser_inquiries_$inquiryId_comments_$commentId(
        {
          adminUser,
          inquiryId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
