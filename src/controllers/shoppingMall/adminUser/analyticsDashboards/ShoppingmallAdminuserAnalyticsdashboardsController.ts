import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMall_adminUser_analyticsDashboards } from "../../../../providers/post__shoppingMall_adminUser_analyticsDashboards";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { patch__shoppingMall_adminUser_analyticsDashboards } from "../../../../providers/patch__shoppingMall_adminUser_analyticsDashboards";
import { get__shoppingMall_adminUser_analyticsDashboards_$analyticsDashboardId } from "../../../../providers/get__shoppingMall_adminUser_analyticsDashboards_$analyticsDashboardId";
import { put__shoppingMall_adminUser_analyticsDashboards_$analyticsDashboardId } from "../../../../providers/put__shoppingMall_adminUser_analyticsDashboards_$analyticsDashboardId";
import { delete__shoppingMall_adminUser_analyticsDashboards_$analyticsDashboardId } from "../../../../providers/delete__shoppingMall_adminUser_analyticsDashboards_$analyticsDashboardId";

import { IShoppingMallAnalyticsDashboard } from "../../../../api/structures/IShoppingMallAnalyticsDashboard";
import { IPageIShoppingMallAnalyticsDashboard } from "../../../../api/structures/IPageIShoppingMallAnalyticsDashboard";

@Controller("/shoppingMall/adminUser/analyticsDashboards")
export class ShoppingmallAdminuserAnalyticsdashboardsController {
  /**
   * Create a new analytics dashboard with configuration and operational
   * metadata.
   *
   * Requires adminUser authorization.
   *
   * Request must provide dashboard_type, JSON configuration, last_run_at
   * timestamp, and status.
   *
   * Response returns the created dashboard record including ID and timestamps.
   *
   * Validation errors include uniqueness constraints on dashboard_type.
   *
   * Supports admin workflows for analytics dashboard management.
   *
   * @param connection
   * @param body Analytics dashboard creation information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallAnalyticsDashboard.ICreate,
  ): Promise<IShoppingMallAnalyticsDashboard> {
    try {
      return await post__shoppingMall_adminUser_analyticsDashboards({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated list of analytic dashboards.
   *
   * Retrieve a paginated list of analytics dashboards. Supports filters on
   * dashboard type, status, and last execution time.
   *
   * Access control is enforced for administrative roles.
   *
   * The shopping_mall_analytics_dashboards table manages metadata for
   * dashboards such as configurations and status.
   *
   * Typical use cases include system monitoring, analytic display management,
   * or operational oversight.
   *
   * Errors returned when filters are invalid or user is unauthorized.
   *
   * @param connection
   * @param body Filtering and pagination parameters for analytic dashboard
   *   listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallAnalyticsDashboard.IRequest,
  ): Promise<IPageIShoppingMallAnalyticsDashboard.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_analyticsDashboards({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific analytics dashboard by ID.
   *
   * Retrieve detailed information of a specified analytics dashboard by its ID.
   * This operation allows admin users to access the dashboard configuration
   * JSON, status, and audit timestamps.
   *
   * Only authenticated administrators are authorized to perform this action.
   *
   * No side-effects occur in this operation; it is a safe, idempotent read
   * operation suitable for display and auditing.
   *
   * If the specified dashboard ID does not exist, a 404 error is returned.
   *
   * This API complements create, update, and delete operations on analytics
   * dashboards.
   *
   * @param connection
   * @param analyticsDashboardId The unique identifier of the analytics
   *   dashboard
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":analyticsDashboardId")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("analyticsDashboardId")
    analyticsDashboardId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAnalyticsDashboard> {
    try {
      return await get__shoppingMall_adminUser_analyticsDashboards_$analyticsDashboardId(
        {
          adminUser,
          analyticsDashboardId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an analytics dashboard by ID.
   *
   * Update an existing analytics dashboard by its ID with new configuration and
   * metadata.
   *
   * Requires adminUser authorization.
   *
   * Input should include dashboard_type, configuration JSON, last_run_at
   * datetime, and status.
   *
   * Returns the updated analytics dashboard record.
   *
   * Errors include 404 if the dashboard ID is not found and conflict if
   * dashboard_type uniqueness is violated.
   *
   * Supports dashboard lifecycle management by admin users.
   *
   * @param connection
   * @param analyticsDashboardId The unique identifier of the analytics
   *   dashboard
   * @param body Analytics dashboard update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":analyticsDashboardId")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("analyticsDashboardId")
    analyticsDashboardId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAnalyticsDashboard.IUpdate,
  ): Promise<IShoppingMallAnalyticsDashboard> {
    try {
      return await put__shoppingMall_adminUser_analyticsDashboards_$analyticsDashboardId(
        {
          adminUser,
          analyticsDashboardId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an analytics dashboard by ID.
   *
   * Soft delete an analytics dashboard by its ID. This marks the record as
   * deleted by setting the deleted_at timestamp.
   *
   * Authorized only for adminUser role.
   *
   * No request or response body.
   *
   * Returns 204 No Content on successful soft deletion.
   *
   * Supports full lifecycle management of analytics dashboards.
   *
   * @param connection
   * @param analyticsDashboardId The unique identifier of the analytics
   *   dashboard
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":analyticsDashboardId")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("analyticsDashboardId")
    analyticsDashboardId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_analyticsDashboards_$analyticsDashboardId(
        {
          adminUser,
          analyticsDashboardId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
