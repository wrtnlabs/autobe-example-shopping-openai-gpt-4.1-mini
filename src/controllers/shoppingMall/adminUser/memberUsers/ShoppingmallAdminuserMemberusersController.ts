import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMall_adminUser_memberUsers } from "../../../../providers/patch__shoppingMall_adminUser_memberUsers";
import { AdminuserAuth } from "../../../../decorators/AdminuserAuth";
import { AdminuserPayload } from "../../../../decorators/payload/AdminuserPayload";
import { get__shoppingMall_adminUser_memberUsers_$id } from "../../../../providers/get__shoppingMall_adminUser_memberUsers_$id";
import { put__shoppingMall_adminUser_memberUsers_$id } from "../../../../providers/put__shoppingMall_adminUser_memberUsers_$id";
import { delete__shoppingMall_adminUser_memberUsers_$id } from "../../../../providers/delete__shoppingMall_adminUser_memberUsers_$id";

import { IPageIShoppingMallMemberUser } from "../../../../api/structures/IPageIShoppingMallMemberUser";
import { IShoppingMallMemberUser } from "../../../../api/structures/IShoppingMallMemberUser";

@Controller("/shoppingMall/adminUser/memberUsers")
export class ShoppingmallAdminuserMemberusersController {
  /**
   * Search and retrieve a filtered, paginated list of shopping mall member
   * users.
   *
   * Retrieve a filtered and paginated list of shopping mall member users. This
   * operation enables administrators and user service systems to search,
   * filter, and sort registered members by various criteria including email,
   * nickname, status, and creation date.
   *
   * Security considerations include restricting access to authorized roles due
   * to personal and sensitive data involved. Returned data includes essential
   * member attributes but omits sensitive password hashes for security.
   *
   * This operation interacts with the shopping_mall_memberusers table,
   * respecting its schema and indexing to optimize query performance.
   *
   * Typical usage includes member management dashboards, reporting tools, and
   * bulk user operations.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for member user
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedBody()
    body: IShoppingMallMemberUser.IRequest,
  ): Promise<IPageIShoppingMallMemberUser.ISummary> {
    try {
      return await patch__shoppingMall_adminUser_memberUsers({
        adminUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a shopping mall member user by ID.
   *
   * Retrieve detailed information for a specific shopping mall member user by
   * ID. This operation is intended for administrative use or user profile
   * access where detailed member information is necessary.
   *
   * Security is critical; access should be limited to authorized roles only to
   * protect personally identifiable information.
   *
   * Data returned matches the shopping_mall_memberusers table schema, excluding
   * password_hash for security.
   *
   * Use this endpoint to view or edit member details.
   *
   * @param connection
   * @param id Unique identifier of the target member user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallMemberUser> {
    try {
      return await get__shoppingMall_adminUser_memberUsers_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing shopping mall member user by ID.
   *
   * Update specific properties of a shopping mall member user identified by ID.
   * This operation is used for modifying member profile data without exposing
   * sensitive authentication data.
   *
   * Only authorized roles can perform this operation to ensure proper access
   * control.
   *
   * Input data conforms to the shopping_mall_memberusers schema's update
   * fields.
   *
   * Successful updates return the updated member user record.
   *
   * @param connection
   * @param id Unique identifier of the target member user
   * @param body Update data for the member user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallMemberUser.IUpdate,
  ): Promise<IShoppingMallMemberUser> {
    try {
      return await put__shoppingMall_adminUser_memberUsers_$id({
        adminUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a shopping mall member user by ID.
   *
   * Soft delete a shopping mall member user identified by ID. This operation
   * marks the member user as deleted by setting the deletion timestamp,
   * preserving data integrity and audit trails.
   *
   * Only administrators have access to perform this sensitive operation.
   *
   * The system prevents accidental data loss by using logical deletion.
   *
   * Deleted member users will no longer appear in active user queries.
   *
   * @param connection
   * @param id Unique identifier of the target member user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @AdminuserAuth()
    adminUser: AdminuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_adminUser_memberUsers_$id({
        adminUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
