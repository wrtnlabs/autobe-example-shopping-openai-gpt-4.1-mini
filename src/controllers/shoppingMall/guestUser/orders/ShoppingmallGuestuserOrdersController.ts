import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { get__shoppingMall_guestUser_orders_$orderId } from "../../../../providers/get__shoppingMall_guestUser_orders_$orderId";
import { GuestuserAuth } from "../../../../decorators/GuestuserAuth";
import { GuestuserPayload } from "../../../../decorators/payload/GuestuserPayload";
import { put__shoppingMall_guestUser_orders_$orderId } from "../../../../providers/put__shoppingMall_guestUser_orders_$orderId";
import { delete__shoppingMall_guestUser_orders_$orderId } from "../../../../providers/delete__shoppingMall_guestUser_orders_$orderId";
import { post__shoppingMall_guestUser_orders } from "../../../../providers/post__shoppingMall_guestUser_orders";

import { IShoppingMallOrder } from "../../../../api/structures/IShoppingMallOrder";

@Controller("/shoppingMall/guestUser/orders")
export class ShoppingmallGuestuserOrdersController {
  /**
   * Get detailed information for a specific order.
   *
   * Retrieve detailed information of an order by its unique identifier orderId.
   * The response includes comprehensive data such as order status, payment
   * status, total price, and associated member, channel, and section
   * information.
   *
   * This operation requires user authentication and authorization with roles
   * guestUser, memberUser, sellerUser, or adminUser.
   *
   * Unauthorized access or invalid order IDs result in error responses.
   *
   * @param connection
   * @param orderId Unique identifier of the order
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderId")
  public async atOrder(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrder> {
    try {
      return await get__shoppingMall_guestUser_orders_$orderId({
        guestUser,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing order's details.
   *
   * Updates the details of an existing order identified by orderId with the
   * data supplied.
   *
   * Authorization is required as guestUser, memberUser, sellerUser, or
   * adminUser.
   *
   * Successful updates return the latest order data.
   *
   * Errors occur if the order is not found or update conflicts with business
   * rules.
   *
   * This endpoint supports order lifecycle management and payment confirmation
   * updates.
   *
   * @param connection
   * @param orderId Unique identifier of the order to update
   * @param body Order update payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":orderId")
  public async updateOrder(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrder.IUpdate,
  ): Promise<IShoppingMallOrder> {
    try {
      return await put__shoppingMall_guestUser_orders_$orderId({
        guestUser,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an order by ID.
   *
   * Soft delete an order specified by orderId, marking it as deleted without
   * physical removal.
   *
   * Authorized roles include guestUser, memberUser, sellerUser, and adminUser.
   *
   * Returns no content on success.
   *
   * Errors if the order does not exist or unauthorized.
   *
   * @param connection
   * @param orderId Unique identifier of the order to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":orderId")
  public async eraseOrder(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_guestUser_orders_$orderId({
        guestUser,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new order.
   *
   * Creates a new order application record in the system using the provided
   * data in the request body.
   *
   * The operation requires appropriate authorization among guestUser,
   * memberUser, sellerUser, or adminUser.
   *
   * On success, the created order information is returned for confirmation and
   * subsequent processing.
   *
   * Validation errors are returned in case of missing or incorrect data.
   *
   * This endpoint drives the crucial step of order placement and initiates
   * downstream operations like payment processing.
   *
   * @param connection
   * @param body Order creation payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createOrder(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
    @TypedBody()
    body: IShoppingMallOrder.ICreate,
  ): Promise<IShoppingMallOrder> {
    try {
      return await post__shoppingMall_guestUser_orders({
        guestUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
