import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { put__shoppingMall_guestUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId } from "../../../../../providers/put__shoppingMall_guestUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId";
import { GuestuserAuth } from "../../../../../decorators/GuestuserAuth";
import { GuestuserPayload } from "../../../../../decorators/payload/GuestuserPayload";
import { delete__shoppingMall_guestUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId } from "../../../../../providers/delete__shoppingMall_guestUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId";

import { IShoppingMallCartItemOption } from "../../../../../api/structures/IShoppingMallCartItemOption";

@Controller(
  "/shoppingMall/guestUser/cartItems/:cartItemId/cartItemOptions/:cartItemOptionId",
)
export class ShoppingmallGuestuserCartitemsCartitemoptionsController {
  /**
   * Update a specific cart item option by ID.
   *
   * Update the details of a cart item option identified by cartItemId and
   * cartItemOptionId. Cart item options represent selected product option
   * groups and sale options for items in a shopping cart. This update allows
   * modification of option group and option selections.
   *
   * This operation assures data consistency by enforcing valid UUID references
   * and proper linking to the shopping cart item and product option entities.
   *
   * Authorized roles include guestUser, memberUser, sellerUser, and adminUser
   * indicating authenticated access with varying permissions.
   *
   * @param connection
   * @param cartItemId Unique identifier of the cart item
   * @param cartItemOptionId Unique identifier of the cart item option
   * @param body Data needed to update a cart item option
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async updateCartItemOption(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
    @TypedParam("cartItemOptionId")
    cartItemOptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItemOption.IUpdate,
  ): Promise<IShoppingMallCartItemOption> {
    try {
      return await put__shoppingMall_guestUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId(
        {
          guestUser,
          cartItemId,
          cartItemOptionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a specific cart item option.
   *
   * Soft delete the cart item option specified by cartItemId and
   * cartItemOptionId. This action marks the record as deleted without
   * physically removing it from the database, enabling audit and recovery.
   *
   * This operation requires authorization as guestUser, memberUser, sellerUser,
   * or adminUser, reflecting system access control policies.
   *
   * No response body is returned on success. Invalid IDs or unauthorized
   * attempts result in errors.
   *
   * @param connection
   * @param cartItemId Unique identifier of the cart item
   * @param cartItemOptionId Unique identifier of the cart item option
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseCartItemOption(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
    @TypedParam("cartItemOptionId")
    cartItemOptionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMall_guestUser_cartItems_$cartItemId_cartItemOptions_$cartItemOptionId(
        {
          guestUser,
          cartItemId,
          cartItemOptionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
